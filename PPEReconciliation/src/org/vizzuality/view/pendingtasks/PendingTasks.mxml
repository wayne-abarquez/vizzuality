<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="874" height="100%" 
	styleName="dataDownloadContainer" backgroundSize="100%" 
	xmlns:maps="com.google.maps.*" verticalScrollPolicy="off" creationComplete="init()" xmlns:components="org.vizzuality.components.*" xmlns:ns1="org.vizzuality.view.pendingtasks.*">
	<mx:states>
		<mx:State name="loading">
			<mx:AddChild position="lastChild">
				<components:LoadingCanvas height="419" top="108" left="0" right="0">
				</components:LoadingCanvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import org.vizzuality.view.pendingtasks.itemrenders.PendingTaskItem;
			import mx.events.ScrollEvent;
			import org.vizzuality.events.ConfirmationAlertEvent;
			import mx.controls.Alert;
			import org.vizzuality.events.NotificationEvent;
			import com.asual.swfaddress.SWFAddress;
			import gs.TweenMax;
			import org.vizzuality.events.TaskSelectionEvent;
			import org.vizzuality.events.CancelTaskEvent;
			import org.vizzuality.events.MyEventDispatcher;
			import org.vizzuality.events.MyEventDispatcher;
			import org.vizzuality.view.confirmationAlert;
			import org.vizzuality.model.Task;
			import mx.utils.ObjectProxy;
			import mx.core.Application;
			import com.adobe.serialization.json.JSON;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import resource.Resource;
			
			private var ud:UploadingData;
			private var scrollPosition:Number = 0;
			private var confirmAlert: confirmationAlert = new confirmationAlert();
			private var taskItem: Task = new Task ();
			
			private var totalTasks:Number=0;
			[Bindable] private var page:Number=1;
			[Bindable] private var totalPages:Number=1;
			[Bindable] public var warningMessage:String = "";

			
			[Bindable]private var pendingTasks: ArrayCollection = new ArrayCollection();
			
			private function init():void {
				getPendingTasks(1);
				MyEventDispatcher.addEventListener(CancelTaskEvent.CANCEL_TASK,onShowAlertConfirmation);
				MyEventDispatcher.addEventListener(TaskSelectionEvent.SELECTED_TASK_FOR_UPLOAD,onSelectedTaskForUpload);
				MyEventDispatcher.addEventListener(TaskSelectionEvent.TASK_UPLOADED,onTaskUploaded);
				MyEventDispatcher.addEventListener(NotificationEvent.TASK_LIST_NOTIFICATION,onTaskListNotification);
				Application.application.addEventListener(ScrollEvent.SCROLL,function (ev:ScrollEvent):void {
					scrollPosition = ev.position;
				});
			}
			
			private function onTaskListNotification(event:NotificationEvent):void {
				warningMessage=event.message;
			}
			
			private function onSelectedTaskForUpload(ev:TaskSelectionEvent):void {
				ud = new UploadingData();
				ud.setTask(ev.task);
				Application.application.addChild(ud);				 
				ud.selectFile();
			}			
			
			
			private function onShowAlertConfirmation(ev:CancelTaskEvent):void {
				confirmAlert.x = ev.positionX-70;
				if (scrollPosition>0) {
					confirmAlert.y = (ev.positionY-80)+(scrollPosition-15);
				} else {
					confirmAlert.y = ev.positionY-80;
				}
				taskItem = ev.task;
				MyEventDispatcher.addEventListener(ConfirmationAlertEvent.GO_ON,onSelectedContinue);
				MyEventDispatcher.addEventListener(ConfirmationAlertEvent.STOP_NOW,onSelectedStop);
				Application.application.verticalScrollPolicy = 'off';
				Application.application.mamufas.visible = true;
				Application.application.addChild(confirmAlert);
			}
			
			private function onSelectedContinue(ev:ConfirmationAlertEvent):void {
				MyEventDispatcher.removeEventListener(ConfirmationAlertEvent.GO_ON,onSelectedContinue);
				MyEventDispatcher.removeEventListener(ConfirmationAlertEvent.STOP_NOW,onSelectedStop);
				onTaskCanceled();
				for each (var ob:Array in itemList.renderers) {
					if (!ob[0].mustRollOver) {
						PendingTaskItem(ob[0]).handleAutomaticOut();
						PendingTaskItem(ob[0]).mustRollOver = true;
					}
				}
				try {
					Application.application.removeChild(confirmAlert);
					Application.application.verticalScrollPolicy = 'auto';
					Application.application.mamufas.visible = false;
				} catch (e:Error) {}
			}
			
			private function onSelectedStop(ev:ConfirmationAlertEvent):void {
				MyEventDispatcher.removeEventListener(ConfirmationAlertEvent.GO_ON,onSelectedContinue);
				MyEventDispatcher.removeEventListener(ConfirmationAlertEvent.STOP_NOW,onSelectedStop);
				for each (var ob:Array in itemList.renderers) {
					if (!ob[0].mustRollOver) {
						PendingTaskItem(ob[0]).handleAutomaticOut();
						PendingTaskItem(ob[0]).mustRollOver = true;
					}
				}
				try {
					Application.application.removeChild(confirmAlert);
					Application.application.verticalScrollPolicy = 'auto';
					Application.application.mamufas.visible = false;
				} catch (e:Error) {}
			}
			
			
			private function onTaskUploaded(ev:TaskSelectionEvent):void {
				currentState='';
				getPendingTasks(1);
				Application.application.removeChild(ud);
			}
			
			
			public function getPendingTasks(p:Number):void {
				currentState="loading";
				jsonService.url = Application.application.serverUrl + "/exports?page="+p+"&per_page=8";
				jsonService.send();	
				page=p;					
			}
			
			private function onTaskCanceled():void {
				cancelJsonService.url = Application.application.serverUrl + "/exports/"+taskItem.id+"/destroy";
				cancelJsonService.send({iloveflex:""});
			}
			
			private function cancelTaskResult(event:ResultEvent):void {
				//refresh the list
				getPendingTasks(page);
			}
			
			private function getPendingTasksResult(ev:ResultEvent):void {
				var res:Object = JSON.decode(ev.result as String);
				var resArr:Array = [];
				for(var i:String in res.results as Array)  {
					var ta:Task = new Task();
					ta.code=res.results[i].id;
					ta.id=res.results[i].id;
					ta.importId = res.results[i].import_id;
					//ta.type=res.results[i].type;
					ta.description=res.results[i].description;
					//ta.what=res.results[i].what;
					ta.numareas=res.results[i].numareas;
					ta.status=res.results[i].task_status;
					ta.statusPercen=res.results[i].statuspercen;
					ta.date=parseDate(res.results[i].created_at);
					resArr.push(ta);
				}
				pendingTasks=new ArrayCollection(resArr);
				totalTasks=res.total;
				totalPages = Math.ceil(totalTasks/8);		
				currentState="";
				calculateHeight();
				
				(page<totalPages)?nextPageButton.enabled=true:nextPageButton.enabled=false;
				(page>1)?previousPageButton.enabled=true:previousPageButton.enabled=false;
					
				
			}
			
			private function calculateHeight():void{
				this.itemList.height = pendingTasks.length * 43;
 				Application.application.viewsContainer.myViewStack.height = this.itemList.height + 280;	
			}
			
			public static function createRendererWithProperties(renderer:Class,properties:Object ):IFactory {
			  var factory:ClassFactory = new ClassFactory(renderer); 
			  factory.properties = properties;
			  return factory;
			}	
			
			private function parseDate( str : String ) : Date {
			    var matches : Array = str.match(/(\d\d\d\d)-(\d\d)-(\d\d)/);
			
			    var d : Date = new Date();
			
			    d.setUTCFullYear(int(matches[1]), int(matches[2]) - 1, int(matches[3]));
			
			    return d;
			}			

		]]>
	</mx:Script>
	<mx:Canvas left="0" right="0" top="0" height="62" >
		<mx:HBox left="13" top="20" horizontalGap="-3" verticalAlign="bottom" height="25" width="844">
			<mx:Label text="Pending tasks" fontFamily="Helvetica" fontWeight="bold" fontSize="20" color="#666666" left="10" top="10" letterSpacing="-1" height="25" right="10" textAlign="left"/>		
			<mx:Label text="{'('+pendingTasks.length+')'}"  textAlign="left" height="20" color="#FF3300" fontWeight="bold" letterSpacing="-1" width="22"/>			
		</mx:HBox>
		<mx:Button right="18" top="21" click="getPendingTasks(page)" styleName="whiteButton" icon="{Resource.ARROW_CIRCLE_UP}" overIcon="{Resource.ARROW_CIRCLE_OVER}" paddingBottom="2" label="Refresh" labelPlacement="left"/>
	</mx:Canvas>

    <mx:VBox left="0" right="0" top="62" backgroundColor="#FFFFFF" paddingLeft="14" paddingRight="15" bottom="0" paddingTop="15">
		
		<mx:Canvas id="messageBox" includeInLayout="{warningMessage.length>0}" visible="{warningMessage.length>0}" styleName="softYellow" width="100%" height="30" backgroundSize="100%">
			<mx:Label x="27" y="10" text="{warningMessage}" fontFamily="Helvetica" fontWeight="bold" fontSize="11" color="#666666"/>
			<mx:Image x="9" y="7" source="{Resource.CLOCK_EXCLAMATION_ICON}"/>
			
		</mx:Canvas>		
		<mx:Canvas width="100%" height="54" styleName="softBlueUp" backgroundSize="100%">
			<mx:Label text="Select one to continue with the upload proccess"  fontFamily="Helvetica" fontStyle="normal" fontSize="12" fontWeight="bold" color="#666666" width="570" left="10" top="10"/>
			<mx:Label text="What" top="36" left="10" fontFamily="Helvetica" fontSize="11" color="#336699"/>
			<mx:Label text="Status" left="404" top="36" fontFamily="Helvetica" fontSize="11" color="#336699"/>
			<mx:Label text="Date" left="619" top="36" fontFamily="Helvetica" fontSize="11" color="#336699"/>

		</mx:Canvas>
		
		<components:CustomList id="itemList" height="350" width="100%" itemRenderer="org.vizzuality.view.pendingtasks.itemrenders.PendingTaskItem" dataProvider="{pendingTasks}" borderStyle="none"
			paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"  />
		
		<mx:Canvas width="100%" height="34" styleName="softBlueBottom" backgroundSize="100%">
			<mx:Label  right="75" verticalCenter="-1" width="211" text="{'page '+page+' of '+totalPages}" textAlign="right" fontFamily="Helvetica" fontSize="11" color="#333333" fontWeight="bold" height="15"/>
			<mx:Button id="previousPageButton" right="40" verticalCenter="0" click="getPendingTasks(page-1)"
				useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="whitePaginationLeft" width="27" height="24"/>
			<mx:Button id="nextPageButton" right="8" verticalCenter="0" useHandCursor="true" click="getPendingTasks(page+1)"
				 mouseChildren="false" buttonMode="true" styleName="whitePaginationRight" width="27" height="24"/>
		</mx:Canvas>	
		
		<mx:Spacer height="12" />
		
		<mx:Canvas width="100%" height="66" styleName="ContainersInfo">	
			<mx:Image x="10" y="10" width="43" height="47" source="{resource.Resource.STEP4}"/>
			<mx:Label text="Download new data"  left="65" right="0" top="19" fontFamily="Helvetica" fontWeight="bold" fontSize="13" color="#414141"/>
			<mx:HBox id="hbox1" x="65" y="34"  horizontalGap="0" width="542">
				<mx:Label  text="Use our" fontSize="12" fontFamily="Helvetica" color="#414141"/>
				<components:LinkLabel text="search tools"  fontSize="12" fontFamily="Helvetica" color="#336699" fontWeight="bold"
				default_color="0x336699" default_hover_color="0x003366" default_hover_decoration="none" text_decoration="none" default_weight="bold" default_hover_weight="bold"
				click="{SWFAddress.setValue('/rec/checkout')}"/>
				<mx:Label text="to get some new data, and stat a new proccess"  fontSize="12" fontFamily="Helvetica" color="#414141"/>
			</mx:HBox>
		</mx:Canvas>
		
		<mx:Canvas width="100%" height="66" styleName="ContainersInfo" 
			includeInLayout="{Application.application.previousTasks>0}"
			visible="{Application.application.previousTasks>0}">	
			<mx:Image x="10" y="10" width="43" height="47" source="{resource.Resource.STEP5}"/>
			<mx:Label text="Browse your completed uploads"  left="65" right="0" top="19" fontFamily="Helvetica" fontWeight="bold" fontSize="13" color="#414141"/>
			<mx:HBox id="hbox2" x="65" y="34"  horizontalGap="0" width="542">
				<mx:Label  text="Go to the" fontSize="12" fontFamily="Helvetica" color="#414141"/>
				<components:LinkLabel text="Previous uploads"  fontSize="12" fontFamily="Helvetica" color="#336699" fontWeight="bold"
				default_color="0x336699" default_hover_color="0x003366" default_hover_decoration="none" 
				text_decoration="none" default_weight="bold" default_hover_weight="bold"
				click="{SWFAddress.setValue('/rec/previous/overview')}"/>
				<mx:Label text="tab and view your completed uploads"  fontSize="12" fontFamily="Helvetica" color="#414141"/>
			</mx:HBox>		
		</mx:Canvas>
    </mx:VBox>
	<mx:HTTPService id="jsonService" resultFormat="text" method="GET" fault="Alert.show('getPendingTasksResult ERROR: Please contact administrator')" result="getPendingTasksResult(event)" />
	<mx:HTTPService id="cancelJsonService" resultFormat="text" method="POST" fault="Alert.show('cancelTaskResult ERROR: Please contact administrator')"  result="cancelTaskResult(event)" />

	
</mx:Canvas>
