<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]" 
	xmlns:ns1="com.google.maps.*" width="100%" height="100%" xmlns:local="*" currentState="Login">
	<mx:states>
		<mx:State name="Login">
			<mx:AddChild position="lastChild">
				<mx:Canvas x="0" y="0" width="100%" height="100%" backgroundColor="#CCFFFF" backgroundAlpha="0.99">
					<mx:TextInput id="usernameInput" y="314" horizontalCenter="0" borderStyle="solid" borderThickness="1" cornerRadius="5" textAlign="left" color="#474747" fontStyle="italic" 
						fontWeight="bold" paddingLeft="5"/>
					<mx:TextInput id="passwordInput" y="370" horizontalCenter="0" displayAsPassword="true" borderStyle="solid" cornerRadius="5" textAlign="left" color="#474747" 
						fontStyle="italic" fontWeight="bold" paddingLeft="5" enter="login()"/>
					<mx:Button y="410" label="Entrar" color="#3B3B3B" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]" horizontalCenter="0" click="login()"/>
					<mx:Label y="353" text="Contraseña" fontWeight="bold" color="#3B3B3B" horizontalCenter="0"/>
					<mx:Label y="297" text="Usuario" fontWeight="bold" color="#3B3B3B" horizontalCenter="0"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;   
			import com.google.maps.Color;
			import com.google.maps.styles.StrokeStyle;
			import com.google.maps.styles.FillStyle;
			import mx.events.CloseEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.overlays.Marker;
			import mx.controls.Alert;
			import com.google.maps.LatLngBounds;
			import com.google.maps.services.GeocodingResponse;
			import com.google.maps.services.Placemark;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.LatLng;
			import com.google.maps.MapType;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapAction;
			import com.google.maps.MapEvent;
			
			private var startRaceMarker: Marker ;
			private var finishRaceMarker: Marker ;
			[Bindable]private var arrayRaces: Array = new Array();
			private var markersArray: Array = new Array();
			[Bindable]private var provincesArray: ArrayCollection;
			
			 
			private function init():void {
                server.addEventListener(ResultEvent.RESULT,onResult);
            	server.addEventListener(FaultEvent.FAULT,onFault);
                server.getRunsList();
            }
            
            private function getProvinces():void {
                server.addEventListener(ResultEvent.RESULT,onProvincesResult);
				server.getProvinces();
            }
            
            private function onProvincesResult(event:ResultEvent):void {
            	provincesArray = new ArrayCollection(event.result as Array);
            	server.removeEventListener(ResultEvent.RESULT,onProvincesResult);
            }
            
            private function login():void {
            	server.addEventListener(ResultEvent.RESULT,onLoginOK);
            	server.addEventListener(FaultEvent.FAULT,onLoginKO);
            	server.login(usernameInput.text,passwordInput.text);
            }
            
            private function onLoginOK(ev: ResultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onLoginOK);
            	server.removeEventListener(FaultEvent.FAULT,onLoginKO);
            	if(ev.result.is_admin=='t') {
	            	this.currentState = "";            		
            	} else {
            		Alert.show("El usuario no es administrador");
            	}
            }
            
            private function onLoginKO(ev: FaultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onLoginOK);
            	server.removeEventListener(FaultEvent.FAULT,onLoginKO);
            	Alert.show("El login es incorrecto2");
            	
            }
            
            private function onResult (event:ResultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onResult);
            	server.removeEventListener(FaultEvent.FAULT,onFault);
            	arrayRaces = event.result as Array;
            	getProvinces();
            }
            
            private function onFault (event:FaultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onResult);
            	server.removeEventListener(FaultEvent.FAULT,onFault);
            	trace(event.fault);
            }
			
			
			private function onMapReady(event:Event):void {
				init();
		    	map.setDoubleClickMode(MapAction.ACTION_NOTHING); 
		    	this.map.setCenter(new LatLng(40.44694705960048, -3.33984375), 5, MapType.NORMAL_MAP_TYPE);
	  			map.addControl(new ZoomControl());
	  			map.addControl(new PositionControl());
	  			map.addControl(new MapTypeControl());
		        map.addEventListener(MapMouseEvent.CLICK, onMapClick);			
			}
			
			
			private function onMapClick(event:MapMouseEvent):void { 
				if (markersArray.length==0) {
					/* AÑADIMOS EL PRINCIPIO */
					markersArray.push(event.latLng);
					startRaceMarker = new Marker(event.latLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: true,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					map.addOverlay(startRaceMarker);
					
				} else {
					if (markersArray.length==1) {
						markersArray.push(event.latLng);
						finishRaceMarker = new Marker(event.latLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: Color.RED}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: true,
								         hasShadow: false, 
								         radius: 12, 
								         label: "Ll",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
						map.addOverlay(finishRaceMarker);
					} 
				}
			}
			
			
			private function searchLocation(str: String):void {
		    	var geocoder:ClientGeocoder = new ClientGeocoder();
                geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, geocoder_geocodingSuccess);
                geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, geocoder_geocodingFailure);
                geocoder.geocode(str);
		    }
		    
		    
		    private function geocoder_geocodingSuccess(evt:GeocodingEvent):void {
                var result:Placemark = GeocodingResponse(evt.response).placemarks[0];
                var box:Object = result.ExtendedData.LatLonBox;
                var pBbox:LatLngBounds = new LatLngBounds(new LatLng(box.north,box.west),new LatLng(box.south,box.east));               							                
                map.setCenter(result.point,map.getBoundsZoomLevel(pBbox));
            }

            private function geocoder_geocodingFailure(evt:GeocodingEvent):void {
                Alert.show("No se ha encontrado esta localización: " + evt.name);
            }
            
            
            
            private function clearInputs():void {
            	distance_text.text = "";
            	distance_meters.text = "";
            	iden.text = "";
            	race_name.text = "";
            	date.text = "";
            	category.text = "";
            	awards.text = "";
            	price.text = "";
            	inscription_email.text = "";
            	inscription_location.text = "";
            	web.text = "";
            	description.text = "";
            	race_location.text = ""; 
            	markersArray = new Array();
            	map.clearOverlays();          	
            }
            
            private function addNewRace():void {
            	clearInputs();
            	racesTab.selectedIndex = 1;
            	raceList.selectedItem = false;
            }
            
            private function editRace():void {
            	if (raceList.selectedItem) {
            		clearInputs();
            		racesTab.selectedIndex = 1;
            		fillInputs(raceList.selectedItem);
            	} else {
            		racesTab.selectedIndex = 0;
            		Alert.show ("No tienes ninguna carrera seleccionada!");
            	}
            }
            
            private function eraseRace():void {
            	Alert.yesLabel = "Si";
                Alert.noLabel = "No";
                Alert.buttonWidth = 50;
            	
            	racesTab.selectedIndex = 0;
            	if (raceList.selectedItem) {
            		var a:Alert = Alert.show("¿Estas seguro de eliminar " + arrayRaces[raceList.selectedIndex].name + "?", 
            		"Vas a eliminar una carrera", Alert.YES | Alert.NO , this, alertClickHandler);
            	} else {
            		Alert.show ("No tienes ninguna carrera seleccionada!");
            	}
            }
            
            private function alertClickHandler(event:CloseEvent): void {
            	if(event.detail == Alert.YES) {
            		server.addEventListener(ResultEvent.RESULT,function onEraseResult():void { server.removeEventListener(ResultEvent.RESULT,onEraseResult); Alert.show("Carrera eliminada de la base de datos"); init();});
            		server.addEventListener(FaultEvent.FAULT,function onEraseFault():void {server.removeEventListener(FaultEvent.FAULT,onEraseFault);Alert.show("La carrera no se ha eliminado, vuelve a intentarlo más tarde"); init();});
                	server.removeRun(arrayRaces[raceList.selectedIndex].id);
            	}	
            }
            
            
            
            private function fillInputs(obj: Object):void {
            	markersArray = new Array();
            	
            	if (obj.distance_text!=null) distance_text.text = obj.distance_text as String;
            	if (obj.distance_meters!=null) distance_meters.text = obj.distance_meters;
            	if (obj.id!=null) iden.text = obj.id;
            	if (obj.name!=null) race_name.text = obj.name;
            	if (obj.event_date!=null) date.text = obj.event_date;
            	if (obj.category!=null) category.text = obj.category;
            	if (obj.awards!=null) awards.text = obj.awards;
            	if (obj.inscription_price!=null) price.text = obj.inscription_price;
            	if (obj.inscription_email!=null) inscription_email.text = obj.inscription_email;
            	if (obj.inscription_website!=null) web.text = obj.inscription_website;
            	if (obj.inscription_location!=null) inscription_location.text = obj.inscription_location;
            	if (obj.description!=null) description.text = obj.description;
            	if (obj.event_location!=null) race_location.text = obj.event_location; 
            	if (obj.province_fk!=null)  provincesCombo.selectedIndex = obj.province_fk - 1;
            	if (obj.is_displayed_in_home!=null) {
            		if (obj.is_displayed_in_home == 'f') {
            			selectedRunCheck.selected = false;
            		} else {
            			selectedRunCheck.selected = true;
            		}
            	}
            	
            	map.clearOverlays();
            	
            	startRaceMarker = new Marker(new LatLng(obj.start_point_lat,obj.start_point_lon),new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: true,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
								         
				map.addOverlay(startRaceMarker);
            	
            	finishRaceMarker = new Marker(new LatLng(obj.end_point_lat,obj.end_point_lon),new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: Color.RED}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: true,
								         hasShadow: false, 
								         radius: 12, 
								         label: "Ll",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
            	map.addOverlay(finishRaceMarker);
            	
            	markersArray.push(startRaceMarker.getLatLng(), finishRaceMarker.getLatLng());
            	
 				var directionsBounds:LatLngBounds = new LatLngBounds(markersArray[0],markersArray[1]);
				map.setCenter(directionsBounds.getCenter());
				map.setZoom(map.getBoundsZoomLevel(directionsBounds));
            }
             
            
            private function saveData (id: String = null): void {
            	if (id==null) /* ESTA CREANDO UNO NUEVO */ {
            		server.addEventListener(ResultEvent.RESULT, onEditNewRace);
            		server.addEventListener(FaultEvent.FAULT, onEditNewRaceFault);
                	server.createNewRun(race_name.text,race_location.text,distance_meters.text,distance_text.text,date.text,
                		category.text,awards.text,description.text,price.text,inscription_location.text,inscription_email.text,
                		web.text,(startRaceMarker.getLatLng()).lat(),(startRaceMarker.getLatLng()).lng(),(finishRaceMarker.getLatLng()).lat(),
                		(finishRaceMarker.getLatLng()).lng(), provincesCombo.selectedItem.id,(selectedRunCheck.selected)?'t':'f');
            	} else { /*EESTA EDITANDO UNO PREVIO*/
		        	server.addEventListener(ResultEvent.RESULT,onEditNewRace);
		        	server.addEventListener(FaultEvent.FAULT,onEditNewRaceFault);
                	server.updateRun(iden.text,race_name.text,race_location.text,distance_meters.text,distance_text.text,date.text,
                		category.text,awards.text,description.text,price.text,inscription_location.text,inscription_email.text,
                		web.text,(startRaceMarker.getLatLng()).lat(),(startRaceMarker.getLatLng()).lng(),(finishRaceMarker.getLatLng()).lat(),
                		(finishRaceMarker.getLatLng()).lng(),provincesCombo.selectedItem.id,(selectedRunCheck.selected)?'t':'f');
            	}
            }
            
            private function onEditNewRace(event: ResultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onEditNewRace);
            	server.removeEventListener(FaultEvent.FAULT,onEditNewRaceFault);
				Alert.show("Carrera editada o añadida satisfactoriamente");
				init();
            }
            
            private function onEditNewRaceFault(event: FaultEvent):void {
            	server.removeEventListener(ResultEvent.RESULT,onEditNewRace);
            	server.removeEventListener(FaultEvent.FAULT,onEditNewRaceFault);
				trace(event.fault);
				Alert.show(event.fault.faultString);
				init();
            }
            
            private function cleanOverlay():void {
            	markersArray = new Array();
            	map.clearOverlays();
            }
            
            private function undo():void {
            	if (markersArray.length==1) {
            		markersArray.pop();
            		map.removeOverlay(startRaceMarker);
            	} else {
            		if (markersArray.length==2) {
            			markersArray.pop();
            			map.removeOverlay(finishRaceMarker);
            		}
            	}
            }
            
			
		]]>
	</mx:Script>	
		
		
	<mx:Canvas id="listRaces" left="0" right="0" height="292">		
		<mx:DataGrid id="raceList" y="54" left="20" right="20" height="203" horizontalScrollPolicy="auto" itemClick="editRace()" dataProvider="{arrayRaces}">
			<mx:columns>
                <mx:DataGridColumn dataField="id" headerText="ID"/>
                <mx:DataGridColumn dataField="name" headerText="Nombre carrera"/>
                <mx:DataGridColumn dataField="event_date" headerText="Fecha"/>
                <mx:DataGridColumn dataField="event_location" headerText="Lugar"/>
            </mx:columns>
		</mx:DataGrid>
		<mx:Label y="10" text="Editor de carreras" fontSize="20" left="20" right="20"/>
		<mx:HBox y="265" left="20" right="20" horizontalAlign="right" height="23">
			<mx:Button label="Crear nueva carrera" click="addNewRace()"/>
			<mx:Button label="Editar una carrera" click="editRace()"/>
			<mx:Button label="Eliminar una carrera" click="eraseRace()"/>
		</mx:HBox>
	</mx:Canvas>
	
	<mx:Canvas id="editRaces" left="0" right="0" top="300" bottom="0">
		<mx:HBox y="0" left="0" right="0" height="30" paddingLeft="10" paddingTop="4">
			<mx:Button label="Editar datos de carrera" click="(raceList.selectedItem)?editRace():racesTab.selectedIndex=1"/>
			<mx:Button label="Editar recorrido de carrera" click="racesTab.selectedIndex=2"/>
		</mx:HBox>
		<mx:ViewStack id="racesTab" left="0" right="0" bottom="0" top="30" selectedIndex="0" borderColor="gray" borderStyle="solid" creationPolicy="all">
			
			<mx:Canvas>
            </mx:Canvas>
			
			<mx:Canvas backgroundColor="#FFFFCC">
				<mx:Label x="10" y="10" text="ID" width="168" textAlign="right"/>
				<mx:Label x="10" y="93" text="Distancia texto" width="168" textAlign="right"/>
				<mx:Label x="449" y="93" text="Distancia (en metros)" width="140" textAlign="right"/>
				<mx:Label x="10" y="65" text="Nombre carrera" width="168" textAlign="right"/>
				<mx:Label x="10" y="38" text="Fecha" width="168" textAlign="right"/>
				<mx:Label x="10" y="121" text="Categoría" width="168" textAlign="right"/>
				<mx:Label x="10" y="149" text="Premios" width="168" textAlign="right"/>
				<mx:Label x="10" y="206" text="Precio" width="168" textAlign="right"/>
				<mx:Label x="10" y="234" text="Lugar inscripción" width="168" textAlign="right"/>
				<mx:Label x="10" y="286" text="Ciudad carrera" width="168" textAlign="right" />
				<mx:Label x="10" y="314" text="Inicio y final carrera" width="168" textAlign="right"/>
				<ns1:Map id="map" x="186" y="314" width="666" height="400" mapevent_mapready="onMapReady(event)" 
					key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRTy9E-TgLeuCHEEJunrcdV8Bjp5lBTu2Rw7F-koeV8TrxpLHZPXoYd2BA"/>
				<mx:Button x="260" y="325.5" label="Limpiar marcadores" click="cleanOverlay()" alpha="1"/>
				<mx:Label x="10" y="749" text="Email organización" width="168" textAlign="right"/>
				<mx:Label x="10" y="779" text="Descripción" width="168" textAlign="right"/>
				<mx:HBox top="10" right="40" horizontalAlign="right" height="30">
					<mx:Button label="Guardar cambios" click="(iden.text=='')?saveData():saveData(iden.text)"/>
				</mx:HBox>
				<mx:Label x="10" y="722" text="Website organización" width="168" textAlign="right"/>
				<mx:CheckBox x="291" y="8" label="¿Carrera destacada?" id="selectedRunCheck"/>
				<mx:TextInput x="186" y="8" width="78" enabled="false" id="iden"/>
				<mx:TextInput x="186" y="36" width="255" id="date"/>
				<mx:TextInput x="186" y="63" width="666" id="race_name"/>
				<mx:TextInput x="186" y="91" width="255" id="distance_text"/>
				<mx:TextInput x="597" y="91" width="255" id="distance_meters"/>
				<mx:TextInput x="186" y="119" width="255" id="category"/>
				<mx:TextInput x="186" y="147" width="666" height="49" id="awards"/>
				<mx:TextInput x="186" y="204" width="128" id="price"/>
				<mx:TextInput x="186" y="232" width="666" id="inscription_location"/>
				<mx:Label x="10" y="262" text="Provincia carrera" width="168" textAlign="right" />
				<mx:TextInput id="race_location" x="186" y="284" width="666" enter="searchLocation(race_location.text)"/>
				<mx:TextInput x="186" y="720" width="255" id="web"/>
				<mx:TextInput x="186" y="747" width="255" id="inscription_email"/>
				<mx:TextArea x="186" y="777" width="666" height="157" id="description"/>
				<mx:Button x="407" y="325.5" label="Deshacer último" alpha="1" click="undo()"/>
				<mx:ComboBox x="186" y="260" id="provincesCombo" dataProvider="{provincesArray}" labelField="name"></mx:ComboBox>
            </mx:Canvas>

            <mx:Canvas backgroundColor="#D7D7D7">
                <local:SetRaceLocation/>
            </mx:Canvas>
		</mx:ViewStack>
	</mx:Canvas>
		
	<mx:RemoteObject id="server" endpoint="../amfphp/gateway.php" source="RunnitServices" destination="RunnitServices">
		<mx:method name="getRunsList"/>
		<mx:method name="removeRun"/>
		<mx:method name="updateRun"/>
		<mx:method name="createNewRun"/>
		<mx:method name="login"/>
	</mx:RemoteObject>
	
</mx:Application>
