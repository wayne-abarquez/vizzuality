<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:maps="com.google.maps.*" xmlns:ns1="com.vizzuality.visualcomponents.*" creationComplete="onCreationComplete()">
<mx:Script>
	<![CDATA[
		import com.greensock.TweenLite;
		import com.vizzuality.tileoverlays.MarkersOverlay;
		import com.google.maps.overlays.Marker;
		import com.google.maps.LatLngBounds;
		import com.google.maps.controls.ZoomControl;
		import com.google.maps.interfaces.IPane;
		import com.google.maps.overlays.PolygonOptions;
		import com.vizzuality.mapsutils.Multipolygon;
		import com.adobe.serialization.json.JSON;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.http.mxml.HTTPService;
		import com.google.maps.MapMouseEvent;
		import com.google.maps.MapEvent;
		import com.google.maps.LatLng;
		import com.google.maps.MapType;
		import com.google.maps.MapAction;
		import com.google.maps.Color;
		import com.google.maps.Alpha;
		import com.google.maps.MapOptions;
		import com.google.maps.overlays.TileLayerOverlay;
		import com.vizzuality.tileoverlays.GeoserverTileLayer;
		
		private var jsonService:HTTPService;
		private var tilesPane:IPane;
		private var polygonsPane:IPane;
		private	var tl:GeoserverTileLayer;
		private	var tlo:TileLayerOverlay;	
		private var waitingForClicked:Boolean=false;
		private var mo:MarkersOverlay;
		private var domain:String;
		
		
		private function onCreationComplete():void {
			
			jsonService = new HTTPService();
			jsonService.method="get";
			jsonService.concurrency="last";
			jsonService.resultFormat="text";
			jsonService.addEventListener(ResultEvent.RESULT,onDataLoaded);
			jsonService.addEventListener(FaultEvent.FAULT,function(ev:FaultEvent):void{trace(ev.fault)});
			jsonService.showBusyCursor=true;
			
			var externalDomains:Array=["ppe.org.tiles.s3.amazonaws.com","174.129.214.28:8080","ppe.tinypla.net"];
			for each(var dom:String in externalDomains) {
			    Security.allowDomain(dom);
			    Security.loadPolicyFile("http://"+dom+"/crossdomain.xml");
			    var request:URLRequest = new URLRequest("http://"+dom+"/crossdomain.xml");
			    var loader:URLLoader = new URLLoader();
			    loader.addEventListener(IOErrorEvent.IO_ERROR,function(event:IOErrorEvent):void {
			    	trace("error");
			    });
			    loader.load(request);				
			}
		}
		
		private function onMapPreinit():void {
			var options:MapOptions = new MapOptions({
			  backgroundFillStyle: {
			    alpha: Alpha.OPAQUE,
			    color: Color.WHITE
			  },
			  controlByKeyboard: false,
			  overlayRaising: true,
			  doubleClickMode: MapAction.ACTION_PAN_ZOOM_IN,
			  dragging: true,
			  continuousZoom: false,
			  mapType: MapType.PHYSICAL_MAP_TYPE,
			  center: new LatLng(30, 0),
			  zoom: 2,
			  mouseClickRange: 2
			});		
			
			map.setInitOptions(options);
				
		}
		
		private function onMapReady():void {
			//initialize controls
			
			domain=root.loaderInfo.parameters.domain;
			if (domain==null) {
				domain = 'http://ppe.tinypla.net';
			}
			
			map.addControl(new ZoomControl());
			
			polygonsPane = map.getPaneManager().createPane();
			tilesPane = map.getPaneManager().createPane();
			tl = new GeoserverTileLayer(map);
			tlo = new TileLayerOverlay(tl);

			tl.addEventListener("GEOSERVER_TILE_LAYER_LOADED",function(ev:Event):void {
				discretLoading.visible=false;
			});
			tl.addEventListener("GEOSERVER_TILE_LAYER_LOADING",function(ev:Event):void {
				discretLoading.visible=true;
			});
			tilesPane.addOverlay(tlo);	
			tlo.foreground.alpha=1;
			
			
			//MarkersOverlay test
			var mg:Object = new Object();
			mg.anchor=new LatLng(30,0);
			mg.markers = [];
			var m1:Object =new Object();
			m1.title="marker 1";
			
			(mg.markers as Array).push(m1);
			
			
			mo= new MarkersOverlay();
			map.addOverlay(mo);
			
			//trace clicks
			map.addEventListener(MapMouseEvent.CLICK,function(ev:MapMouseEvent):void{
				TweenLite.delayedCall(0.1,onMapClick,[ev]);
			});
			map.addEventListener(MapMouseEvent.DOUBLE_CLICK,checkDoubleClick);
			
			
		}
		private var doubleclicked:Boolean=false;
		private function checkDoubleClick(ev:MapMouseEvent):void {
			doubleclicked=true;
			trace("doubleclick");
		}
				
		private function onMapClick(ev:MapMouseEvent):void {			
			trace("click");
			if(!doubleclicked) {
				
				if (!waitingForClicked) {
					polygonsPane.clear();
					jsonService.url=domain + "/api/sites_by_point/"+ev.latLng.lng()+"/"+ev.latLng.lat();
					jsonService.send();
					waitingForClicked=true;
					discretLoading.visible=true;
				}	
			} else {
				doubleclicked=false;				
			}
		}
		
		private function onDataLoaded(ev:ResultEvent):void{

			mo.clearOverlays();
			var dataJ:Object = data = JSON.decode(ev.result as String);
			if(!(dataJ is Array) || (dataJ as Array).length<1) {
				
				discretLoading.visible=false;
				waitingForClicked=false;
				return;
			}
			
			var extend:LatLngBounds;
			var markers:Array = [];
			for each(var o:Object in dataJ as Array) {
				
				var col:Number=Math.random() * 0xFFFFFF;
				var polOpt:PolygonOptions=new PolygonOptions({
				  strokeStyle: {
				    thickness: 2,
				    color: col,
				    alpha: 1
				  },
				  fillStyle: {
				    color: col,
				    alpha: 0.4
				  }	
				});				
				
				
				var mp:Multipolygon= new Multipolygon();
				mp.fromGeojsonMultiPolygon(o.geometry.coordinates,polOpt);				
				mp.addToPane(polygonsPane);
				
				var mark:Object = {
					latlng:new LatLng(o.centre[1],o.centre[0])
					
				};
				mark.image= o.image;
				mark.name=o.name;
				mark.designation=o.desig_eng;
				mark.id=o.id;
				mark.sites=0;
				markers.push(mark);
				
				
				//calculate bounds
				var bounds:LatLngBounds=new LatLngBounds(new LatLng(o.ymax,o.xmin),new LatLng(o.ymin,o.xmax));
				if (extend==null) {
					extend=bounds;
				} else {
					extend.union(bounds);
				}
				
			}
			TweenLite.delayedCall(0.6,delayedMarkersAddition,[markers]);

			
			
/* 			var extendZoom:Number = map.getBoundsZoomLevel(extend);
			if (extendZoom <= (map.getZoom()+1)) {
				map.setCenter(extend.getCenter(),extendZoom);				1
			} else {
				map.setCenter(extend.getCenter(),map.getZoom()+1);
			} */	
			
		}
		
		private function delayedMarkersAddition(markers:Array):void {
			discretLoading.visible=false;
			waitingForClicked=false;
			mo.addMarkerCluster(markers);
		}
		
	]]>
</mx:Script>	
	
	<maps:Map id="map" key="noKey" width="100%" height="100%" mapevent_mapready="onMapReady()" mapevent_mappreinitialize="onMapPreinit()" />
	<ns1:DiscretLoading id="discretLoading" left="10" top="10" />
	
<!--<mx:Style source="/skin/ui.css"/>
	<mx:Style source="/skin/fonts.css"/>-->
</mx:Application>
