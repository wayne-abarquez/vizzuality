<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  xmlns:components="com.vizzuality.utils.*" xmlns:view="com.vizzuality.view.*" 
	backgroundColor="#D5E8EC" 
	horizontalScrollPolicy="off"
	verticalScrollPolicy="auto"
	addedToStage="initSWFAddress()" 
	removedFromStage="destroySWFAddress()"
    currentStateChange="setSWFAddress()" xmlns:components1="com.vizzuality.view.components.*" xmlns:components2="org.vizzuality.components.*">
	<mx:states>
		<mx:State name="Help">
			<mx:SetProperty target="{help1}" name="visible" value="true"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
	    <![CDATA[
	    	import com.google.maps.LatLngBounds;
	    	import mx.controls.Alert;
	    	import com.vizzuality.events.OpenTaxonomicEvent;
	    	import com.vizzuality.events.CloseDownloadWindowEvent;
	    	import com.vizzuality.events.SliderThumbRelease;
	    	import com.vizzuality.events.SliderChangeEvent;
	    	import com.vizzuality.events.MyEventDispatcher;
	    	import mx.events.CollectionEvent;
	    	import mx.collections.ArrayCollection;
	    	import com.google.maps.MapZoomEvent;
	    	import com.google.maps.MapMoveEvent;
	    	import com.vizzuality.utils.Helper;
	    	import mx.core.Application;
	    	import com.google.maps.MapTypeOptions;
	    	import com.google.maps.MapOptions;
	    	import com.google.maps.interfaces.IMapType;
	    	import com.google.maps.overlays.TileLayerOverlay;
	    	import com.vizzuality.maps.RasterLayer;
	    	import com.vizzuality.utils.Resource;

	    	import swf.SWFAddressEvent;
	    	import swf.SWFAddress;
	    	import com.google.maps.LatLng;
	    	import com.google.maps.Map;
		    import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
		    import com.google.maps.controls.ZoomControl;
		    
		    //variables of GMBA-Map
	        private var rasterLayer:RasterLayer;
			[Bindable] private var zoom: Number = 2;
			[Bindable] private var bound: LatLngBounds;
	        private var lat: Number = 40.73;
	        private var lon: Number = -3.99;
	        
	        [Bindable] private var elevationValues: ArrayCollection = new ArrayCollection([0,7889]);
	        [Bindable] private var reliefValues: ArrayCollection = new ArrayCollection([0,3889]);
	        [Bindable] private var vegetationValues: ArrayCollection = new ArrayCollection();
            
            //variables of SWFAddress
            public var path:String = "Map";
            public var depth:int = 1;
            
			[Embed("threshold.pbj", mimeType="application/octet-stream")]
			private var TestFilter:Class;		
			private var shader:Shader; 
			private var filter:ShaderFilter; 
			private var tlo:TileLayerOverlay;        
                        	
			
            private function initSWFAddress():void {        	
                handleSWFAddress(new SWFAddressEvent(SWFAddressEvent.CHANGE));
                SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);
                MyEventDispatcher.addEventListener(SliderThumbRelease.SLIDER_VALUE_CHANGED, onChangeSliderValues);
                MyEventDispatcher.addEventListener(CloseDownloadWindowEvent.CLOSE_WINDOW, 
	                function (event:CloseDownloadWindowEvent):void { 
	                	mamufas.visible=false; download.visible = false; taxonomic.visible = false;
	                });       
            	MyEventDispatcher.addEventListener(OpenTaxonomicEvent.OPEN, 
	            	function (event:OpenTaxonomicEvent):void { 
	            		mamufas.visible=true; taxonomic.visible = true;
	            	});
            }
            
            private function onChangeSliderValues(event:SliderThumbRelease):void {
            	elevationValues = new ArrayCollection (event.altitudeRange);
            	reliefValues = new ArrayCollection(event.reliefRange);
            	vegetationValues = event.vegtypes;
            	makeNewURL();
            }
            
            private function destroySWFAddress():void {
                SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);
            }
            
            private function setSWFAddress():void {
	            Helper.setSWFAddress(this, path, depth);        		
            }
            
            private function handleSWFAddress(event:SWFAddressEvent):void {

                if (event.pathNames.length >= depth && event.pathNames[depth - 1] == path) {
                    Helper.handleSWFAddress(this, event, depth);
                 } else { 
                	var mapPoint:Object = new Object();
                	var elevationParams: Object = new Object();
                	var reliefParams: Object = new Object();
                	var vegetationParams: ArrayCollection = new ArrayCollection();
                	
                	if (event.pathNames.length>1) {
						mapPoint = Helper.getPoint(event.pathNames[1] as String);
	                    if (mapPoint.lat!=null) {
	                    	zoom = mapPoint.zoom;
	                    	lat = mapPoint.lat;
	                    	lon = mapPoint.lon;
	                    } else {
	                    	SWFAddress.setValue('/map');
	                    	return;
	                    }
	                    
	                    //GETTING ELEVATION RANGE
						if (event.pathNames.length>2) {
	                    	elevationParams = Helper.getSliderParams(event.pathNames[2] as String);
		                    if (elevationParams.min!=null) {
		                    	elevationValues = new ArrayCollection([Number(elevationParams.min),Number(elevationParams.max)]);
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	} 
	                    }
	                    
		    			//GETTING RELIEF RANGE
		    			if (event.pathNames.length>3) {
	                    	reliefParams = Helper.getSliderParams(event.pathNames[3] as String);
		                   	if (reliefParams.min!=null) {
		                    	reliefValues = new ArrayCollection([Number(reliefParams.min),Number(reliefParams.max)]);
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	}
	                    }

	                    //GETTING VEGETATION PARAMS
	                    if (event.pathNames.length>4) {
							vegetationParams = Helper.getVegetationParams(event.pathNames[4] as String);
		                   	if (vegetationParams.length!=0) {
		                   		vegetationValues = new ArrayCollection([false,false,false,false,false,false,false,false,false]);
		                   		for (var i:Number = 0; i< vegetationParams.length; i++) {
		                   			vegetationValues[Number(vegetationParams[i])] = true;
		                   		}
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	}	                    
	                    } else {
	                    	vegetationValues = new ArrayCollection([true,false,false,false,false,false,false,false,false]);
	                    }
                	}	
                }
            }
            
	        
		    
	        private function onMapPreinitialize(event:Event):void {
	           var opts:MapOptions = new MapOptions();
	           
	           /*var limitedZoomMapType:IMapType = new MapType(MapType.PHYSICAL_MAP_TYPE.getTileLayers(),
	                                                MapType.PHYSICAL_MAP_TYPE.getProjection(),
	                                                "TerrainLimited",
	                                                new MapTypeOptions({maxResolution: 6, minResolution: 2}));*/
	           
	           //Changes values thanks to URL params                                
	           opts.mapType = MapType.PHYSICAL_MAP_TYPE;
           	   opts.center=new LatLng(lat,lon);
	       	   opts.zoom=zoom;
	       	   
	       	   
	       	   
	           map.setInitOptions(opts);
	           map.addEventListener(MapMoveEvent.MOVE_END,onChangeMap);
	           map.addEventListener(MapZoomEvent.ZOOM_CHANGED,onZoomChange);           	
	        }

		    private function onMapReady(event:Event):void {
			    this.map.addControl(new ZoomControl());
			    
				//rasterLayer = new RasterLayer("http://vizzuality.tiles.s3.amazonaws.com/gmba_data_raster/|Z|_|X|_|Y|.png");
				rasterLayer = new RasterLayer("http://204.236.250.31:7001/env/z|Z|/|X|/|Y|.png");
				tlo = new TileLayerOverlay(rasterLayer);
				tlo.addEventListener(MapEvent.TILES_LOADED,function(ev:Event):void {
					loadingMessage.visible=false;
				})
				tlo.addEventListener(MapEvent.TILES_LOADED_PENDING,function(ev:Event):void {
					loadingMessage.visible=true;
				})
				map.addEventListener(MapMoveEvent.MOVE_START,function(event:MapMoveEvent):void {
					loadingMessage.visible=true;
					tlo.foreground.filters=[];
					tlo.foreground.alpha=0;
				});
				map.addEventListener(MapMoveEvent.MOVE_END,function(event:MapMoveEvent):void {
					tlo.foreground.filters=[filter];
					tlo.foreground.alpha=0.8;
					loadingMessage.visible=false;
				});
				map.addOverlay(tlo);
				
				//test adding a filter.
	            shader = new Shader(new TestFilter() as ByteArray);
				filter = new ShaderFilter(shader);
				shader.data.maxColor.value = [1.0,1.0,1.0];
				shader.data.minColor.value = [0.0,0.0,0.0];				
				
				//a.filters = [filter];
				tlo.foreground.cacheAsBitmap=true;
				tlo.foreground.filters=[filter];
				
				MyEventDispatcher.addEventListener(SliderChangeEvent.SLIDER_CHANGED,onSlidersChange,false,0,true); 
				
		    }
		    
		    private function onSlidersChange(event:SliderChangeEvent):void {
		    	
			   	var rMin:Number = event.altitudeRange[0]/7889;
	 			var rMax:Number = event.altitudeRange[1]/7889;
	 			var gMin:Number  = event.reliefRange[0]/3397; 
	 			var gMax:Number  = event.reliefRange[1]/3397; 
	 			var bMin:Number  = 0.0;
	 			var bMax:Number  = 1.0; 
	 			
				shader.data.maxColor.value = [rMax,gMax,bMax];
				shader.data.minColor.value = [rMin,gMin,bMin];
				tlo.foreground.filters = [filter];
		    	
		    }
		    
		    
		    private function onChangeMap(event:MapMoveEvent):void {
		    	lat = Number(event.latLng.lat().toFixed(2));
		    	lon = Number(event.latLng.lng().toFixed(2));
		    	bound = map.getLatLngBounds();
		    	makeNewURL();
		    }
		    
		    private function onZoomChange(event:MapZoomEvent):void {
		    	zoom = Number(event.zoomLevel);
		    	MyEventDispatcher.onChangeMapZoom(event.zoomLevel);
		    	makeNewURL();
		    }
		    
		    private function makeNewURL():void {
		    	var url: String = '/map/' + zoom + '_' + lat + '_' + lon + '/' + elevationValues[0] + '_' + elevationValues[1] + '/' + reliefValues[0] + '_' + reliefValues[1] + '/';
		    	var first:Boolean = true;
		    	for (var i:Number=0; i<vegetationValues.length;i++) {
		    		if (vegetationValues[i]) {
		    			if (first) {
		    				first = false;
		    				url+= i;
		    			} else {
		    				url+= '_' + i;
		    			}
		    		}
		    	}
		    	url+='/';
		    	SWFAddress.setValue(url);
		    }
	    ]]>
	</mx:Script>
	
	
	
	<mx:GlowFilter id="sh" alpha="0.3" color="#000000" blurX="20" blurY="20" />
	
	<mx:Canvas styleName="bkgBigCanvas" top="22" left="22" right="29" bottom="24" backgroundSize="100%" filters="{[sh]}"> 

		<mx:VBox verticalGap="0" height="100%" width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" x="2">
			<view:Toolbar width="22%" rangeAltitude="{elevationValues}" rangeRelief="{reliefValues}" vegetationValues="{vegetationValues}"/>
			<mx:Canvas backgroundColor="#121213" width="100%" height="100%">
				<mx:HRule top="0" left="0" right="0" strokeColor="#000000" strokeWidth="1"/>
				<mx:HRule top="1" left="0" right="0" strokeColor="#424243" strokeWidth="1" />
				<mx:Image source="{Resource.DOWN_ARROW}" width="16" height="9" top="0" left="21"/>
				<components:ShadowButton left="25" top="25" width="200"  height="32" label="Download data" color="#FFFFFF" fontSize="17" fontWeight="normal"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download" click="{download.setCriteriaValues(); mamufas.visible=true; download.visible=true; download.terms.selected = false; }"/>
			</mx:Canvas>
		</mx:VBox>
		
		<mx:Canvas backgroundColor="#FFFFFF" top="20" bottom="20" right="20" width="78%" id="canvas1">
			<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mappreinitialize="onMapPreinitialize(event)" mapevent_mapready="onMapReady(event)" key="no-key" top="5" bottom="5" right="5" left="5"/>
			<components1:Help backgroundColor="#000000" top="5" bottom="5" right="5" left="5" visible="false" id="help1"/>	
			<mx:Image source="{Resource.ARROW}"  width="24" height="46" left="-5" top="24"/>
			<mx:Canvas width="95" height="31" borderColor="#FFFFFF" backgroundColor="#FFFFFF" right="10" top="10" id="loadingMessage" visible="true">
				<mx:Label x="20" y="6" text="Loading..."/>
			</mx:Canvas>
		</mx:Canvas>
		
		<mx:Canvas alpha="0.7" backgroundColor="#000000" top="0" right="0" bottom="0" left="0" id="mamufas" visible="false" />
		<components1:TaxonomicBrowser visible="false" id="taxonomic"  horizontalCenter="0" verticalCenter="0" />
		<components1:Download visible="false" id="download" horizontalCenter="0" verticalCenter="0" elevationValues="{elevationValues}" reliefValues="{reliefValues}" vegetationValues="{vegetationValues}"
			zoom="{zoom}" bound="{bound}"/>
	</mx:Canvas>
</mx:Canvas>
