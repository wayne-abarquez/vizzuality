<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"  xmlns:view="com.vizzuality.view.*"
	layout="absolute"
	backgroundGradientAlphas="[1.0, 1.0]" 
	backgroundGradientColors="[#D5E8EC, #D5E8EC]"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
    minHeight="742"
    minWidth="980" xmlns:utils="com.vizzuality.utils.*"
    addedToStage="init()"
    preloader="com.vizzuality.view.preloader.Preloader"
     xmlns:ns1="com.vizzuality.view.components.taxonomicbrowser.*" xmlns:ns2="com.vizzuality.view.components.download.*">
    
    <mx:Style source="com/vizzuality/skin/style.css"/>
    	
	<mx:states>
		<mx:State name="TaxonomicBrowser">
			<mx:AddChild position="lastChild">
				<mx:Canvas alpha="0.7" backgroundColor="#000000" top="0" right="0" bottom="0" left="0">
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<ns1:TaxonomicBrowser horizontalCenter="0" verticalCenter="0">
				</ns1:TaxonomicBrowser>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Download">
			<mx:AddChild position="lastChild">
				<mx:Canvas alpha="0.7" backgroundColor="#000000" top="0" right="0" bottom="0" left="0" >
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<ns2:Download id="downloadBox" verticalCenter="0">
				</ns2:Download>
			</mx:AddChild>
		</mx:State>
	</mx:states>
    
    
	<mx:Script>
	    <![CDATA[
	    	import com.abdulqabiz.utils.QueryString;
	    	import com.google.maps.MapEvent;
	    	import mx.rpc.AsyncToken;
	    	import com.greensock.TweenLite;
	    	import com.adobe.serialization.json.JSON;
	    	import mx.rpc.events.ResultEvent;
	    	import com.google.analytics.GATracker;
	    	import com.google.analytics.AnalyticsTracker;
	    	import com.vizzuality.maps.BasicLayer;
	    	import com.google.maps.MapMouseEvent;
	    	import com.vizzuality.events.FilterChangedEvent;
	    	import com.vizzuality.events.MyEventDispatcher;
	    	import com.google.maps.overlays.TileLayerOverlay;
	    	import com.vizzuality.maps.RasterLayer;
	    	import com.asual.swfaddress.SWFAddress;
	    	import com.vizzuality.model.Taxon;
	    	import com.google.maps.MapZoomEvent;
	    	import com.google.maps.MapMoveEvent;
	    	import com.google.maps.LatLng;
	    	import com.google.maps.MapType;
	    	import com.google.maps.MapOptions;
	    	import com.vizzuality.utils.Resource;
	    	
	    	public var elevation:Array = [0,7889];
	    	public var relief:Array = [200,3397];
	    	public var vegetation:Array=[1,1,1,1,1,1,1,1];
	    	public var taxon:Taxon;
	    	
	    	private var initLat:Number;
	    	private var initLng:Number;
	    	private var initZoom:Number;
	    	
			[Embed("pixelbender/threshold2.pbj", mimeType="application/octet-stream")]
			private var RasterFilter:Class;		
	        private var rasterLayer:RasterLayer;
			private var rasterTileOverlay:TileLayerOverlay;     
			private var taxonRasterLayer:BasicLayer;	        	
			private var taxonRasterTileOverlay:TileLayerOverlay;   
			private var shader:Shader; 
			private var filter:ShaderFilter; 
			
			[Bindable] public var observations:Number=0;	
			[Bindable] public var specimens:Number=0;	
			[Bindable] public var providers:Number=0;	
			[Bindable] public var ocurrences:Number=0;
			[Bindable] public var currentTaxonName:String="All taxa";	
			
			[Bindable] private var taxonLayerLoaded:Boolean=false;
			[Bindable] private var envLayerLoaded:Boolean=false;
			
			private var appInitialized:Boolean=false;
			
			public var tracker:AnalyticsTracker;
			private var mapIsInitialized:Boolean=false;
	    	
	    	private function init():void {
	    		
	    		tracker = new GATracker( this, "UA-16019841-1", "AS3", false );
	    		//Check the URL to see if we need to initialize at specific state
	    		var qs:QueryString = new QueryString();
	    		var ta:Array = qs.url.split("#");
	    		var paths:Array;
	    		if(ta.length>1) {
	    			paths = (ta[1] as String).split("/");
	    			paths.shift();
	    		} else {
	    			paths=[];
	    		}
	    		
				if(paths.length!=5) {
					//Defalt values
					setDefaultParams();
				} else {
					var mapParams:Array=(paths[0] as String).split("_");
					var elevParams:Array=(paths[1] as String).split("_");
					var reliefParams:Array=(paths[2] as String).split("_");
					var vegetatationParams:Array=(paths[3] as String).split("_");
					var taxonParams:Array=(paths[4] as String).split("_");
					initLat=Number(mapParams[1]);
					initLng=Number(mapParams[2]);
					initZoom=Number(mapParams[0]);
					elevation=[Number(elevParams[0]), Number(elevParams[1])];
					relief=[Number(reliefParams[0]), Number(reliefParams[1])];
					vegetation=
						[Number(vegetatationParams[0]), 
						 Number(vegetatationParams[1]), 
						 Number(vegetatationParams[2]), 
						 Number(vegetatationParams[3]), 
						 Number(vegetatationParams[4]), 
						 Number(vegetatationParams[5]), 
						 Number(vegetatationParams[6]), 
						 Number(vegetatationParams[7])];
					if(taxonParams[0]=="All") {
						taxon=null;						
					} else {
						taxon=new Taxon();	
						taxon.name=	decodeURI(taxonParams[0]);
						taxon.id=	taxonParams[1];
						taxon.rank=	decodeURI(taxonParams[2]);
					}
				}
				toolBar.init();
				MyEventDispatcher.addEventListener(FilterChangedEvent.FILTER_CHANGED,onFilterChange);
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, Application.application.toolBar.fullScreenHandler);
				
	    	}
	    	
	    	private function setDefaultParams():void {
    			initLat=26.73;
				initLng=-12.66;
				initZoom=2;
	    	}
	    	
	        private function onMapPreinitialize(event:Event):void {
	           var opts:MapOptions = new MapOptions({mapType:MapType.PHYSICAL_MAP_TYPE,center:new LatLng(40.73,-3.99),zoom:3});
	           if(!isNaN(initLat)) {
	        		opts = new MapOptions({mapType:MapType.PHYSICAL_MAP_TYPE,center:new LatLng(initLat,initLng),zoom:initZoom});
	           }
	           map.setInitOptions(opts);
	           map.addEventListener(MapMoveEvent.MOVE_END,function(event:MapMoveEvent):void {
					MyEventDispatcher.dispatchEvent(new FilterChangedEvent(FilterChangedEvent.FILTER_CHANGED,FilterChangedEvent.MAP_CHANGE));	           
	           });
	           map.addEventListener(MapZoomEvent.ZOOM_CHANGED,function(event:MapZoomEvent):void {
	           		MyEventDispatcher.dispatchEvent(new FilterChangedEvent(FilterChangedEvent.FILTER_CHANGED,FilterChangedEvent.MAP_CHANGE));
	           });           	
	        }	    
	        
		    private function onMapReady(event:Event):void {
		    	
		    	//set the status of the map if there were params.
		    	
		    	
				//Taxon Layer
				taxonRasterLayer= new BasicLayer();
	    		if(taxon!=null) {
		    		taxonRasterLayer.rasterUrl="http://maps|N|.eol.org/php/map/getEolTile.php?tile=|X|_|Y|_|Z|_"+taxon.id;
	    		} else {
	    			taxonRasterLayer.rasterUrl="http://d3eawsq20ts9ys.cloudfront.net/gbif/z|Z|/|X|/|Y|.png";
	    		}				
				taxonRasterTileOverlay= new TileLayerOverlay(taxonRasterLayer);
				taxonRasterTileOverlay.addEventListener(MapEvent.TILES_LOADED,function(ev:MapEvent):void {
					taxonLayerLoaded=true;
					if(!appInitialized && envLayerLoaded) {
						appInitialized=true;
						//currentState='';
					}
				});
				taxonRasterTileOverlay.addEventListener(MapEvent.TILES_LOADED_PENDING,function(ev:MapEvent):void {taxonLayerLoaded=false;});
				
				map.addOverlay(taxonRasterTileOverlay);			    
		    	
		    	//Raster filter
		    	shader = new Shader(new RasterFilter() as ByteArray);
				filter = new ShaderFilter(shader);
		    	
				rasterLayer = new RasterLayer("http://d3eawsq20ts9ys.cloudfront.net/env/z|Z|/|X|/|Y|.png");
				rasterTileOverlay = new TileLayerOverlay(rasterLayer);
				rasterTileOverlay.foreground.filters=[filter];
				map.addEventListener(MapMoveEvent.MOVE_START,function(event:MapMoveEvent):void {
					rasterTileOverlay.visible=false;
					taxonRasterTileOverlay.visible=false;
					map.alpha=0.07;
				});
				map.addEventListener(MapMoveEvent.MOVE_END,function(event:MapMoveEvent):void {
					rasterTileOverlay.visible=true;
					taxonRasterTileOverlay.visible=true;
					map.alpha=1;
				});
				map.addOverlay(rasterTileOverlay);
				
				
				MyEventDispatcher.addEventListener(RasterLayer.ENV_TILES_LOADED_PENDING,function(ev:Event):void {envLayerLoaded=false;});
				MyEventDispatcher.addEventListener(RasterLayer.ENV_TILES_LOADED,function(ev:Event):void {
					envLayerLoaded=true;
					if(!appInitialized && taxonLayerLoaded) {
						appInitialized=true;
					}
				});
				
				//refresh the tiles
				getStats();
				mapIsInitialized=true;
				MyEventDispatcher.dispatchEvent(new FilterChangedEvent(FilterChangedEvent.FILTER_CHANGED,FilterChangedEvent.ALL_CHANGE,false));
		    }	        

		    private function onClickZoomIn():void {
		    	if(map.getZoom()<8) {
					map.setZoom(map.getZoom()+1);
		    	} 
			}
			
			private function onClickZoomOut():void {
				if(map.getZoom()>1){
					map.setZoom(map.getZoom()-1);
				}
				
			}	   
		    
		    private function createCurrentURL():String {
		    	if(!map.isLoaded()) {
		    		return SWFAddress.getPath();
		    	}
		    	//Vegetation types
		    	var vegUrl:String="";
		    	for (var i:Number=0; i<vegetation.length;i++) {
		    		(vegetation[i])?vegUrl+= '_1':vegUrl+= '_0';
		    	}
		    	vegUrl=vegUrl.slice(1);
		    	
		    	var url:String = '/' + map.getZoom() + 
		    		'_' + map.getCenter().lat().toFixed(2) + 
		    		'_' + map.getCenter().lng().toFixed(2)  + 
		    		'/' + elevation[0] + '_' + elevation[1] + 
		    		'/' + relief[0] + '_' + relief[1] + 
		    		'/'+ vegUrl;
		    	
		    	if(taxon!=null) {
					url+="/"+escape(taxon.name)+"_"+taxon.id+"_"+taxon.rank; 		
		    	} else {
		    		url+="/All";
		    	}
		    		
		    	return url;
		    }		      
		    
		    private function onClickDownload():void {
				currentState='Download';
				
				downloadBox.alpha = 0.0;
				downloadBox.setCriteriaValues(); 
				downloadBox.setPosition(map.width,map.height,toolBar.width); 
				downloadBox.visible=true;
				TweenLite.to(downloadBox,0.5,{alpha:1.0} ); 
				
		    }   	
		    
		    private function onFilterChange(event:FilterChangedEvent):void {
		    	if(event.mustChangeUrl) {
			    	SWFAddress.setValue(createCurrentURL());
			    	getStats();
		    	}
		    	
		    	if((event.changeType==FilterChangedEvent.ELEVATION_CHANGE ||
		    		event.changeType==FilterChangedEvent.RELIEF_CHANGE ||
		    		event.changeType==FilterChangedEvent.VEGETATION_CHANGE ||
		    		event.changeType==FilterChangedEvent.ALL_CHANGE
		    		)
					&& mapIsInitialized	    		
		    		
		    		) {
					   	var rMin:Number = elevation[0]/7889;
			 			var rMax:Number = elevation[1]/7889;
			 			var gMin:Number  = relief[0]/3397; 
			 			var gMax:Number  = relief[1]/3397; 
			 			
						shader.data.maxColor.value = [rMax,gMax];
						shader.data.minColor.value = [rMin,gMin];
						
		
						var tvz1:Number=0;
						if(vegetation[1]) tvz1=1;
						var tvz2:Number=0;
						if(vegetation[2]) tvz2=1;
						var tvz3:Number=0;
						if(vegetation[3]) tvz3=1;
						var tvz4:Number=0;
						if(vegetation[4]) tvz4=1;
						var tvz5:Number=0;
						if(vegetation[5]) tvz5=1;
						var tvz6:Number=0;
						if(vegetation[6]) tvz6=1;
						var tvz7:Number=0;
						if(vegetation[7]) tvz7=1;
						
		
						shader.data.tvz1.value = [tvz1];
						shader.data.tvz2.value = [tvz2];
						shader.data.tvz3.value = [tvz3];
						shader.data.tvz4.value = [tvz4];
						shader.data.tvz5.value = [tvz5];
						shader.data.tvz6.value = [tvz6];
						shader.data.tvz7.value = [tvz7];
						
						rasterTileOverlay.foreground.filters = [filter];			    			
		    	}
		    	if((event.changeType==FilterChangedEvent.TAXON_CHANGE 
		    	|| event.changeType==FilterChangedEvent.ALL_CHANGE) && mapIsInitialized) {
		    		if(taxon!=null) {
			    		taxonRasterLayer.rasterUrl="http://maps|N|.eol.org/php/map/getEolTile.php?tile=|X|_|Y|_|Z|_"+taxon.id;
			    		toolBar.taxonBox.taxonName=taxon.name;
			    		toolBar.taxonBox.currentState='SelectedTaxon';
			    		currentTaxonName=taxon.name;
		    		} else {
		    			taxonRasterLayer.rasterUrl="http://d3eawsq20ts9ys.cloudfront.net/gbif/z|Z|/|X|/|Y|.png";
			    		toolBar.taxonBox.taxonName="All taxa";
			    		toolBar.taxonBox.currentState='';
			    		currentTaxonName="All taxa";
		    		}
		    		taxonRasterTileOverlay.refresh();
		    	}
		    	
		    }    	
	    	
	    	private var lastCall:AsyncToken;
	    	private function getStats():void {
	    		loadingOcurrences.visible = true;
	    		
	    		var params:Object = {
				    minElevation:elevation[0],
					maxElevation:elevation[1],
					minRelief:relief[0],
					maxRelief:relief[1],
					tvzCode:getTvzArray(),
					minLongitude:map.getLatLngBounds().getWest(),
					maxLongitude:map.getLatLngBounds().getEast(),
					minLatitude:map.getLatLngBounds().getSouth(),
					maxLatitude:map.getLatLngBounds().getNorth()
				};
				if(taxon!=null) {
					params.taxonId=taxon.id;
				}
	    		lastCall = gmbaService.send(params);
	    	}
	    	
	    	
	    	private function onSearchResults(event:ResultEvent):void {
	    		var res:Object = JSON.decode(event.result as String);
				ocurrences = (res.total) as Number;
				
				if(event.token == lastCall) {
					loadingOcurrences.visible = false;
				}
	    	}
	    	
			private function getTvzArray():Array {
	    		if (vegetation[0]){ 
					return [1,2,3,4,5,6,7];
				}
				var tvzAr:Array =[];
				for (var n:uint = 1; n < vegetation.length; n++){
					if (vegetation[n]){
						tvzAr.push(n);
					}		
				}
				return tvzAr;
			}
            
	    ]]>
	</mx:Script>
	
	<mx:GlowFilter id="sh" alpha="0.3" color="#000000" blurX="20" blurY="20" />
	<mx:Canvas styleName="bkgBigCanvas"
		 height="96%"
		 backgroundSize="100%" filters="{[sh]}" verticalScrollPolicy="off" horizontalScrollPolicy="off" width="96%" horizontalCenter="0" verticalCenter="0" backgroundColor="#000000" id="canvas1"> 

		<mx:VBox verticalGap="0" height="100%" width="236" verticalScrollPolicy="off" horizontalScrollPolicy="off" x="2">
			
			<view:Toolbar id="toolBar" width="234" />
					
			<mx:Canvas backgroundColor="#121213" width="100%" height="100%">
				<mx:HRule top="0" left="0" right="0" strokeColor="#000000" strokeWidth="1"/>
				<mx:HRule left="0" strokeColor="#424243" strokeWidth="1" width="236"/>
				<mx:Image source="{Resource.DOWN_ARROW}" width="16" height="9" top="0" left="17"/>
				
				<mx:HBox top="2" right="22" id="hBoxOcurrences" width="193" horizontalAlign="right" horizontalGap="0" verticalAlign="middle" height="26">
					<mx:SWFLoader width="11" height="11" source="@Embed('/assets/loaderGray.swf')" id="loadingOcurrences" visible="false"/>
					<mx:Label id="ocurrencesLabel" styleName="ocurrences" text="{nf.format(ocurrences)}" horizontalCenter="right" textAlign="right" paddingTop="4"/>
					<mx:Label styleName="ocurrences" text="OCURRENCES" paddingTop="3"/>	
				</mx:HBox>
				

				<utils:ShadowButton left="21" top="25" width="191"  height="32" label="Download data" color="#FFFFFF" fontSize="17" fontWeight="normal"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download" click="onClickDownload()"/>
			</mx:Canvas>
		</mx:VBox>
		
		<mx:Canvas backgroundColor="#121213" right="0" left="236" top="636" height="100%">
				<mx:HRule top="0" width="100%" strokeColor="#000000" strokeWidth="1"/>
				<mx:HRule top="1" width="100%" left="0" strokeColor="#424243" strokeWidth="1" />
		</mx:Canvas>		
				
		
		<mx:Canvas backgroundColor="#FFFFFF" top="20" bottom="20" right="20" id="canvasMapContainer" left="236">
			<mx:Canvas top="5" bottom="5" right="5" left="5" backgroundColor="#000000">
				<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mappreinitialize="onMapPreinitialize(event)" mapevent_mapready="onMapReady(event)" 
					key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRQm56IXr6kiPUawQ1p8p5lUSJeJ_RSJxaBaPlq145Y86Pke48jFmxSuGA" width="100%" height="100%"/>
								
			</mx:Canvas>
			
			<mx:Button styleName="btnZoomIn" height="24" width="24" right="15" top="17"
				mouseChildren="false" buttonMode="true" useHandCursor="true" id="btnZoomIn" click="onClickZoomIn()"/>
				
			<mx:Button styleName="btnZoomOut" height="24" width="24" right="15" top="45"
				mouseChildren="false" buttonMode="true" useHandCursor="true" id="btnZoomOut" click="onClickZoomOut()"/>
					
			<mx:Image bottom="12" left="70" source="@Embed('/assets/logoMapVizz.png')"
				click="navigateToURL(new URLRequest('http://www.vizzuality.com'))" mouseChildren="false" useHandCursor="true" buttonMode="true"/>
			<mx:Image source="{Resource.ARROW}"  width="24" height="46" left="-5" top="24"/>
			<mx:Canvas width="81" height="84" styleName="bkgLoading" horizontalCenter="0" top="10" id="loadingMessage" visible="{(!taxonLayerLoaded || !envLayerLoaded)}" alpha="0.6">
				<mx:SWFLoader horizontalCenter="0" verticalCenter="0" width="30" height="30" source="@Embed('/assets/loaderGray.swf')"/>
			</mx:Canvas>
			
		</mx:Canvas>
		

		
	</mx:Canvas>
		<mx:HTTPService  id="gmbaService" url="http://79.125.117.227/service/count" method="GET" result="onSearchResults(event)" concurrency="multiple" resultFormat="text" fault="trace(event)" />
		<mx:NumberFormatter useThousandsSeparator="true" id="nf" />


	
</mx:Application>
