<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
  width="100%" height="100%" layout="absolute" xmlns:maps="com.google.maps.*" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]" xmlns:list="com.vizzuality.list.*">
	<mx:states>
		<mx:State name="Loading" enterState="onEnterLoading()" exitState="onExitLoading()">
			<mx:RemoveChild target="{hbox1}"/>
			<mx:AddChild position="lastChild">
				<mx:Canvas width="160" height="75" horizontalCenter="0" verticalCenter="0" backgroundColor="#000000" backgroundAlpha="0.6">
					<mx:ProgressBar x="10" y="28" label="LOADING" color="#FFFFFF" fontWeight="normal" fontStyle="normal" 
						fontFamily="DINOT-Medium" width="140" indeterminate="true" trackHeight="8"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:SetStyle target="{worldButton}" name="fontWeight" value="normal"/>
			<mx:SetStyle target="{countriesButton}" name="fontWeight" value="normal"/>
		</mx:State>
		<mx:State name="countries">
			<mx:AddChild position="lastChild">
				<list:ListContainer id="countryCanvas" top="26" bottom="36" />
			</mx:AddChild>
			<mx:SetProperty target="{countriesButton}" name="label" value="BACK TO MAP"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:AddChild relativeTo="{countryText}" position="before">
				<mx:Label text="COUNTRY LIST &gt;" color="#FFFFFF" fontSize="11" click="goToWorldOverview()" mouseChildren="false" useHandCursor="true" buttonMode="true"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="providers">
			<mx:AddChild position="lastChild">
				<list:ListProvidersContainer id="providersCanvas" top="26" bottom="36"/>
			</mx:AddChild>		
			<mx:SetProperty target="{providersButton}" name="label" value="BACK TO MAP"/>
		
		</mx:State>
<!--		<mx:State name="providerinfo">
			<mx:AddChild position="lastChild">
				<list:ProviderInfo id="providerInfo" horizontalCenter="0" height="160" width="270" verticalCenter="0"/>
			</mx:AddChild>
		</mx:State>-->
	</mx:states>
 
 	<mx:Style source="/com/vizzuality/style/skin/ui.css"/>
 	<mx:Style source="/com/vizzuality/style/skin/fonts.css"/>
 
	<mx:Script>
		<![CDATA[
			import com.google.maps.overlays.PolylineOptions;
			import mx.collections.Sort;
			import com.vizzuality.map.InfoWindowSprite;
			import mx.events.ResizeEvent;
			import mx.collections.ArrayCollection;
			import mx.effects.easing.Exponential;
			import mx.effects.easing.Bounce;
			import com.vizzuality.feature.Provider;
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.styles.StrokeStyle;
			import com.google.maps.styles.FillStyle;
			import com.vizzuality.map.SmartInfoWindow;
			import com.vizzuality.map.CustomIconSprite;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.PaneId;
			import com.google.maps.overlays.Marker;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.overlays.PolygonOptions;
			import com.vizzuality.feature.EncodedPolylineData
			import com.google.maps.overlays.Polygon;
			import com.vizzuality.feature.Country;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.google.maps.MapZoomEvent;
			import com.google.maps.MapType;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ControlPosition;
			import com.google.maps.Color;
			import com.google.maps.MapOptions;
			import com.google.maps.MapEvent;
			import mx.core.Application;
			
			[Bindable]
			public var selectedAttribute:String;
			public var countries:Dictionary = new Dictionary();
			public var countriesByName:Dictionary = new Dictionary();
			public var providers:Dictionary = new Dictionary();
			public var markers:Dictionary = new Dictionary();
			public var countriesArr:Array = new Array();
			[Bindable]
			public var countriesArrC:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var providersArrC:ArrayCollection = new ArrayCollection();
			public var defaultPolOpt:PolygonOptions;
			private var aSprite:Sprite;
			private var bSprite:Sprite;   
			
			public var socialData:Dictionary = new Dictionary();
			
			[Bindable] private var legend:Class;
			
			[Bindable] public var provider:Provider
			
			[Embed(source="/com/vizzuality/style/assets/legend_1.png")]
            [Bindable] public var legend1:Class;
			[Embed(source="/com/vizzuality/style/assets/legend_2.png")]
            [Bindable] public var legend2:Class;
			[Embed(source="/com/vizzuality/style/assets/legend_3.png")]
            [Bindable] public var legend3:Class;

			private var dp:ArrayCollection = new ArrayCollection(["OCCURRENCES","COUNTRIES","RESOURCES"])

			private function onMapPreInitialize(event:MapEvent):void {
				var options:MapOptions = new MapOptions({
				  backgroundFillStyle: {
				    alpha: 1,
				    color: Color.WHITE
				  },
				  controlByKeyboard: false,
				  overlayRaising: true,
				  dragging: true,
				  continuousZoom: false
				});	
				map.setInitOptions(options);
						
			}		
			

			
			private function onMapReady(event:Event):void {
				currentState="Loading";
			    map.setMapType(MapType.PHYSICAL_MAP_TYPE);
			    map.setCenter(new LatLng(35,0),2);
				var topLeft:ControlPosition = new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,10,35);
                var zoomControl:ZoomControl = new ZoomControl(new ZoomControlOptions({hasScrollTrack: false}));
                zoomControl.setControlPosition(topLeft);
                map.addControl(zoomControl);			    
			    
			    defaultPolOpt= new PolygonOptions({fillStyle:{alpha : 0.6}
				,strokeStyle:
					{
						thickness: 1,
						color:Color.GRAY4,
						alpha:0.7
				}});
				
				//map.addOverlay(new Marker(new LatLng(21.332963,-157.87077)));
			    //åmap.addEventListener(MapMouseEvent.
			    
			    //map.disableDragging();
			    //server.endpoint = this.parameters.data_server_endpoint;
			    server.endpoint = "http://67.202.26.58/gbifwidget/amfphp/gateway.php";
			    server.getAllCountries();
			    
			    
				socialData['Albania']='Facebook';
				socialData['Algeria']='Facebook';
				socialData['Argentina']='Facebook';
				socialData['Armenia']='Odnoklassniki';
				socialData['Australia']='Facebook';
				socialData['Austria']='Facebook';
				socialData['Azerbaijan']='Odnoklassniki';
				socialData['Bahamas']='Facebook';
				socialData['Bahrain']='Facebook';
				socialData['Bangladesh']='Facebook';
				socialData['Barbados']='Facebook';
				socialData['Belarus']='V Kontakte';
				socialData['Belgium']='Facebook';
				socialData['Bolivia']='Facebook';
				socialData['Bosnia and Herzegovina']='Facebook';
				socialData['Brazil']='Orkut';
				socialData['Brunei']='Facebook';
				socialData['Bulgaria']='Facebook';
				socialData['Cambodia']='Facebook';
				socialData['Cameroon']='Hi5';
				socialData['Canada']='Facebook';
				socialData['Chile']='Facebook';
				socialData['China']='QQ';
				socialData['Colombia']='Facebook';
				socialData['Costa Rica']='Hi5';
				socialData['Cote d\'Ivoire']='Facebook';
				socialData['Croatia']='Facebook';
				socialData['Cyprus']='Facebook';
				socialData['Czech Republic']='Lidé';
				socialData['Denmark']='Facebook';
				socialData['Dominican Republic']='Hi5';
				socialData['Ecuador']='Hi5';
				socialData['Egypt']='Facebook';
				socialData['El Salvador']='Hi5';
				socialData['Estonia']='Orkut';
				socialData['Finland']='Facebook';
				socialData['France']='Facebook';
				socialData['French Polynesia']='Facebook';
				socialData['Georgia']='Odnoklassniki';
				socialData['Germany']='Facebook';
				socialData['Ghana']='Facebook';
				socialData['Greece']='Facebook';
				socialData['Guadeloupe']='Skyrock';
				socialData['Guam']='MySpace';
				socialData['Guatemala']='Hi5';
				socialData['Honduras']='Hi5';
				socialData['Hong Kong']='Facebook';
				socialData['Hungary']='Iwiw';
				socialData['Iceland']='Facebook';
				socialData['India']='Orkut';
				socialData['Indonesia']='Facebook';
				socialData['Iran']='Facebook';
				socialData['Iraq']='Facebook';
				socialData['Ireland']='Facebook';
				socialData['Israel']='Facebook';
				socialData['Italy']='Facebook';
				socialData['Jamaica']='Facebook';
				socialData['Japan']='Mixi';
				socialData['Jordan']='Facebook';
				socialData['Kazakhstan']='V Kontakte';
				socialData['Kenya']='Facebook';
				socialData['Kuwait']='Facebook';
				socialData['Kyrgyzstan']='Odnoklassniki';
				socialData['Latvia']='One';
				socialData['Lebanon']='Facebook';
				socialData['Libyan Arab Jamahiriya']='Maktoob';
				socialData['Lithuania']='One';
				socialData['Luxembourg']='Facebook';
				socialData['Malaysia']='Facebook';
				socialData['Mexico']='Hi5';
				socialData['Morocco']='Facebook';
				socialData['Macao']='Facebook';
				socialData['Macedonia']='Facebook';
				socialData['Madagascar']='Facebook';
				socialData['Maldives']='Facebook';
				socialData['Malta']='Facebook';
				socialData['Martinique']='Skyrock';
				socialData['Mauritius']='Facebook';
				socialData['Moldova']='Odnoklassniki';
				socialData['Mongolia']='Hi5';
				socialData['Nepal']='Facebook';
				socialData['Netherlands']='Hyves';
				socialData['Netherlands Antilles']='Facebook';
				socialData['New Zealand']='Facebook';
				socialData['New Caledonia']='Facebook';
				socialData['Nicaragua']='Hi5';
				socialData['Nigeria']='Facebook';
				socialData['Norway']='Facebook';
				socialData['Oman']='Maktoob';
				socialData['Pakistan']='Facebook';
				socialData['Palestinian Territory']='Facebook';
				socialData['Panama']='Facebook';
				socialData['Paraguay']='Orkut';
				socialData['Peru']='Hi5';
				socialData['Philippines']='Friendster';
				socialData['Poland']='Nasza-klasa';
				socialData['Portugal']='Hi5';
				socialData['Purto Rico']='Facebook';
				socialData['Romania']='Hi5';
				socialData['Russia']='V Kontakte';
				socialData['Saudi Arabi']='Maktoob';
				socialData['Senegal']='Facebook';
				socialData['Serbia and Montenegro']='Facebook';
				socialData['Singapore']='Facebook';
				socialData['Slovakia']='Facebook';
				socialData['Slovenia']='Facebook';
				socialData['South Africa']='Facebook';
				socialData['South Korea']='Cyworld';
				socialData['Spain']='Facebook';
				socialData['Sri Lanka']='Facebook';
				socialData['Sudan']='Facebook';
				socialData['Sweden']='Facebook';
				socialData['Switzerland']='Facebook';
				socialData['Syrian Arab Republic']='Maktoob';
				socialData['Taiwan']='Wretch';
				socialData['Thailand']='Hi5';
				socialData['Trinidad and Tobago']='Facebook';
				socialData['Tunisia']='Facebook';
				socialData['Turkey']='Facebook';
				socialData['United Kingdom']='Facebook';
				socialData['Ukraine']='V Kontakte';
				socialData['United Arab Emirates']='Facebook';
				socialData['Uruguay']='Facebook';
				socialData['United States']='Facebook';
				socialData['Venezuela']='Facebook';
				socialData['Vietnam']='Zing';
				socialData['Yemen']='Maktoob';
			    
			    
			    
					
		    }			
		    
		
		private function onEnterLoading():void {
			if (bSprite==null) {
				aSprite = map.getChildAt(1) as Sprite;
				bSprite = aSprite.getChildAt(0) as Sprite;
			}
			bSprite.filters = [new ColorMatrixFilter([0.13238779460000002,1.0025112879999998,0.0490316186,0,-43.75271063919999,0.0749877946,1.230711288,0.0490316186,0,-78.25571063919999,0.0749877946,1.0025112879999998,0.15963161860000002,0,-56.89591063919999,0,0,0,1,0])];
		}	
		
		private function onExitLoading():void {
			bSprite.filters = null;
		}	
			

			
		public function chloropleth(objects:Array, field:String, numClasses:int, colorBegin:Color, colorEnd: Color): void
		{
			selectedAttribute=field;
			if(numClasses < 2) 
				return;
			
			var i : int ;
				
			var sobjects:Array = objects.sort(function(a:Country,b:Country):int {
				if(a.attributes[field] < b.attributes[field])
					return -1;
				else if (a.attributes[field] > b.attributes[field])
					return 1;
				else
					return 0;
			});
			
			var colors:Array = [];
			var incr: Number = (colorEnd.r - colorBegin.r) / (numClasses - 1);
			var incg: Number = (colorEnd.g - colorBegin.g) / (numClasses - 1);
			var incb: Number = (colorEnd.b - colorBegin.b) / (numClasses - 1);
			colors[0] = colorBegin;
			colors[numClasses - 1] = colorEnd;
			for(i = 1 ; i < numClasses - 1; i++)
			{
				colors[i] = new Color(0);
				colors[i].setRGB(Math.round(colors[i-1].r + incr),
					Math.round(colors[i-1].g + incg),
					Math.round(colors[i-1].b + incb));
					
			}
			group0.setStyle("backgroundColor",Color(colors[0]).rgb);
			group1.setStyle("backgroundColor",Color(colors[1]).rgb);
			group2.setStyle("backgroundColor",Color(colors[2]).rgb);
			group3.setStyle("backgroundColor",Color(colors[3]).rgb);
			group4.setStyle("backgroundColor",Color(colors[4]).rgb);
			group5.setStyle("backgroundColor",Color(colors[5]).rgb);
			
			var curClass : int = 0;
			
			label0.text = numberFormatter.format(sobjects[0].attributes[field]);
			label5.text = numberFormatter.format(sobjects[sobjects.length-1].attributes[field]);
			
			for(i  = 0; i < objects.length ; i++)
			{
				if(i > Math.round((curClass + 1) / numClasses * objects.length) - 1) {
					curClass++;
					if (curClass==1)
						label1.text =numberFormatter.format(sobjects[i+1].attributes[field]);
					if (curClass==2)
						label2.text =numberFormatter.format(sobjects[i+1].attributes[field]);						
					if (curClass==3)
						label3.text =numberFormatter.format(sobjects[i+1].attributes[field]);						
					if (curClass==4)
						label4.text =numberFormatter.format(sobjects[i+1].attributes[field]);											
				}
				
				var tooltip:String="<b>"+sobjects[i].name +"</b>\n";
				if (field=='socialNetwork') {
					tooltip+=numberFormatter.format(sobjects[i].attributes[field]) + "\noccurrence records\nhosted";
				}
				
				
				var polOp:PolygonOptions = new PolygonOptions({
					fillStyle: {color : Color(colors[curClass]).rgb, alpha:0.4},
					strokeStyle: {alpha:1,thickness: 1,color:Color.GRAY4},
					tooltip:tooltip
					});
				sobjects[i].shape.setOptions(polOp);
				(sobjects[i] as Country).polOpt = polOp;
				
				
			}
			
			//legendBox.visible=true;
			typeLabel.text= field.toUpperCase();
		}			
			
		public var colors:Dictionary =new Dictionary();	
		public function getColorByValue(value:String):Number {
			if(colors[value]==null)
				colors[value]=	Math.random() * 0xFFFFFF;				
			

			return colors[value];
		}				
			
			
 			private function onGetCountriesResult(event:ResultEvent):void {
				var res:Array = event.result as Array;
				
				for each(var c:Object in res) {
					
					var attributes:Object=new Object();
					if (socialData[c.name]!=null) {
						attributes.socialNetwork=socialData[c.name];
						attributes.color=getColorByValue(attributes.socialNetwork);
						var epolis:Array = new Array();
						
						var encoded_levels:Array = (c.encoded_levels as String).slice(1,c.encoded_levels.length-1).split(",");
						var encoded_num_levels:Array = (c.encoded_num_levels as String).slice(1,c.encoded_num_levels.length-1).split(",");
						var encoded_points:Array = (c.encoded_points as String).slice(1,c.encoded_points.length-1).replace(/\u0022+/g,'').split(",");
						var encoded_zoom_factor:Array = (c.encoded_zoom_factor as String).slice(1,c.encoded_zoom_factor.length-1).split(",");
						var polygonsArr:Array=new Array();
						
						for (var i:int=0;i<encoded_points.length;i++) {
							epolis.push(new EncodedPolylineData(encoded_points[i],encoded_zoom_factor[i],encoded_levels[i],encoded_num_levels[i]));
						} 					
						
	/* 					attributes.occurrences=c.num_occurrences;
						attributes.providers=c.num_providers;
						attributes.resources=c.num_resources; */
						
	 					attributes.occurrences= Math.round((Math.random()*100));
	 					
	 					
	 					
						var sw:LatLng = new LatLng(c.south,c.west);
						var ne:LatLng = new LatLng(c.north,c.east);
						
						var bbox:LatLngBounds=new LatLngBounds(sw,ne);
						

						var polOp:PolygonOptions = new PolygonOptions({
							fillStyle: {color : attributes.color, alpha:0.6},
							strokeStyle: {alpha:1,thickness: 1,color:Color.GRAY4},
							tooltip:'<b>'+c.name+'</b>\n'+attributes.socialNetwork
							});			
			
						
						var pol:Polygon = Polygon.fromEncoded(epolis,polOp);
						pol.addEventListener(MapMouseEvent.ROLL_OVER,onCountryRollOver);
						pol.addEventListener(MapMouseEvent.ROLL_OUT,onCountryRollOut);
						//pol.addEventListener(MapMouseEvent.CLICK,onCountryClicked);
						
						
						var country:Country = new Country(c.iso2,attributes,pol,defaultPolOpt,bbox,c.name);
						countries[pol]=country;
						countriesByName[country.name]=pol;
						countriesArr.push(country);
						map.addOverlay(pol);	
						
					}
					
					
															
																			
				}
				
				//chloropleth(countriesArr,"socialNetwork",6,new Color(Color.YELLOW),new Color(Color.GREEN));	
				
				
				//legend = legend1;
				currentState='';
				countriesArr.sortOn("name");
				
			} 
			
			public function onCountryRollOver(event:MapMouseEvent):void {
				(event.target as Polygon).setOptions(new PolygonOptions({fillStyle:{alpha : 0.9},strokeStyle:{color:Color.WHITE,thickness: 2}}));
				map.buttonMode=true;
			}
			
			public function onCountryRollOverByName(countryName:String):void {
				(countriesByName[countryName] as Polygon).setOptions(new PolygonOptions({fillStyle:{alpha : 0.9},strokeStyle:{color:Color.WHITE,thickness: 2}}));
			}
			
			private function onCountryRollOut(event:MapMouseEvent):void {
				(event.target as Polygon).setOptions((countries[event.target] as Country).polOpt);
				map.buttonMode=false;
			}
			public function onCountryRollOutByName(countryName:String):void {
				(countriesByName[countryName] as Polygon).setOptions((countries[countriesByName[countryName]] as Country).polOpt);

			}
			
			private function onCountryClicked(event:MapMouseEvent):void {
				var c:Country = countries[event.target] as Country;
				var z:Number = map.getBoundsZoomLevel(c.bbox);				
				map.setCenter(c.bbox.getCenter(),z);
				
				tipImage.visible = false;
				tipText.visible = false;
				countryText.label = c.name.toUpperCase() + " [" + numberFormatter.format(c.attributes['providers']) +" DATA ACCESS POINTS]";
				countryText.visible=true;
				worldButton.selected = false;
				countryText.selected = true;
				
				
				server.getProvidersByCountry(c.isocode);
				map.getPaneManager().getPaneById(PaneId.PANE_MARKER).clear();
				currentState="Loading";
			}
			
			private function onGetCountriesFault(event:FaultEvent):void {
				trace(event.message);
			}
			private function onGetProvidersByCountryResult(event:ResultEvent):void {
				var arr:Array = event.result as Array;
				providersArrC = new ArrayCollection();	
				for each(var p:Object in arr) {
					var options:MarkerOptions = new MarkerOptions({
							icon: new CustomIconSprite(),
							tooltip: p.provider_name + "("+ p.provider_city +")",
							iconAlignment: MarkerOptions.ALIGN_BOTTOM,
							iconOffset: new Point(-11,0)
							});
					var m:Marker= new Marker(new LatLng(p.lat,p.lon),options);
					var provider:Provider = new Provider(p.provider_id,m,p.resource_count,p.occurrence_count,p.iso_country_code,p.provider_name,p.providr_url,p.provider_city);
					markers[m]=provider;
					m.addEventListener(MapMouseEvent.CLICK,onMarkerClick);
					map.addOverlay(m);
					
					providers[m]=provider;			
					providersArrC.addItem(provider);	
					
				}
				currentState="";
				countriesButton.visible=false;
				providersButton.visible=true;
			}
			
			private function onMarkerClick(event:MapMouseEvent):void {			       
			    
			    provider = markers[event.currentTarget];
//				currentState='providerinfo';

			    var providerInfoWindow:InfoWindowSprite=new InfoWindowSprite(provider);

			      
 				var infowindow:SmartInfoWindow = new SmartInfoWindow();
				infowindow.position = infowindow.getBestAlignment(map, event.latLng, new Point(providerInfoWindow.width, providerInfoWindow.height));
				infowindow.padding = 3;
				infowindow.cornerRadius = 3;
				infowindow.fillStyle = new FillStyle({color:0x000000, alpha:0.8});
				infowindow.strokeStyle =  
				    new StrokeStyle({color:0x000000, alpha:1, thickness:1, pixelHinting:true});
				
				infowindow.setContent(providerInfoWindow);
				infowindow.render();
				  
				var options:InfoWindowOptions = new InfoWindowOptions();
				options.customContent = infowindow;
				options.customOffset = infowindow.anchorPoint;
				options.hasShadow = false;
				options.drawDefaultFrame = false;
				options.hasCloseButton = true;
				options.customCloseRect = infowindow.closeButtonRect;
				options.pointOffset = new Point(0, 0);
				  
				map.openInfoWindow(event.latLng, options);	 			
				
			}
			
			private function onGetProvidersByCountryFault(event:FaultEvent):void {
				
			}
			
			private function goToWorldOverview():void {
				map.getPaneManager().getPaneById(PaneId.PANE_MARKER).clear();
				countryText.visible=false;
				//stats_text.visible=false;
				map.setCenter(new LatLng(35,0),1);
				
				countriesButton.visible=true;
				providersButton.visible=false;
				worldButton.selected = true;
				tipImage.visible = true;
				tipText.visible = true;
				currentState = '';
				
			}
			public function toggleFullScreen():void{
	            try {
	                switch (Application.application.stage.displayState) {
	                    case StageDisplayState.FULL_SCREEN:
	                        Application.application.stage.displayState = StageDisplayState.NORMAL;
	                        map.setZoom(map.getZoom()-2);                       
	                        break;
	                    default:
	                        Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;	 
	                        map.setZoom(map.getZoom()+2);                       
	                        break;
	                }
	            } catch (err:SecurityError) {
	                // ignore
	                trace(err.message);
	            }
			} 
			
			private function changeComboType(e:Event):void{
				switch(comboType.selectedLabel){
					case "OCCURENCES":chloropleth(countriesArr,'occurrences',6,new Color(Color.YELLOW),new Color(Color.GREEN));
									  legend = legend1;
									  break;
					case "RESOURCES": chloropleth(countriesArr,'resources',6,new Color(Color.MAGENTA),new Color(Color.RED));
									  legend = legend3;
									  break;
					case "PROVIDERS": chloropleth(countriesArr,'providers',6,new Color(Color.YELLOW),new Color(Color.RED));
									  legend = legend2;
									  break;									  									  
				}
			}  
			
		]]>
	</mx:Script>
  	<mx:NumberFormatter id="numberFormatter" useThousandsSeparator="true" thousandsSeparatorFrom="," />
  	<mx:RemoteObject id="server" endpoint="http://67.202.26.58/gbifwidget/amfphp/gateway.php" source="GBIFMetadataServices" destination="GBIFMetadataServices">
  		<mx:method name="getAllCountries" result="onGetCountriesResult(event)" fault="onGetCountriesFault(event)" />
  		<mx:method name="getProvidersByCountry" result="onGetProvidersByCountryResult(event)" fault="onGetProvidersByCountryFault(event)" />
  	</mx:RemoteObject>
  

	<maps:Map top="0" left="0" id="map" mapevent_mappreinitialize="onMapPreInitialize(event)" mapevent_mapready="onMapReady(event)" resize="map.invalidateDisplayList()" 
		key="ABQIAAAA8WiVnvDbbHhJBKZ12cLTLBT6VWwCFN8et7Qz9xcAdQ8dcWf3jxTXfxwWdFXO4FBbpyYYa3sEb1krXQ" width="100%" bottom="36"/>
	<mx:HBox id="legendBox" visible="false" includeInLayout="false" horizontalGap="0" right="0" left="0" top="28">
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="89" id="type"  alpha="0.7" backgroundColor="#DEDEDE"><mx:Label id="typeLabel" top="0" alpha="0.7" text="OCCURRENCES"  horizontalCenter="0"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group0"  alpha="0.7"><mx:Label id="label0" top="0" alpha="0.7" text="0"  horizontalCenter="0"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group1"  alpha="0.7"><mx:Label  id="label1" top="0" text="1"  horizontalCenter="0" color="#000000"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group2"  alpha="0.7"><mx:Label top="0" text="2" id="label2" horizontalCenter="0" color="#000000"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group3"  alpha="0.7"><mx:Label top="0" text="3" id="label3"  horizontalCenter="0" color="#000000"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group4"  alpha="0.7"><mx:Label top="0" text="4" id="label4" horizontalCenter="0" color="#000000"/>
		</mx:Canvas>
		<mx:Canvas verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" id="group5"  alpha="0.7"><mx:Label top="0" text="5"  id="label5" horizontalCenter="0" color="#000000"/>
		</mx:Canvas>
	</mx:HBox>
  
  	<mx:Canvas height="26" top="0" left="0" right="0" backgroundColor="#000000" backgroundAlpha="0.79" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="canvas1">
  		<mx:Button label="COUNTRY" selected="true" styleName="BreadCrumbButton" fontWeight="normal"
  			id="countryText" visible="false" x="{worldButton.x + worldButton.width - 12}" y="1"/>
  		<mx:Button label="WORLD OVERVIEW" selected="true" styleName="BreadCrumbButton" click="goToWorldOverview()" mouseChildren="false" 
  			useHandCursor="true" buttonMode="true" x="1" y="1" id="worldButton" fontWeight="normal"/>
  		<mx:Label id="tipText" y="5" text="VIEW FULL SCREEN!" fontFamily="DINOT-Medium" fontSize="10" color="#FFFFFF" right="23" click="toggleFullScreen()" buttonMode="true" useHandCursor="true" mouseChildren="false"/>
  		<mx:Image id="tipImage" y="7" source="@Embed('/com/vizzuality/style/assets/advertIcon.png')" right="7" click="toggleFullScreen()" buttonMode="true" useHandCursor="true" mouseChildren="false"/>
  	</mx:Canvas>
  	<mx:Canvas height="36" bottom="0" right="0" left="0" backgroundColor="#8B8B8B" styleName="greyCanvas" backgroundSize="100%">
  	  	<mx:Button visible="true" id="countriesButton" label="VIEW COUNTRIES" left="5" verticalCenter="0" click="currentState=(currentState=='countries')?'':'countries'" 
  	  		buttonMode="true" mouseChildren="false" useHandCursor="true" styleName="greyButton" height="27" fontWeight="normal"/>
  	  	<mx:Button visible="false" id="providersButton" label="VIEW PROVIDERS" left="5" verticalCenter="0" click="currentState=(currentState=='providers')?'':'providers'" 
  	  		buttonMode="true" mouseChildren="false" useHandCursor="true" styleName="greyButton" height="27" fontWeight="normal"/>
	
	 	<mx:HBox right="4" id="hbox1" verticalCenter="1" verticalAlign="middle" horizontalGap="1">
		  	<mx:ComboBox id="comboType" x="156" dataProvider="['OCCURRENCES','PROVIDERS','RESOURCES']"  height="22" verticalCenter="0" change="changeComboType(event)"/>
		  	<mx:Image source="@Embed('/com/vizzuality/style/assets/separator1.png')"/>
		  	<mx:Image id="legendImg" source="{legend}"/>
		  		
	  	  	 <!--<mx:Button label="Occ" enabled="{selectedAttribute!='occurrences'}" click="chloropleth(countriesArr,'occurrences',6,new Color(Color.YELLOW),new Color(Color.GREEN));" width="38" height="17" fontSize="6"/>
	  	  	<mx:Button label="Pro" enabled="{selectedAttribute!='providers'}" click="chloropleth(countriesArr,'providers',6,new Color(Color.YELLOW),new Color(Color.RED));" width="38" height="17" fontSize="6"/>
	  	  	<mx:Button label="Res" enabled="{selectedAttribute!='resources'}" click="chloropleth(countriesArr,'resources',6,new Color(Color.MAGENTA),new Color(Color.RED));" width="38" height="17" fontSize="6"/>-->
	  	</mx:HBox>
  	</mx:Canvas>
  
  <mx:transitions>
  	<mx:Transition fromState="" toState="countries">
  		<mx:Sequence target="{countryCanvas}">
	  		<mx:WipeDown moveEasingFunction="{Exponential.easeOut}" duration="500" />	  		
  		</mx:Sequence>
  	</mx:Transition>
  	<mx:Transition fromState="" toState="providers">
  		<mx:Sequence target="{providersCanvas}">
	  		<mx:WipeDown moveEasingFunction="{Exponential.easeOut}" duration="500" />	  		
  		</mx:Sequence>
  	</mx:Transition>
  </mx:transitions>
  
</mx:Application>