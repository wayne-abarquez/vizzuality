<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="511" height="234"
	creationComplete="init()" xmlns:components="com.vizzuality.components.*" currentState="authChecking">
 
	<mx:Style source="com/vizzuality/skin/style.css"/>
	
	<mx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.adobe.serialization.json.JSON;
			import com.adobe.webapis.flickr.AuthResult;
			import com.greensock.easing.Expo;
			import mx.controls.Alert;
			import com.vizzuality.events.ClickPhotoFrameEvent;
			import com.vizzuality.components.PhotoFrame;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.net.URLRequest;
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.core.Application;
			import com.adobe.webapis.flickr.Photo;
			import com.adobe.webapis.flickr.methodgroups.Photos;
			import com.adobe.webapis.flickr.PagedPhotoList;
			import com.adobe.webapis.flickr.AuthPerm;
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			
			[Bindable] private var flickrSets:ArrayCollection;
			
			private var timer:Timer;
			
		//	private var timeline:TimelineLite = new TimelineLite();
			
			private var tamCanvas:Number = 82;
			private var paddingCanvas:Number = 8;
			
			// Flickr
			private var flickrService : FlickrService = new FlickrService("5588b10ffe3d588600e76db38e9cd55e");
			private var flickrFrob:String;
			private var selectedPhotos:Dictionary = new Dictionary();
			private var userAllPhotos:ArrayCollection;
			
			public var site_id:Number;
			public var user_id:Number;
			public var user_flickr_id:String;
			public var pa_bbox:String;
			public var user_token:String;
			
			private var actualPage:int = 1;
			private var maxPages:int = 1;
			
			// Method onCreationComplete	
			private function init():void{
				//init params
				pa_bbox="-180,-90,180,90";
				site_id=975;
				user_id=2;
				user_token="72157623534482544-87a16c7e2e06a192";
				user_flickr_id="30720887@N03";

				// API KEY from Flickr
		        flickrService.secret = "e8345cb79db113f7";				
				
				checkUserToken();
			}
			
			private function checkUserToken():void {
				//if the token exist (sent as param) check if it is valid
				if(user_token!=null) {
					//check if the token is valid
					
					/* flickrService.addEventListener(FlickrResultEvent.AUTH_CHECK_TOKEN,onCheckToken);
					flickrService.auth.checkToken(user_token); */
					
					checkUserPicturesInBbox();
					
					
				} else {
					currentState="authorization";
				}
				
				//if it does not exist send the user to the authentication screen
			}
			
			private function onCheckToken(event:FlickrResultEvent):void {
				flickrService.removeEventListener(FlickrResultEvent.AUTH_CHECK_TOKEN,onCheckToken);
				if(event.success) {
					checkUserPicturesInBbox();
				} else {
					currentState="authorization";
				}
			}
			
			// Begin de authentication process
			private function getAuthUrl():void {
				currentState="authChecking";
				flickrService.addEventListener (FlickrResultEvent.AUTH_GET_FROB, onGetFrob);				
 				// Starts the Flickr login process
				flickrService.auth.getFrob();
			 } 		
			
			// Authentication process
			private function onGetFrob (event : FlickrResultEvent) : void
			{
				// The user wants to connect to our Flickr Application
			    if (event.success) {
			        flickrFrob = event.data.frob as String;
			        var authURL : String = flickrService.getLoginURL(flickrFrob, AuthPerm.WRITE);
			
					navigateToURL (new URLRequest (authURL), "_blank");
					flickrService.addEventListener(FlickrResultEvent.AUTH_GET_TOKEN, onGetToken);
						
					// Waiting the Token
					// TODO PONERLE FIN, en el caso de que no acepten la autorizaciÃ³n				
					timer = new Timer(2000,0);
					timer.addEventListener(TimerEvent.TIMER,onGetAuthorization);
					timer.start();
			    } else {
			    	currentState="error";
			    }
			}  
			
			// Listening for the Token
			private function onGetAuthorization (event:TimerEvent):void {				
				flickrService.auth.getToken(flickrFrob);
			}

			private function onGetToken (event:FlickrResultEvent):void{
				
					
					// Check and see if token was returned
			        if(event.success)
			        {
			        	var authRes:AuthResult = event.data.auth as AuthResult;
			        	
			        	user_flickr_id = authRes.user.nsid;
						timer.stop();
						timer.removeEventListener(TimerEvent.TIMER,onGetAuthorization);
						flickrService.removeEventListener(FlickrResultEvent.AUTH_GET_TOKEN, onGetToken);
						timer = null;
				        flickrService.token = authRes.token;
				        flickrService.permission = AuthPerm.WRITE;
			        	user_token=flickrService.token;				        
				        checkUserPicturesInBbox();
				        
				        //send ProtectedPlanet the user credentials.
				        ppApiService.url="http://www.protectedplanet.net/api/users/" + user_id + "/flickr/credentials";
				        ppApiService.send({
				        		flickr_token:user_token,
				        		flickr_user_id:user_flickr_id
				        }); 
				        				        
				        
			        }
			}			
			
			private var numCallsForFlickr:Number=0;
			private var picturesToBeSent:Array;
			private function sendSelectedPhotos():void{
				 currentState="loading";
				 picturesToBeSent=[];
				 var tim:uint=0;
				 flickrService.addEventListener(FlickrResultEvent.PHOTOS_ADD_TAGS,onAddTagComplete);
				 for (var ph:Object in selectedPhotos){
				 	var photo:Photo = ph as Photo;
				 	if (selectedPhotos[photo]) {
						picturesToBeSent.push(photo);
						 //attach tags to the pictures
						TweenMax.delayedCall(tim,flickrService.photos.addTags,[photo.id,'"protectedarea:siteid='+site_id+'"']);
						numCallsForFlickr++;
				 	}
				 	
				 	tim=tim+100;
				 }				 
				 
			}

			private function onAddTagComplete(event:FlickrResultEvent):void {
				numCallsForFlickr--;
				if(numCallsForFlickr==0) {
					//finished tagging
					flickrService.removeEventListener(FlickrResultEvent.PHOTOS_ADD_TAGS,onAddTagComplete);
										
					//Call the PPE service
					var jsonMessage:String=JSON.encode(picturesToBeSent);
					ppApiService.url="http://www.protectedplanet.net/api/users/"+user_id+"/flickr/images";
					ppApiService.send({
						site_id:site_id,
						pictures: jsonMessage
					});					
					
				}
				
			}

			
			private function onPhotoClicked ( event : ClickPhotoFrameEvent ):void{

				selectedPhotos[event.flickrPhoto] = event.selected;
				
			}
			

			
			private function checkUserPicturesInBbox():void{
				addEventListener(ClickPhotoFrameEvent.PHOTOFRAME_CLICKED,onPhotoClicked,false,0,true);
						
				flickrService.addEventListener(FlickrResultEvent.PHOTOS_SEARCH, onResultSearchFlickr);
				flickrService.photos.searchAllPhotos(user_flickr_id,"date-posted-desc",pa_bbox);
			}

			private function onResultSearchFlickr( event:FlickrResultEvent ):void {
			 	 
				 userAllPhotos = new ArrayCollection(event.data.photos.photos);
				  
				if (userAllPhotos.length > 0){
			    	navigateToGeolocatedPhotos();
				}
				else{
		         	removeEventListener(FlickrResultEvent.PHOTOS_SEARCH, onResultSearchFlickr);
		        	navigateToOtherPhotos();
		         }
			 }
			
			 //////////////////////////////// PHOTOS GEOLOCATED
			 private function navigateToGeolocatedPhotos():void{
			 	
			 	currentState = 'navigationPhotosGeolocated';	
			 	// Initialize the photos's array
			 	actualPage = 1;
			 	
			 	maxPages = (userAllPhotos.length % 4 == 0) ? (userAllPhotos.length/4):((userAllPhotos.length/4)+1) 
			    buttonNextPhotos.visible = (userAllPhotos.length > 4) ? true:false;
			 	drawPhotos (userAllPhotos);
			 	
			 }
			 

			//////////////////////////////// ALL PHOTOS
			 // Init the another state
			 private function navigateToOtherPhotos():void {
			 	
			 	// Initialize the photos's array
			 	actualPage = 1;
			 	if (userAllPhotos != null) userAllPhotos.removeAll();
			 	
				flickrService.addEventListener(FlickrResultEvent.PHOTOSETS_GET_LIST,onResultGetSetsList);
				
				flickrService.photosets.getList(user_flickr_id);		
				currentState = 'navigationOtherPhotos';	
			 }
			 
			 // Update the ArrayCollection  
			 private function onResultGetSetsList(event:FlickrResultEvent):void {
			 	
			 	flickrSets = new ArrayCollection (event.data.photoSets);
			 	
			    var sort:Sort = new Sort();
			    // Sort by Title
			    sort.fields = [new SortField("title", false)];
			    flickrSets.sort = sort;
			    flickrSets.refresh();
			 	
                flickrService.addEventListener(FlickrResultEvent.PHOTOSETS_GET_PHOTOS,onResultGetPhotosBySet);
                
                
			 	// Busco por el primer valor del combo
			 	canvasPhotos.removeAllChildren();
			 	buttonPrevPhotos.visible = false;
			 	flickrService.photosets.getAllPhotos(flickrSets[0].id);
			 }
			 
			 // Return the title of each flickr set
			 private function getTitleFlickrSets (item:Object):String {
			 	return item.title;
			 }
			 
			 // Show the photos by set
			 private function onResultGetPhotosBySet (event:FlickrResultEvent):void{
			 	 userAllPhotos = new ArrayCollection(event.data.photoSet.photos);
			 	 maxPages = (userAllPhotos.length % 4 == 0) ? (userAllPhotos.length/4):((userAllPhotos.length/4)+1) 
			 	 buttonNextPhotos.visible = (userAllPhotos.length > 4) ? true:false;
			 	 drawPhotos (userAllPhotos);
			 }
			 
			 // Draw the photos 
			 private function drawPhotos (userPhotos:ArrayCollection):void{
			 	var limitArray:int = (userPhotos.length < 12) ? userPhotos.length:12; 
			 	//canvasPhotos.removeAllChildren();
			 	var count:uint=0;
			 	for each(var phot:Photo in userPhotos) {
			 		var framePhoto:PhotoFrame = new PhotoFrame();
					
					framePhoto.createImage("http://farm"+ phot.farm+".static.flickr.com/"+phot.server+"/"+phot.id+"_"+phot.secret+"_s.jpg");

					framePhoto.flickrPhoto = phot;
					framePhoto.selected = selectedPhotos[phot];
					framePhoto.x = (tamCanvas + paddingCanvas) * count;
					canvasPhotos.addChild(framePhoto);
			 		count++;
			 		if(count==limitArray)
			 			break;
			 	}
			 }
			 
			 // OnChange ComboBox 
			 private function updatePhotosBySet (event:Event): void{
			 	actualPage = 1;
			 	buttonPrevPhotos.visible = false;
			 	canvasPhotos.removeAllChildren();
			 	userAllPhotos.removeAll();
			 	
			 	flickrService.photosets.getAllPhotos(event.currentTarget.selectedItem.id);
			 	/* flickrService.photosets.getPhotos(event.currentTarget.selectedItem.id, 4,1); */
			 }
			 
			 // Move the photos to Left
			 private function movePhotosToLeft ():void{
			 	if (!(TweenMax.isTweening(canvasPhotos.getChildAt(1)))){
				 	actualPage--;
				 	for(var i:Number = 0; i<canvasPhotos.numChildren; i++){
				 		
						TweenMax.to(canvasPhotos.getChildAt(i),1,{onComplete:onTweenerCompleteToLeft()});
						if(canvasPhotos.getChildAt(i) is PhotoFrame){
							TweenMax.to(canvasPhotos.getChildAt(i),1,{x:canvasPhotos.getChildAt(i).x + 360,ease:Expo.easeOut});	
						}
					}
				 	
				 	buttonPrevPhotos.visible = (actualPage > 1) ? true:false;
				 	buttonNextPhotos.visible = (actualPage == maxPages) ? false:true;
				 	
			 	}
			 }
			 
			 
			 // Move the photos to Right
			 private function movePhotosToRight ():void{
				if (!(TweenMax.isTweening(canvasPhotos.getChildAt(1)))){
					actualPage++;
					
					for(var i:Number = 0; i<canvasPhotos.numChildren; i++){
						
						TweenMax.to(canvasPhotos.getChildAt(i),1,{onComplete:onTweenerCompleteToRight()});
						
						if(canvasPhotos.getChildAt(i) is PhotoFrame){
							// The last children, close the door
							TweenMax.to(canvasPhotos.getChildAt(i),1,{x:canvasPhotos.getChildAt(i).x - 360,ease:Expo.easeOut});
						}
					}
				 	buttonPrevPhotos.visible = (actualPage > 1) ? true:false;
				 	buttonNextPhotos.visible = (actualPage == maxPages) ? false:true;  
			 	}
			 }
			 
			 private function onTweenerCompleteToRight():void{
			 	if ((actualPage >= 3)&&(actualPage != maxPages)) {
			 		canvasPhotos.removeChildAt(3);
			 		canvasPhotos.removeChildAt(2);
			 		canvasPhotos.removeChildAt(1);
			 		canvasPhotos.removeChildAt(0);
			 		
			 		var index:int = actualPage * 4;
			 		
			 		// Veo si aÃºn quedan  
			 		var posFramePhoto:Number = 720;
			 		
				 	var limitArray:int = ((index+4) <= userAllPhotos.length) ? (index+4):userAllPhotos.length; 
				 	for (var count:int = index; count < limitArray; count++){
				 		var phot:Photo = new Photo();
				 		phot = userAllPhotos[count]
				 		var framePhoto:PhotoFrame = new PhotoFrame();
						framePhoto.createImage("http://farm"+ phot.farm+".static.flickr.com/"+phot.server+"/"+phot.id+"_"+phot.secret+"_s.jpg");
						framePhoto.flickrPhoto = phot;
						framePhoto.selected = selectedPhotos[phot];
						framePhoto.x = posFramePhoto;
						posFramePhoto += (tamCanvas+paddingCanvas);
						//framePhoto.x = (tamCanvas+paddingCanvas) * (count - 1);
						canvasPhotos.addChild(framePhoto);
				 	}
			 	}
			 }
			 
			 private function onTweenerCompleteToLeft():void{
			 	if ((actualPage >= 2)&&((actualPage+1) != maxPages)) {
			 		 if ((actualPage + 2) < (maxPages)){
				 		canvasPhotos.removeChildAt(11);
				 		canvasPhotos.removeChildAt(10);
				 		canvasPhotos.removeChildAt(9);
				 		canvasPhotos.removeChildAt(8);
			 		}else{
			 			// Como puede que no sean 4 los hijos a borrar a la derecha, los calculo
			 			var numChildsToDelete:int = ((userAllPhotos.length % 4) == 0) ?	4 : (userAllPhotos.length % 4);
			 			for (var countChild:int = numChildsToDelete; countChild > 0; countChild--){
			 				canvasPhotos.removeChildAt(7+countChild);
			 			} 
			 		} 
			 		var index:int = (actualPage * 4) - 8;
			 		var posFramePhoto:Number = -720;
			 		
					var indexChild:int = 0;			 	
				 	for (var count:int = index; count < (index + 4); count++){
				 		var phot:Photo = new Photo();
				 		phot = userAllPhotos[count]
				 		var framePhoto:PhotoFrame = new PhotoFrame();
						framePhoto.createImage("http://farm"+ phot.farm+".static.flickr.com/"+phot.server+"/"+phot.id+"_"+phot.secret+"_s.jpg");
						framePhoto.flickrPhoto = phot;
						framePhoto.selected = selectedPhotos[phot];
						framePhoto.x = posFramePhoto;
						posFramePhoto += (tamCanvas+paddingCanvas);
						//framePhoto.x = ((tamCanvas +paddingCanvas) * count)* -1;
						canvasPhotos.addChildAt(framePhoto,indexChild);
						indexChild++;	
				 	}
			 	}
			 }
			 
			 private function movePhotosToLeftQuickly():void{
			 	trace("Double click to left");
			 }
			 
			 private function movePhotosToRightQuickly():void{
			 	trace("Double click to right");
			 }
		]]>
	</mx:Script>
	<mx:HTTPService id="ppApiService" method="POST" resultFormat="text" />
	
	<mx:states>
		<!-- Initial state -->	
		<mx:State name="authorization">
			<mx:AddChild position="lastChild">
				<mx:Canvas x="0" y="0" id="canvasAuthorization" styleName="bkg" backgroundSize="100%" width="511" height="234">
					<mx:Label y="51.7" text="You need to connect your flickr account with " styleName="infoBold" id="label4" textAlign="center" horizontalCenter="0" width="317.66666" height="21"/>
					<mx:Button x="94.35" y="122" id="buttonConnectFlickr" click="getAuthUrl()" styleName="connectToFlickr" width="324" height="45" useHandCursor= "true" buttonMode = "true" mouseChildren = "false">
						<!--click="navigateToURL(new URLRequest('http://flickr.com/services/auth/?api_key=[flickrAdminKey]&perms=[read]&api_sig=[api_sig]'))">-->
						
					</mx:Button>
					<mx:Label y="65.95" text="ProtectedPlanet to start contributing with your images" styleName="infoBold" width="352" id="label3" textAlign="center" horizontalCenter="0"/>
					<mx:Label id="labelCarga"  x="450" y="140" text="Loading" visible="false"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		
		<!-- Visualize the photos geolocated -->
		<mx:State name="navigationPhotosGeolocated">
			<mx:AddChild position="lastChild">
				<mx:Canvas x="0" y="0" styleName="bkg" id="canvasNavGeolocatedPhotos" backgroundSize="100%" width="511" height="234">
					<mx:Label x="18" y="17" text="These are the photos in your flickr account geolocated near this Protected Area," id="infoPhotosGeolocated" styleName="info" width="480.5" height="21"/>
					<mx:Label x="103" y="34" text="select one to submit or " id="label2" styleName="infoBold" width="163" height="21"/>
					<mx:Button x="240" y="32" label="view your other photos" id="buttonViewOtherPhotos" click="navigateToOtherPhotos()" styleName="nullButtonBlue" useHandCursor= "true" buttonMode = "true" mouseChildren = "false"/>
					<mx:Button x="173" y="163" label="Submit selected" id="buttonSubmitSelectedPhotos" click="sendSelectedPhotos()" styleName="submitPhotos" useHandCursor= "true" buttonMode = "true" mouseChildren = "false"/>
					<mx:Button x="184" y="197" label="skip this step" styleName="nullButtonBlue" width="118" height="21" id="infoBoldBlue" click="navigateToOtherPhotos()" useHandCursor= "true" buttonMode = "true" mouseChildren = "false"/>
					<mx:Button x="40" y="97" styleName="before" id="buttonPrevPhotos" click="movePhotosToLeft()" visible="true" useHandCursor= "true" buttonMode = "true" mouseChildren = "false"/>
					<mx:Button x="438" y="97" styleName="after" id="buttonNextPhotos" click="movePhotosToRight()" visible="true" useHandCursor= "true" buttonMode = "true" mouseChildren = "false"/>
					<mx:Canvas x="72" y="69" width="360" height="113" id="canvasPhotos" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					</mx:Canvas>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		
		<!--Visualize all the flickr photos by user-->
		<mx:State name="navigationOtherPhotos" basedOn="navigationPhotosGeolocated">
			<mx:AddChild relativeTo="{canvasNavGeolocatedPhotos}" position="lastChild">
				<mx:ComboBox x="350" y="17" id="comboFlickrSets" editable="false" width="125" styleName="flickrSets" useHandCursor= "true" buttonMode = "true"
					dataProvider="{flickrSets}" labelFunction="getTitleFlickrSets" 
					change="updatePhotosBySet(event)" height="27"/>
			</mx:AddChild>
			<mx:RemoveChild target="{infoPhotosGeolocated}"/>
			<mx:RemoveChild target="{label2}"/>
			<mx:RemoveChild target="{buttonViewOtherPhotos}"/>
			<mx:AddChild relativeTo="{canvasNavGeolocatedPhotos}" position="lastChild">
				<mx:Label x="19" y="20" text="Select one photo from the list below or filter by set" styleName="infoBold"/>
			</mx:AddChild>
			<mx:SetProperty target="{buttonSubmitSelectedPhotos}" name="width" value="148"/>
			<mx:SetProperty target="{buttonSubmitSelectedPhotos}" name="height" value="34"/>
			<mx:RemoveChild target="{infoBoldBlue}"/>
		</mx:State>
		<mx:State name="loading">
			<mx:AddChild position="lastChild">
				<mx:Label x="70" y="26" text="Loading...."/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="error">
			<mx:AddChild position="lastChild">
				<mx:Label x="46" y="47" text="There has been an error, plese refresh page"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="authChecking" basedOn="authorization">
			<mx:RemoveChild target="{buttonConnectFlickr}"/>
			<mx:SetProperty target="{label3}" name="y" value="65.95"/>
			<mx:SetProperty target="{label4}" name="text" value="A new window may be just opened."/>
			<mx:SetProperty target="{label3}" name="text" value="Please follow the instructions and come back when you finish"/>
			<mx:SetStyle target="{label4}" name="textAlign" value="center"/>
			<mx:SetStyle target="{label3}" name="textAlign" value="center"/>
			<mx:SetProperty target="{label4}" name="x"/>
			<mx:SetStyle target="{label4}" name="horizontalCenter" value="0"/>
			<mx:SetProperty target="{label3}" name="x"/>
			<mx:SetStyle target="{label3}" name="horizontalCenter" value="0"/>
			<mx:SetProperty target="{label3}" name="width" value="490"/>
			<mx:SetStyle target="{label3}" name="fontWeight" value="normal"/>
		</mx:State>
		<mx:State name="completed">
			<mx:AddChild position="lastChild">
				<mx:Label x="68" y="38" text="Thanks!!"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>	
</mx:Application>
