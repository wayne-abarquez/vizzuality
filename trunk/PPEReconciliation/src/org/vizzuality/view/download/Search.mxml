<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:maps="com.google.maps.*" addedToStage="added()"  creationComplete="init()"
	xmlns:components="org.vizzuality.components.*">
	<mx:states>
		<mx:State name="loading">
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="0" y="0" width="100%" height="100%" backgroundColor="#FFFFFF">
					<mx:SWFLoader horizontalCenter="0" verticalCenter="0" source="{Resource.LOAD_ANIMATION}" alpha=".6"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name="list"/>
	</mx:states>
	
<mx:Style>
	.selectionRectangleStyle {
	backgroundAlpha: 0.3;
	backgroundColor: #067EE3;
	borderColor: #FFFFFF;
	borderStyle: inset;
	borderThickness: 2;
	cornerRadius: 0;
	}
</mx:Style>

<mx:Script>
	<![CDATA[
		import com.google.maps.overlays.Marker;
		import com.google.maps.services.GeocodingEvent;
		import com.google.maps.services.ClientGeocoder;
		import com.google.maps.interfaces.IPane;
		import org.vizzuality.maps.GeoserverTileLayer;
		import com.google.maps.overlays.TileLayerOverlay;
		import com.google.maps.controls.MapTypeControl;
		import com.asual.swfaddress.SWFAddress;
		import mx.managers.CursorManager;
		import com.google.maps.MapZoomEvent;
		import mx.events.ScrollEvent;
		import mx.core.Application;
		import com.google.maps.LatLngBounds;
		import com.google.maps.MapMouseEvent;
		import com.google.maps.controls.ControlPosition;
		import com.google.maps.controls.ZoomControlOptions;
		import com.google.maps.MapType;
		import com.google.maps.LatLng;
		import com.google.maps.controls.ZoomControl;
		import com.google.maps.MapEvent;
		import resource.Resource;
		import mx.collections.ArrayCollection;
		
		private var selectedArea: ArrayCollection = new ArrayCollection();
		private var dataBbox:LatLngBounds;	
		private var selectionRectangle:Canvas;
		private var r:Rectangle;
		private var scrollPosition: Number = 0;
		
		private	var tl:GeoserverTileLayer;
		private	var tlo:TileLayerOverlay;			
		private var tilesPane:IPane;
		//private var polygonsPane:IPane;		
		

	
        [Bindable]private var areasArr: ArrayCollection = new ArrayCollection([
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"},
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"},
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"},
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"},
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"},
           {name:"Yosemite National Park", country:"United States"},
           {name:"Yosemite National Area", country:"United States"},
           {name:"Galapagos national reserve", country:"Ecuador"},
           {name:"Bacalar Chico Protected Area", country:"Ecuador"}
		]);	
	
		private function init():void {
		    selectionRectangle = new Canvas();
			selectionRectangle.setStyle("styleName", "selectionRectangleStyle");
			Application.application.addEventListener(ScrollEvent.SCROLL,onScrollApplication);
			r = new Rectangle(0,0,0,0);
		}
		
		private function onScrollApplication(ev:ScrollEvent):void {
			scrollPosition = ev.position;
		}
		
		private function added():void {
		    if (searchInput) {
                if (searchInput.text=="Keyword, name, country...") {
                	searchInput.setStyle("fontStyle","italic");
                	searchInput.setStyle("color","#999999");
                	searchInput.setStyle("fontSize","12");
                } else {
                	searchInput.setStyle("fontStyle","normal");
                	searchInput.setStyle("color","#333333");
                	searchInput.setStyle("fontSize","13");
                }                	
            }
		}
		
        private function changeStyle():void {
/*          	if (search_text.text=="Keyword, name, country...") {
            	search_text.setStyle("fontStyle","normal");
            	search_text.setStyle("color","#333333");
            	search_text.setStyle("fontSize","13");
            	search_text.text = '';
            }else if (search_text.text==""){            	
            	search_text.setStyle("fontStyle","italic");
            	search_text.setStyle("color","#999999");
            	search_text.setStyle("fontSize","11");
            	search_text.text = 'Keyword, name, country...'; 
            } */
        }
        
        private function onMapReady(ev:MapEvent):void {
        	var zco:ZoomControlOptions= new ZoomControlOptions({position:new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT, 10, 10)});
        	map.addEventListener(MapZoomEvent.ZOOM_CHANGED, deleteRectangle);
            map.addControl(new ZoomControl(zco));
            map.enableScrollWheelZoom();
            map.setCenter(new LatLng(0,0),1);
            //map.addControl(new MapTypeControl());
            map.setMapType(MapType.PHYSICAL_MAP_TYPE);
            
            //Add the PA layer
			tilesPane = map.getPaneManager().createPane();
			tl = new GeoserverTileLayer(map);
			tlo = new TileLayerOverlay(tl);

			tl.addEventListener("GEOSERVER_TILE_LAYER_LOADED",function(ev:Event):void {
				discretLoading.visible=false;
			});
			tl.addEventListener("GEOSERVER_TILE_LAYER_LOADING",function(ev:Event):void {
				discretLoading.visible=true;
			});
			tilesPane.addOverlay(tlo);	
			tlo.foreground.alpha=1;            
            
            
        }	
        
	      private function doGeocode():void {
	        // Geocoding example
	        var geocoder:ClientGeocoder = new ClientGeocoder();
	        
	        geocoder.addEventListener(
	          GeocodingEvent.GEOCODING_SUCCESS,
	          function(event:GeocodingEvent):void {
	          var placemarks:Array = event.response.placemarks;
	          if (placemarks.length > 0) {
	          	var bbox:LatLngBounds =  new LatLngBounds(
	          		new LatLng(placemarks[0].ExtendedData.LatLonBox.north,placemarks[0].ExtendedData.LatLonBox.west),
	          		new LatLng(placemarks[0].ExtendedData.LatLonBox.south,placemarks[0].ExtendedData.LatLonBox.east));	
	          		
	            map.setCenter(placemarks[0].point,map.getBoundsZoomLevel(bbox));
/* 	            var marker:Marker = new Marker(placemarks[0].point);
	            
	            marker.addEventListener(MapMouseEvent.CLICK, function (event:MapMouseEvent):void {
	                marker.openInfoWindow(new InfoWindowOptions({content: placemarks[0].address}));
	            }); 
	            map.addOverlay(marker);*/
	          }
	        });
	        geocoder.addEventListener(
	          GeocodingEvent.GEOCODING_FAILURE,
	          function(event:GeocodingEvent):void {
	            trace(event);
	            trace(event.status);
	          });
	        geocoder.geocode(searchInput.text);
	      }
        
        private function deleteRectangle (ev: MapZoomEvent):void {
        	try {
    			map.removeChild(selectionRectangle);
    		}catch (erObject:Error) { 
      			trace("There isn't rectangles");
      		}
        }
        
        private function onClickMapArea(ev:MapMouseEvent):void {
        	selectedArea = new ArrayCollection();
        	selectedArea.addItem(ev.latLng);
        }
        
        private function onMouseUpMapArea(ev:MapMouseEvent):void {
        	selectedArea.addItem(ev.latLng);
        	/* uckAppManager.rectTool(); */
        	dataBbox=new LatLngBounds();
			for each(var m:LatLng in selectedArea) {
				dataBbox.extend(m);
			}
			
			/* map.setCenter(dataBbox.getCenter(),map.getBoundsZoomLevel(dataBbox)); */
        	
        }
        
        private function checkSelectArea():void {
        	if (checkArea.selected) {
        		map.disableDragging();
				map.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				map.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				map.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
        		map.addEventListener(MapMouseEvent.MOUSE_DOWN,onClickMapArea);
        		map.addEventListener(MapMouseEvent.MOUSE_UP,onMouseUpMapArea);
        		map.addEventListener(MouseEvent.ROLL_OVER, onMouseOverMap);
        		map.addEventListener(MouseEvent.ROLL_OUT, onMouseOutMap);
        	} else {
        		map.enableDragging();
        		try {
        			map.removeChild(selectionRectangle);
        		}catch (erObject:Error) { 
          			trace("There isn't rectangles");
          		}
        		map.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				map.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				map.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
        		map.removeEventListener(MapMouseEvent.MOUSE_DOWN,onClickMapArea);
        		map.removeEventListener(MapMouseEvent.MOUSE_UP,onMouseUpMapArea);
        		map.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverMap);
        		map.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutMap);
        	}
        }
        
        private function onMouseOverMap(ev:MouseEvent):void {
        	CursorManager.setCursor(Resource.CURSOR_RECTANGLE);
        }
        
        private function onMouseOutMap(ev:MouseEvent):void {
        	CursorManager.removeAllCursors();
        }
        

		private function onMouseDown(e:MouseEvent):void {
						
			map.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);

			r = new Rectangle(Number(e.stageX-(((stage.width-874)/2)+25)),Number(e.stageY-287) + (scrollPosition),0,0);
			
			selectionRectangle.x = r.x;
			selectionRectangle.y = r.y;
			selectionRectangle.width = r.width;
			selectionRectangle.height = r.height;
			
			map.addChild(selectionRectangle);
		}
		
		private function onMouseUp(e:MouseEvent):void {
			map.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			/* map.removeChild(selectionRectangle); */
		}
		
		private function onMouseMove(e:MouseEvent):void {

			r.bottomRight = new Point(e.stageX-(((stage.width-874)/2)+25), e.stageY-287 + (scrollPosition));
			selectionRectangle.x = r.x;
			selectionRectangle.y = r.y;
			selectionRectangle.width = r.width;
			selectionRectangle.height = r.height;				
		}

        
	]]>
</mx:Script>
	<mx:Canvas width="100%" height="400" styleName="softBlueUp" backgroundSize="100%" id="canvas_map">
		<mx:Label text="Search and browse the WDPA throw the map"  fontFamily="Helvetica" fontStyle="normal" fontSize="12" fontWeight="bold" color="#666666" width="264" left="10" top="10"/>
		<mx:HBox left="10" right="10" top="34" horizontalAlign="right" verticalAlign="middle" horizontalGap="4">
			<mx:Label text="search"  fontFamily="Helvetica" fontSize="12" color="#666666" height="13"/>
			<mx:TextInput id="searchInput" 
				focusIn="changeStyle()" focusOut="changeStyle()"
				fontStyle="italic" paddingTop="5" paddingLeft="5" paddingRight="5" fontSize="11" 
				fontFamily="Helvetica" color="#999999" width="341" styleName="searchTextInput" 
				backgroundSize="100%" borderStyle="none" height="25" enter="doGeocode()"/>
			<mx:Button id="checkArea" width="29" styleName="boundingBoxButton" height="25" useHandCursor="true" 
				toggle="true" mouseChildren="false" buttonMode="true" click="checkSelectArea()"/>
		</mx:HBox>
		
		<maps:Map  left="10" bottom="10" right="10" id="map" height="326" key="ABQIAAAAsIunaSEq-72JsQD5i92_2RTb-vLQlFZmc2N8bgWI8YDPp5FEVBSSShDhDbHNKr3tTC6UaCKqvYjyOQ"
			mapevent_mapready="onMapReady(event)"/>
		<components:DiscretLoading id="discretLoading" left="39" top="73"/>

	</mx:Canvas>
	
	<mx:Canvas width="100%" height="100%" id="canvas1">
		<mx:TileList dataProvider="{areasArr}"  width="100%" height="100%" itemRenderer="org.vizzuality.view.download.itemrenders.ProtectedAreaResultItem" 
			paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" borderStyle="none">
		</mx:TileList>
	</mx:Canvas>
	
	<mx:Canvas width="100%" height="34" styleName="softBlueBottom" backgroundSize="100%">
		<mx:Label  right="70" verticalCenter="0" width="211" text="page 1 of 7" textAlign="right" fontSize="11" fontFamily="Helvetica" color="#414141" fontWeight="bold"/>
		<mx:Button right="39" verticalCenter="0" styleName="whitePaginationLeft" width="27" height="24" useHandCursor="true" mouseChildren="false" buttonMode="true"/>
		<mx:Button right="8" verticalCenter="0" styleName="whitePaginationRight" width="27" height="24" useHandCursor="true" mouseChildren="false" buttonMode="true"/>
	</mx:Canvas>	
	
	<mx:Canvas width="100%" height="66" borderStyle="solid" cornerRadius="4" styleName="ContainersInfo">	
		<mx:Image x="13" y="10" width="43" height="47" source="{resource.Resource.INFORMATION}"/>
		<mx:Label text="If you want to download a complete country “country based tab”"  left="58" right="7" top="19" fontFamily="Helvetica" fontWeight="bold" fontSize="13" color="#414141"/>
		<mx:HBox id="hbox1" x="58" y="34"  horizontalGap="0">
			<mx:Label text="Do you want to download a complete country data? Then"  fontSize="12" fontFamily="Helvetica" color="#414141"/>
			<components:LinkLabel text="go to the “country tab”"  fontSize="12" fontFamily="Helvetica" color="#336699" fontWeight="bold"
				default_color="0x336699" default_hover_color="0x003366" default_hover_decoration="none" 
				text_decoration="none" default_weight="bold" default_hover_weight="bold"
				click="{SWFAddress.setValue('/rec/checkout/countries/africa')}"/>
		</mx:HBox>
	</mx:Canvas>
</mx:VBox>