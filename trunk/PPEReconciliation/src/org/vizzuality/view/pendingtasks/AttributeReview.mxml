<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="874" 
	xmlns:maps="com.google.maps.*" verticalScrollPolicy="off"
	styleName="dataDownloadContainer" backgroundSize="100%" xmlns:itemrenderes="org.vizzuality.view.itemrenderes.*" 
	xmlns:itemrenders="org.vizzuality.view.pendingtasks.itemrenders.*" addedToStage="addedToStage()"
	xmlns:pendingtasks="org.vizzuality.view.pendingtasks.*" height="100%" xmlns:components="org.vizzuality.components.*">
	<mx:states>
		<mx:State name="loading">
			<mx:RemoveChild target="{headPa}"/>
			<mx:RemoveChild target="{reviewPa}"/>
			<mx:AddChild relativeTo="{confirmRejectButtons}" position="before">
				<mx:Canvas x="0" y="0" width="100%" height="100%" backgroundColor="#FFFFFF">
					<mx:SWFLoader horizontalCenter="0" verticalCenter="0" source="{Resource.LOAD_ANIMATION}" alpha=".6"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name="delete">
			<mx:RemoveChild target="{reviewPa}"/>
			<mx:SetProperty target="{canvas1}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="insert">
			<mx:SetProperty target="{canvas1}" name="styleName" value="softGreenUp"/>
			<mx:SetProperty target="{label1}" name="text" value="Your are about to add this Protected Area"/>
			<mx:RemoveChild target="{headPa}"/>
			<mx:SetProperty target="{canvas1}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="update">
			<mx:SetProperty target="{canvas1}" name="styleName" value="softBlueUp"/>
			<mx:SetProperty target="{label1}" name="text" value="Your are about to update this Protected Area"/>
			<mx:SetProperty target="{canvas1}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="deleteNoGeom" basedOn="delete">
			<mx:RemoveChild target="{headGeomCanvas}"/>
			<mx:RemoveChild target="{headGeomLabel}"/>
			<mx:SetProperty target="{headAttributes}" name="y" value="70"/>
		</mx:State>
		<mx:State name="insertNoGeom" basedOn="insert">
			<mx:RemoveChild target="{newGeomCanvas}"/>
			<mx:RemoveChild target="{newGeomLabel}"/>
			<mx:SetProperty target="{newAttributes}" name="y" value="70"/>
		</mx:State>
		<mx:State name="updateNoGeom" basedOn="update">
			<mx:RemoveChild target="{headGeomCanvas}"/>
			<mx:RemoveChild target="{newGeomLabel}"/>
			<mx:RemoveChild target="{headGeomLabel}"/>
			<mx:RemoveChild target="{newGeomCanvas}"/>
			<mx:SetProperty target="{headAttributes}" name="y" value="70"/>
			<mx:SetProperty target="{newAttributes}" name="y" value="70"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import com.google.maps.MapType;
			import com.google.maps.overlays.Marker;
			import com.google.maps.LatLng;
			import gs.TweenLite;
			import mx.controls.Spacer;
			import mx.controls.Alert;
			import com.google.maps.controls.ControlPosition;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.MapZoomEvent;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapMoveEvent;
			import com.google.maps.overlays.PolygonOptions;
			import org.vizzuality.maps.Multipolygon;
			import org.vizzuality.view.pendingtasks.itemrenders.NewAttribute;
			import org.vizzuality.view.pendingtasks.itemrenders.headAttribute;
			import com.adobe.serialization.json.JSON;
			import mx.rpc.events.ResultEvent;
			import mx.core.Application;
			import com.asual.swfaddress.SWFAddress;
			import org.vizzuality.events.TaskSelectionEvent;
			import org.vizzuality.events.MyEventDispatcher;
			import org.vizzuality.model.Task;
			import org.vizzuality.model.Pa;
			import resource.Resource;
			
			private var _pa:Pa;
			
			private var originalPa:Pa;
			private var newPa:Pa;
			[Bindable] private var newName:String="";
			
			[Bindable] public var task:Task;
			
			public function set pa(val:Pa):void {
				_pa=val;
				currentState="loading";
				//Get the data for the pa
				jsonService.url = Application.application.serverUrl + "/exports/"+task.id+"/imports/"+task.importId+"/protected_areas/"+_pa.id;
				jsonService.send();
				
			}
			public function get pa():Pa {
				return _pa;
			}
			
			
			private function addedToStage():void {
				Application.application.viewsContainer.myViewStack.height = 1150;
			}
			
			private function onGetPaAttributesComparisionResult(event:ResultEvent):void {
				var res:Object = JSON.decode(event.result as String);
				
				var typeOperation:String="";
				var appState:String="";
				if (res.originalPa.name==null) {
					typeOperation="insert";
					appState="insert";
					if(res.newPa.geom == null || res.newPa.geom == "") {
						appState="insertNoGeom";
					}
				} else if (res.newPa.name==null) {
					typeOperation="delete";		
					appState="delete";		
					if(res.originalPa.geom == null || res.originalPa.geom == "") {
						appState="deleteNoGeom";
					}								
				} else {
					typeOperation="update";		
					appState="update";		
					if((res.originalPa.geom == null || res.originalPa.geom == "") 
						&& (res.newPa.geom == null || res.newPa.geom == "")) {
						appState="updateNoGeom";
					}						
													
				}
				
				
				originalPa=new Pa();
				originalPa.country=res.originalPa.country;
				originalPa.id = res.originalPa.id;
				originalPa.name = res.originalPa.name;
				//the rest of the stuff is flexible
				originalPa.data = res.originalPa;
				
				newPa=new Pa();
				newPa.country=res.newPa.country;
				newPa.id = res.newPa.id;
				newPa.name = res.newPa.name;
				newName=newPa.name;
				
				
				//the rest of the stuff is flexible
				newPa.data = res.newPa;		
				
				var addedAttributes:Object={};
				var changedAttributes:Object={};
				var deletedAttributes:Object={};
				
				for (var atrib:String in newPa.data) {
					if(atrib!='name' && atrib!='geom' && atrib!='country' && atrib!='id') {
						//trace(atrib + ": " + String(originalPa.data[atrib]) + " / "+ String(newPa.data[atrib]));
						
						//ATTRIBUTES ADDED
						if ((originalPa.data[atrib]==null || originalPa.data[atrib]=='') && originalPa.data[atrib]!=newPa.data[atrib]) {
							addedAttributes[atrib]=newPa.data[atrib];
							//trace("ADDED");
						}
						//ATTRIBUTES CHANGED
						else if (originalPa.data[atrib]!=newPa.data[atrib] && originalPa.data[atrib]!=null  && newPa.data[atrib]!='') {
							changedAttributes[atrib]=newPa.data[atrib];
							//trace("CHANGED");
						}
					}
				}	
				
				for (var atrib2:String in originalPa.data) {
					if(atrib2!='name' && atrib2!='geom' && atrib2!='country' && atrib2!='id') {
						//ATTRIBUTES DELETED
						if ((newPa.data[atrib2]==null || newPa.data[atrib2]=='')  && originalPa.data[atrib2]!=newPa.data[atrib2]) {
							deletedAttributes[atrib2]=originalPa.data[atrib2];
							//trace(atrib2 + ": " + String(originalPa.data[atrib2]) + " / "+ String(newPa.data[atrib2]));
							//trace("DELETED");
						}
					}
				}
						
				
				newAttributes.removeAllChildren();
				headAttributes.removeAllChildren();
				var ha:headAttribute;
				var na:NewAttribute
				if(typeOperation=="insert" || typeOperation=="update") {
					//ADDED AATRIBUTES
					for (var prop:String in addedAttributes) {
						ha = new headAttribute();
						ha.attName=prop;
						ha.attValue='';	
						if(typeOperation=="update")
							ha.setStyle("backgroundColor",0xC1E1FF);
						headAttributes.addChildAt(ha,0);
						
						na = new NewAttribute();
						na.attName=prop;
						na.attValue=addedAttributes[prop];
						if(typeOperation=="update")
							na.setStyle("backgroundColor",0xC1E1FF);
						newAttributes.addChildAt(na,0);									
					}
				}
				if(typeOperation=="delete" || typeOperation=="update") {
					//REMOVED AATRIBUTES
					for (var prop2:String in deletedAttributes) {
						ha = new headAttribute();
						ha.attName=prop2;
						ha.attValue=deletedAttributes[prop2];	
						if(typeOperation=="update")
							ha.setStyle("backgroundColor",0xFFC1C1);
						headAttributes.addChildAt(ha,0);
						
						na = new NewAttribute();
						na.attName=prop2;
						na.attValue='';
						if(typeOperation=="update")
							na.setStyle("backgroundColor",0xFFC1C1);
						newAttributes.addChildAt(na,0);									
					}
				}
				if(typeOperation=="update") {
					//CHANGED AATRIBUTES
					for (var prop3:String in changedAttributes) {
						ha = new headAttribute();
						ha.attName=prop3;
						ha.attValue=originalPa.data[prop3];	
						if(typeOperation=="update")
							ha.setStyle("backgroundColor",0xCBFFC1);
						headAttributes.addChildAt(ha,0);
						
						na = new NewAttribute();
						na.attName=prop3;
						na.attValue=changedAttributes[prop3];
						if(typeOperation=="update")
							na.setStyle("backgroundColor",0xCBFFC1);
						newAttributes.addChildAt(na,0);									
					}
				}
				
				var sp1:Spacer = new Spacer();
				sp1.height=20;
				headAttributes.addChild(sp1);
				
				var sp2:Spacer = new Spacer();
				sp2.height=20;
				newAttributes.addChild(sp2);
				
				
				currentState=appState;
				
				if(appState.indexOf("NoGeom")<0) {
					updateMaps();
				}
				
				
			}
			
			private function updateMaps():void {
				//If there is no geom data to visualize return
				if (newPa.data.geom==null && originalPa.data.geom==null) {
					return;
				}
				
				//Check if the maps are initialized and if not wait for 1 sec.
				if(!map2.isLoaded() || !map1.isLoaded()) {
					TweenLite.delayedCall(1,updateMaps);
					return;
				}
				
				map2.clearOverlays();
				if (newPa.data.geom!=null && newPa.data.geom!="") {
					addGeoJsonToMap((newPa.data.geom as String),map2);
				}
				map1.clearOverlays();
				if (originalPa.data.geom!=null && originalPa.data.geom!="") {
					addGeoJsonToMap((originalPa.data.geom as String),map1);
				}
				syncMaps(map1,map2);				
			}
			
			private function map2Ready():void {
				var zco:ZoomControlOptions = new ZoomControlOptions({hasScrollTrack:false,position:new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,5,5)});
				var zc:ZoomControl = new ZoomControl(zco);
				map2.addControl(zc);			
				map2.setMapType(MapType.PHYSICAL_MAP_TYPE);
			}
			private function map1Ready():void {
				var zco:ZoomControlOptions = new ZoomControlOptions({hasScrollTrack:false,position:new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,5,5)});
				var zc:ZoomControl = new ZoomControl(zco);
				map1.addControl(zc);
				map1.setMapType(MapType.PHYSICAL_MAP_TYPE);
			}
			
			private function addGeoJsonToMap(geoJson:String,map:Map):void {
				var polOpt:PolygonOptions=new PolygonOptions({
					  strokeStyle: {
					    thickness: 2,
					    color: 0xFF7600,
					    alpha: 1
					  },
					  fillStyle: {
					    color: 0xFF7600,
					    alpha: 0.4
					  }	
				});

				var geoJsondata:Object = JSON.decode(geoJson);
				//empty pa polygons ?? 
				if (geoJsondata != null) {
					if(geoJsondata.type=="Point") {
						var point:LatLng = new LatLng(geoJsondata.coordinates[1],geoJsondata.coordinates[0]);
						map.addOverlay(new Marker(point));
						map.setCenter(point,7);
					} else {
						var mp:Multipolygon= new Multipolygon();
						mp.fromGeojsonMultiPolygon(geoJsondata.coordinates as Array,polOpt);						
						mp.addToMap(map);
						map.setCenter(mp.getLatLngBounds().getCenter(),map.getBoundsZoomLevel(mp.getLatLngBounds())-1);							
					}
					
				}
			}
			
			private function syncMaps(m1:Map,m2:Map):void {
				if(m1.getZoom()<m2.getZoom())
					m1.setZoom(m2.getZoom());
				if(m2.getZoom()<m1.getZoom())
					m2.setZoom(m1.getZoom());
				
				m1.addEventListener(MapMouseEvent.DRAG_STEP,function(event:MapMouseEvent):void {
					m2.setCenter(event.latLng);
				});
				m1.addEventListener(MapZoomEvent.ZOOM_CHANGED,function(event:MapZoomEvent):void {
					m2.setCenter(m1.getCenter(),event.zoomLevel);
				});
				m1.addEventListener(MapMouseEvent.DRAG_END,function(event:MapMouseEvent):void {
					m2.setCenter(event.latLng);
				});
				m2.addEventListener(MapMouseEvent.DRAG_STEP,function(event:MapMouseEvent):void {
					m1.setCenter(event.latLng);
				});
				m2.addEventListener(MapMouseEvent.DRAG_END,function(event:MapMouseEvent):void {
					m1.setCenter(event.latLng);
				});
				m2.addEventListener(MapZoomEvent.ZOOM_CHANGED,function(event:MapZoomEvent):void {
					m1.setCenter(m2.getCenter(),event.zoomLevel);
				});
				
			}
			
			
			
		]]>
	</mx:Script>
	
	<mx:HBox y="17" left="14" verticalAlign="middle" horizontalGap="1" right="392">
		<mx:Label y="17" text="All tasks" useHandCursor="true" mouseChildren="false" buttonMode="true" click="SWFAddress.setValue('/rec/pendingtasks')"
			fontFamily="Helvetica" fontWeight="bold" fontSize="12" color="#336699" left="14" right="20"/>
		<mx:Image source="{Resource.BREADCRUMB_ARROW}" height="8" />
		<mx:Label y="17" text="{task.status + ' - ' + task.description + ' ('+task.code+')'}" 
			useHandCursor="true" mouseChildren="false" buttonMode="true" click="SWFAddress.setValue('/rec/pendingtasks/task')"
			fontFamily="Helvetica" fontWeight="bold" fontSize="12" color="#336699" left="14" right="20"/>
		<mx:Spacer width="100%" />
	</mx:HBox>
	<mx:HBox left="13" top="32" verticalAlign="bottom" horizontalGap="0" right="373">
		<mx:Label text="{newName}" fontFamily="Helvetica" fontWeight="bold" fontSize="20" color="#666666" left="14" top="35" letterSpacing="-1"/>
		<mx:Label text="- Merge your changes" color="#666666" fontFamily="Helvetica" fontWeight="normal" fontSize="15" fontStyle="italic" height="23"/>
	</mx:HBox>
    
	<mx:Canvas backgroundColor="#FFFFFF" left="0" right="0" top="62" bottom="10"
		verticalScrollPolicy="off" horizontalScrollPolicy="off">
	    <mx:VBox left="15" right="15" top="15" bottom="15">
			<mx:Canvas styleName="softRed" width="100%" height="30" backgroundSize="100%" id="canvas1" visible="false">
				<mx:Label x="27" y="10" text="Your are about to delete this Protected Area" fontFamily="Helvetica" fontWeight="bold" fontSize="11" color="#666666" id="label1"/>
				<mx:Image x="9" y="7" source="{Resource.EXCLAMATION}"/>
			    <mx:HBox horizontalGap="4" verticalAlign="bottom"  horizontalAlign="right" right="17" top="3">
					<!-- El texto de este boton cambiaría si hay cambios a "save and exit"-->				
					<mx:Spacer width="100%" />
					<components:ShadowButton label="REJECT" styleName="redButton" icon="{Resource.CROSS_ICON_OVER}" useHandCursor="true" buttonMode="true" mouseChildren="false"/>
					<components:ShadowButton label="CONFIRM" styleName="greenButton" icon="{Resource.TICK_ICON_OVER}" useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		    	</mx:HBox>				
			</mx:Canvas>
	    	<mx:HBox horizontalGap="0" width="100%">
	    		<mx:Canvas width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off"
	    			id="headPa" backgroundColor="#FFFFE5" borderColor="#E9E9E9"
	    			borderStyle="solid" cornerRadius="4">
					<mx:HBox horizontalGap="0" verticalAlign="bottom" left="15" right="15" top="14">
						<mx:Label text="Head version"  fontFamily="Helvetica" fontStyle="normal" fontSize="20" fontWeight="bold" color="#666666"  letterSpacing="-1"/>
						<mx:Label text="(09/11/2009)"  fontFamily="Helvetica" fontStyle="normal" fontSize="13" fontWeight="bold" color="#666666"  height="21"/>
					</mx:HBox>
					<mx:HRule height="1" left="15" right="0" top="63"/>
					<mx:Label id="headGeomLabel" y="69" text="GEOMETRY" color="#999999" fontFamily="Helvetica" fontWeight="bold" fontSize="10" left="17"/>
					<mx:Canvas id="headGeomCanvas" backgroundColor="#FFFFFF" borderStyle="solid" borderThickness="1" borderColor="#ccccccc" y="85" height="218" left="20" right="17">
						<maps:Map  id="map1" key="ABQIAAAAsIunaSEq-72JsQD5i92_2RTb-vLQlFZmc2N8bgWI8YDPp5FEVBSSShDhDbHNKr3tTC6UaCKqvYjyOQ" left="3" right="3" top="3" bottom="3"
							mapevent_mapready="map1Ready()"/>
					</mx:Canvas>
					<mx:VBox id="headAttributes" left="15" right="0" y="335" verticalGap="0">				
						<mx:HRule height="1" width="100%"/>
					</mx:VBox>
				</mx:Canvas>
				<mx:Canvas id="reviewPa" backgroundColor="#FFFFFF" verticalScrollPolicy="off" horizontalScrollPolicy="off"
					width="100%" borderStyle="none" cornerRadius="4" borderColor="#E9E9E9">
					<mx:HBox horizontalGap="0" verticalAlign="bottom" left="15" right="15" top="15">
						<mx:Label text="Your version"  fontFamily="Helvetica" fontStyle="normal" fontSize="20" fontWeight="bold" color="#666666"  letterSpacing="-1"/>
					</mx:HBox>

					<mx:HRule height="1" left="0" right="17" top="64"/>
					<mx:Label  id="newGeomLabel" y="70" text="GEOMETRY" color="#999999" fontFamily="Helvetica" fontWeight="bold" fontSize="10" left="16"/>
					<mx:Canvas id="newGeomCanvas" backgroundColor="#FFFFFF" borderStyle="solid" borderThickness="1" borderColor="#ccccccc" y="86" height="218" left="19" right="17">
						<maps:Map  id="map2" key="ABQIAAAAsIunaSEq-72JsQD5i92_2RTb-vLQlFZmc2N8bgWI8YDPp5FEVBSSShDhDbHNKr3tTC6UaCKqvYjyOQ"
							 mapevent_mapready="map2Ready()"
							 left="3" right="3" top="3" bottom="3"/>
					</mx:Canvas>
					<mx:VBox id="newAttributes" y="336" left="0" verticalGap="0"
						verticalScrollPolicy="off" horizontalScrollPolicy="off" right="17">
						<mx:HRule height="1" width="100%"/>
					</mx:VBox>
				</mx:Canvas>						
	    	</mx:HBox>
		    <mx:Spacer height="12" />
		    <mx:HBox horizontalGap="4" bottom="0" verticalAlign="bottom" paddingRight="16"
		    	horizontalAlign="right" id="confirmRejectButtons" width="100%">
				<!-- El texto de este boton cambiaría si hay cambios a "save and exit"-->				
				<mx:Button label="back to the overview" styleName="noSkinButton" 
					fontFamily="Helvetica" fontWeight="bold" icon="{Resource.GO_BACK_MINI_ARROW}" fontSize="12"
					click="SWFAddress.setValue('/rec/pendingtasks')" useHandCursor="true" mouseChildren="false" buttonMode="true"/>
				<mx:Spacer width="100%" />
				<components:ShadowButton label="REJECT" styleName="redButton" icon="{Resource.CROSS_ICON_OVER}" buttonMode="true" mouseChildren="false" useHandCursor="true"/>
				<components:ShadowButton label="CONFIRM" styleName="greenButton" icon="{Resource.TICK_ICON_OVER}" buttonMode="true" mouseChildren="false" useHandCursor="true"/>
	    	</mx:HBox>
	    </mx:VBox>

	</mx:Canvas>
	<mx:HBox right="15" horizontalAlign="right" horizontalGap="3" verticalAlign="middle" top="32">
		<mx:Label id="pagingDelInfo"  right="70" verticalCenter="0" text="1 of 534" textAlign="right" fontSize="11" fontFamily="Helvetica" color="#414141" fontWeight="bold" paddingTop="3"/>
		<mx:Button right="39" verticalCenter="0" styleName="whitePaginationLeft" 
			width="27" height="24" useHandCursor="true" mouseChildren="false" buttonMode="true"/>
		<mx:Button right="8" verticalCenter="0" styleName="whitePaginationRight"
			width="27" height="24" useHandCursor="true" mouseChildren="false" buttonMode="true"/>						
	</mx:HBox>
	<mx:Button label="back to overview" styleName="noSkinButton" fontFamily="Helvetica" fontWeight="bold" buttonMode="true" mouseChildren="false" useHandCursor="true"
		icon="{Resource.GO_BACK_MINI_ARROW}" fontSize="12" x="732" y="16" click="SWFAddress.setValue('/rec/pendingtasks')"/>
	<mx:HTTPService id="jsonService" resultFormat="text" method="GET" result="onGetPaAttributesComparisionResult(event)" fault="Alert.show('onGetPaAttributesComparisionResult ERROR: Please contact administrator')" />
</mx:Canvas>
