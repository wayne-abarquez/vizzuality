<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:header="com.vizzuality.view.header.*" xmlns:footer="com.vizzuality.view.footer.*" addedToStage="gaTracker.debug.minimizedOnStart=true;"
	layout="absolute" backgroundGradientAlphas="[1.0, 1.0]"
	backgroundGradientColors="[#E9F4FF, #D7E8FA]" 
	applicationComplete="registerGlobalKeyHandler()"
	creationComplete="initApp()" xmlns:components="com.google.analytics.components.*" xmlns:map="com.vizzuality.view.map.*">
	<mx:Script>
		<![CDATA[
			import com.google.maps.overlays.Polyline;
			import com.google.maps.overlays.Marker;
			import com.vizzuality.data.MapPosition;
			import com.vizzuality.view.map.overlays.ToolTipOverlay;
			import com.google.maps.InfoWindowOptions;
			import com.vizzuality.data.PA;
			import com.google.maps.LatLng;
			import com.vizzuality.services.DataServices;
			import com.vizzuality.data.WdpaLayer;
			import com.vizzuality.view.map.MapController;
			import com.vizzuality.view.AppStates;
			import asual.SWFAddressEvent;
			import asual.SWFAddress;
			import com.google.maps.MapEvent;
			import com.google.maps.Map;
			import mx.effects.easing.Exponential;
			import mx.events.ResizeEvent;
			import mx.managers.ToolTipManager;
			
			//To control the moving of the left an right screens
			private var isResizing:Boolean=false;
			private var isInLeftState:Boolean=true;
			
			public var map:Map;
			
			private function initApp():void {
				var externalDomains:Array=[
					"farm1.static.flickr.com",
					"farm2.static.flickr.com",
					"farm3.static.flickr.com",
					"farm4.static.flickr.com",
					"ws.geonames.org"];
				for each(var dom:String in externalDomains) {
				    Security.allowDomain(dom);
				    Security.loadPolicyFile("http://"+dom+"/crossdomain.xml");
				    var request:URLRequest = new URLRequest("http://"+dom+"/crossdomain.xml");
				    var loader:URLLoader = new URLLoader();
				    loader.load(request);				
				}					
				
				//Modify Tooltip behaviour so that it show inmediately
				ToolTipManager.showDelay = 0;
				ToolTipManager.hideDelay = 4000;		
				
			}
			
			public function onMapReady():void {				
				//We initialize the SWFAddress
				SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);
			}
			
			private function registerGlobalKeyHandler() :void {
				stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
			}	
			
			private function handleKeyDown(evt:KeyboardEvent) :void {
				if(evt.altKey && evt.keyCode == 240) {
					if (debugArea.visible==true) {
						debugArea.visible=false;
					} else {
						debugArea.visible=true;
						
					}
				}
			}					
			
			private function handleSWFAddress(event:SWFAddressEvent):void {
				
				if(event.pathNames.length>0) {
					//we set the top state
					AppStates.gi().topState = event.pathNames[0];
					
					
					switch(event.pathNames[0]) {
						case(AppStates.WORLD):
							
							//if there was already a set of layers added at world zoom level use them
							if((AppStates.gi().visibleLayers[AppStates.WORLD] as Array).length>0) {
								MapController.gi().updateTileLayers(AppStates.gi().visibleLayers[AppStates.WORLD]);
							} 
							//if there was nothing it is because is the first time we pass this state
							else {
								MapController.gi().updateTileLayers([WdpaLayer.ALL]);
							}
							//control the layer state
							//MapController.gi().updateTileLayersOpacity(1);
							
							//control the map state
							MapController.gi().setMapPosition(AppStates.gi().mapPositions[AppStates.WORLD]);
							
							//Clear not neccessary panes and EventListeners
							MapController.gi().clearPAs();
							MapController.gi().clearOverlays();
							MapController.gi().removeClickListenerForCountries();
							MapController.gi().setClickListenerForAreas();
							
							if(event.pathNames.length>1) {
								AppStates.gi().secondState=event.pathNames[1];		
							} else {
								AppStates.gi().secondState='';								
							}		
													
							break;
							
							
							
						case(AppStates.COUNTRIES):
							//control the layer state
							if((AppStates.gi().visibleLayers[AppStates.COUNTRIES] as Array).length>0) {
								MapController.gi().updateTileLayers(AppStates.gi().visibleLayers[AppStates.COUNTRIES]);
							} else {
								MapController.gi().updateTileLayers([WdpaLayer.COUNTRY_PER_COVERAGE]);
							}
							
							//control the map state
							MapController.gi().setMapPosition(AppStates.gi().mapPositions[AppStates.COUNTRIES]);	

							//control the layer state
							//MapController.gi().updateTileLayersOpacity(1);
							
							//Clear not neccessary panes and EventListeners
							MapController.gi().clearPAs();
							MapController.gi().clearOverlays();
							MapController.gi().removeClickListenerForAreas();											
							MapController.gi().setClickListenerForCountries();											
							
							if(event.pathNames.length>1) {
								AppStates.gi().secondState=event.pathNames[1];
							} else {
								AppStates.gi().secondState='';								
							}
							break;
							
							
						case(AppStates.COUNTRY):
							//control the layer state
							if((AppStates.gi().visibleLayers[AppStates.COUNTRY] as Array).length>0) {
								MapController.gi().updateTileLayers(AppStates.gi().visibleLayers[AppStates.COUNTRY]);
							} else {
								MapController.gi().updateTileLayers([WdpaLayer.ALL]);
							}
							
							//control the map state
							if(AppStates.gi().mapPositions[AppStates.COUNTRY] == null) {
								AppStates.gi().mapPositions[AppStates.COUNTRY] = MapController.gi().getMapPosition();
							} else {
								MapController.gi().setMapPosition(AppStates.gi().mapPositions[AppStates.COUNTRY]);
							}							

							//Clear not neccessary panes and EventListeners
							MapController.gi().clearPAs();
							MapController.gi().clearOverlays();
							MapController.gi().removeClickListenerForCountries();
							MapController.gi().setClickListenerForAreas();
	
	
							if(event.pathNames.length==3) {
								AppStates.gi().activeCountryIsoCode = (event.pathNames[1] as String).toUpperCase();
								AppStates.gi().secondState=event.pathNames[2];
							} 
							else if(event.pathNames.length==2) {
								AppStates.gi().activeCountryIsoCode = (event.pathNames[1] as String).toUpperCase();
								AppStates.gi().secondState='';
							}
							else {
								trace('Wrong URL!');
							}
							break;
							
						case(AppStates.AREA_SELECTOR):
							//control the layer state
							//MapController.gi().updateTileLayers([]);
							MapController.gi().updateTileLayersOpacity(0.3);

							//control the map state
							if(AppStates.gi().mapPositions[AppStates.AREA_SELECTOR] == null) {
								AppStates.gi().mapPositions[AppStates.AREA_SELECTOR] = MapController.gi().getMapPosition();
							} else {
								MapController.gi().setMapPosition(AppStates.gi().mapPositions[AppStates.AREA_SELECTOR]);
							}

							//Clear not neccessary panes and EventListeners
							MapController.gi().clearPAs();
							MapController.gi().clearOverlays();
							MapController.gi().removeClickListenerForAreas();
							MapController.gi().removeClickListenerForCountries();
									
							
							//In this state there must be only 2 parameters in the URL
							if(event.pathNames.length==2) {
								//The second param is lat_lon where the user has click
								var lat:Number = Number((event.pathNames[1] as String).split("_")[0]);
								var lng:Number = Number((event.pathNames[1] as String).split("_")[1]);
								//if there is no areas saved we have to check again.
								if (DataServices.gi().preselectedPAsDic["numElements"]<1) {
									DataServices.gi().getAreasByLatLng(new LatLng(lat,lng));
								} else {
									
									MapController.gi().zoomToBbox(DataServices.gi().preselectedPAsBounds,true);
									
									for (var m:Object in DataServices.gi().preselectedPAsDic) {
										if(m!="numElements") {
											MapController.gi().infowindowPane.addOverlay(m as Marker);
											MapController.gi().addPa(DataServices.gi().preselectedPAsDic[m]);
											var tail:Polyline = new Polyline([
															m.getLatLng(),
															(DataServices.gi().preselectedPAsDic[m] as PA).getCenter()
															]);
											MapController.gi().infowindowPane.addOverlay(tail);				
										}
										
										
									}
									
									
								}
								
								
								AppStates.gi().secondState='';
							}
							else {
								trace('Wrong URL!');
							}							
							
							break;
							
						case(AppStates.PA):
							
							//control the layer state
							if((AppStates.gi().visibleLayers[AppStates.PA] as Array).length>0) {
								MapController.gi().updateTileLayers(AppStates.gi().visibleLayers[AppStates.PA]);
							} else {
								MapController.gi().updateTileLayers([]);
							}

							//control the map state
							if(AppStates.gi().mapPositions[AppStates.PA] != null) {
								MapController.gi().setMapPosition(AppStates.gi().mapPositions[AppStates.PA]);
							} else {
								//AppStates.gi().mapPositions[AppStates.PA] = MapController.gi().getMapPosition();
							}
							mapCanvas.discretLoading.visible=false;

							//remove the possibility to click on the areas
							MapController.gi().removeClickListenerForAreas();		
							MapController.gi().removeClickListenerForCountries();
							
							if(event.pathNames.length==3) {
								AppStates.gi().activePaId = Number(event.pathNames[1]);
								AppStates.gi().secondState=event.pathNames[2];
							} 
							else if(event.pathNames.length==2) {
								AppStates.gi().activePaId = Number(event.pathNames[1]);
								AppStates.gi().secondState='';
							}
							else {
								trace('Wrong URL!');
							}
							break;
							
							
						default:
							//Not recognize params. Move them to the default states
/* 							trace( "Top level state not recognize!" );
							AppStates.gi().topState=AppStates.WORLD;
							AppStates.gi().secondState=AppStates.ABOUT;
							MapController.gi().updateTileLayers([WdpaLayer.ALL]);				
							AppStates.gi().mapPositions[AppStates.WORLD] = MapController.gi().getMapPosition();	 */
							SWFAddress.setValue(AppStates.COUNTRIES+"/"+AppStates.ABOUT);
						
					}
					
				} else {
					SWFAddress.setValue(AppStates.COUNTRIES+"/"+AppStates.ABOUT);
/* 					AppStates.gi().topState=AppStates.WORLD;
					AppStates.gi().secondState=AppStates.ABOUT;	
					MapController.gi().updateTileLayers([WdpaLayer.ALL]);		
					AppStates.gi().mapPositions[AppStates.WORLD] = MapController.gi().getMapPosition();	 */
					
				}
			}	
				

			/**
			 * Toggle between full screen and not full screen.
			 */ 			
			public function toggleFullScreen():void{
	            try {
	            	var tim:Timer;
	                switch (Application.application.stage.displayState) {
	                    case StageDisplayState.FULL_SCREEN:
	                        Application.application.stage.displayState = StageDisplayState.NORMAL;
	                        tim = new Timer(1000,1);
			            	tim.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {	
			            		dispatchEvent(new Event(ResizeEvent.RESIZE));
			            	});
	                        break;
	                    default:
	                        Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
	                        tim = new Timer(1000,1);
			            	tim.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {	
			            		dispatchEvent(new Event(ResizeEvent.RESIZE));
			            	});
	                        
	                        break;
	                }
	            } catch (err:SecurityError) {
	                // ignore
	                trace(err.message);
	            }
			}    
			
			
		]]>
	</mx:Script>
	
	<mx:Style source="com/vizzuality/style/skin/ui.css"/>
	<mx:Style source="com/vizzuality/style/skin/fonts.css"/>
	
	<mx:VBox id="mainVBox" width="100%" height="100%" verticalGap="0">
		<header:Header id="header" />
		<map:MapCanvas id="mapCanvas" width="100%" height="100%" backgroundColor="#A8A8A8"/>
		<!--footer:Footer id="footer"/ -->
	</mx:VBox>
	<mx:Canvas id="debugArea" visible="false" right="5" bottom="40" width="358" height="157" backgroundColor="#FFFFFF" backgroundAlpha="0.66">
		<mx:TextArea left="5" right="5" top="10" bottom="10" backgroundAlpha="0.0" borderStyle="none" id="debuggerArea"/>
		
	</mx:Canvas>
	
 	<components:FlexTracker id="gaTracker" account="UA-7333475-1" mode="AS3" visualDebug="false" /> 	
 	
</mx:Application>
