<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  xmlns:components="com.vizzuality.utils.*" xmlns:view="com.vizzuality.view.*" 
	backgroundColor="#D5E8EC" 
	horizontalScrollPolicy="off" 
	addedToStage="initSWFAddress()" 
	removedFromStage="destroySWFAddress()"
    currentStateChange="setSWFAddress()" xmlns:components1="com.vizzuality.view.components.*">
	<mx:states>
		<mx:State name="Help">
			<mx:SetProperty target="{help1}" name="visible" value="true"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
	    <![CDATA[
	    	import com.vizzuality.events.SliderThumbRelease;
	    	import com.vizzuality.events.SliderChangeEvent;
	    	import com.vizzuality.events.MyEventDispatcher;
	    	import mx.events.CollectionEvent;
	    	import mx.collections.ArrayCollection;
	    	import com.google.maps.MapZoomEvent;
	    	import com.google.maps.MapMoveEvent;
	    	import com.vizzuality.utils.Helper;
	    	import mx.core.Application;
	    	import com.google.maps.MapTypeOptions;
	    	import com.google.maps.MapOptions;
	    	import com.google.maps.interfaces.IMapType;
	    	import com.google.maps.overlays.TileLayerOverlay;
	    	import com.vizzuality.maps.RasterLayer;
	    	import com.vizzuality.utils.Resource;

	    	import swf.SWFAddressEvent;
	    	import swf.SWFAddress;
	    	import com.google.maps.LatLng;
	    	import com.google.maps.Map;
		    import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
		    import com.google.maps.controls.ZoomControl;
		    
		    //variables of GMBA-Map
	        private var rasterLayer:RasterLayer;
	        private var zoom: Number = 2;
	        private var lat: Number = 40.73;
	        private var lon: Number = -3.99;
	        
	        [Bindable] private var elevationValues: ArrayCollection = new ArrayCollection([0,7889]);
	        [Bindable] private var reliefValues: ArrayCollection = new ArrayCollection([0,3889]);
	        [Bindable] private var vegetationValues: ArrayCollection = new ArrayCollection([true,false,false,false,false,false,false,false,false]);
            
            //variables of SWFAddress
            public var path:String = "Map";
            public var depth:int = 1;
                        	
			
            private function initSWFAddress():void {        	
                handleSWFAddress(new SWFAddressEvent(SWFAddressEvent.CHANGE));
                SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);
                MyEventDispatcher.addEventListener(SliderThumbRelease.SLIDER_VALUE_CHANGED, onChangeSliderValues);              
            }
            
            private function onChangeSliderValues(event:SliderThumbRelease):void {
            	elevationValues = new ArrayCollection (event.altitudeRange);
            	reliefValues = new ArrayCollection(event.reliefRange);
            	vegetationValues = event.vegtypes;
            	makeNewURL();
            }
            
            private function destroySWFAddress():void {
                SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);
            }
            
            private function setSWFAddress():void {
	            Helper.setSWFAddress(this, path, depth);        		
            }
            
            private function handleSWFAddress(event:SWFAddressEvent):void {

                if (event.pathNames.length >= depth && event.pathNames[depth - 1] == path) {
                    Helper.handleSWFAddress(this, event, depth);
                 } else { 
                	// Get parameters from URL
                	// First check if is Help page -> NOT YET
                	// if not, get all the parameters relative to the map
                	var mapPoint:Object = new Object();
                	var elevationParams: Object = new Object();
                	var reliefParams: Object = new Object();
                	var vegetationParams: ArrayCollection = new ArrayCollection();
                	
                	if (event.pathNames.length>1) {
						mapPoint = Helper.getPoint(event.pathNames[1] as String);
	                    if (mapPoint.lat!=null) {
	                    	zoom = mapPoint.zoom;
	                    	lat = mapPoint.lat;
	                    	lon = mapPoint.lon;
	                    } else {
	                    	SWFAddress.setValue('/map');
	                    	return;
	                    }
	                    
						if (event.pathNames.length>2) {
	                    	elevationParams = Helper.getSliderParams(event.pathNames[2] as String);
		                    if (elevationParams.min!=null) {
		                    	elevationValues = new ArrayCollection([Number(elevationParams.min),Number(elevationParams.max)]);
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	} 
	                    }
	                    
		    			
		    			if (event.pathNames.length>3) {
	                    	reliefParams = Helper.getSliderParams(event.pathNames[3] as String);
		                   	if (reliefParams.min!=null) {
		                    	reliefValues = new ArrayCollection([Number(reliefParams.min),Number(reliefParams.max)]);
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	}
	                    }
	                    
	                    if (event.pathNames.length>4) {
							vegetationParams = Helper.getVegetationParams(event.pathNames[4] as String);
		                   	if (vegetationParams.length!=0) {
		                   		vegetationValues = new ArrayCollection([false,false,false,false,false,false,false,false,false]);
		                   		for (var i:Number = 0; i< vegetationParams.length; i++) {
		                   			vegetationValues[Number(vegetationParams[i])] = true;
		                   		}
							} else {
	                    		SWFAddress.setValue('/map');
	                    		return;
	                    	}	                    
	                    } 
                	}	
                }
            }
            
	        
		    
	        private function onMapPreinitialize(event:Event):void {
	           var opts:MapOptions = new MapOptions();
	           
	           /*var limitedZoomMapType:IMapType = new MapType(MapType.PHYSICAL_MAP_TYPE.getTileLayers(),
	                                                MapType.PHYSICAL_MAP_TYPE.getProjection(),
	                                                "TerrainLimited",
	                                                new MapTypeOptions({maxResolution: 6, minResolution: 2}));*/
	           
	           //Changes values thanks to URL params                                
	           opts.mapType = MapType.PHYSICAL_MAP_TYPE;
           	   opts.center=new LatLng(lat,lon);
	       	   opts.zoom=zoom;
	       	   
	       	   
	       	   
	           map.setInitOptions(opts);
	           map.addEventListener(MapMoveEvent.MOVE_END,onChangeMap);
	           map.addEventListener(MapZoomEvent.ZOOM_CHANGED,onZoomChange);           	
	        }

		    private function onMapReady(event:Event):void {
			    this.map.addControl(new ZoomControl());
			    
				/* rasterLayer = new RasterLayer("http://vizzuality.tiles.s3.amazonaws.com/gmba_data_raster/|Z|_|X|_|Y|.png",map);
				var tlo:TileLayerOverlay = new TileLayerOverlay(rasterLayer);
				tlo.addEventListener(MapEvent.TILES_LOADED,function(ev:Event):void {
					loadingMessage.visible=false;
				})
				tlo.addEventListener(MapEvent.TILES_LOADED_PENDING,function(ev:Event):void {
					loadingMessage.visible=true;
				})
				map.addOverlay(tlo); */
		    }
		    
		    
		    private function onChangeMap(event:MapMoveEvent):void {
		    	lat = Number(event.latLng.lat().toFixed(2));
		    	lon = Number(event.latLng.lng().toFixed(2));
		    	makeNewURL();
		    }
		    
		    private function onZoomChange(event:MapZoomEvent):void {
		    	zoom = event.zoomLevel;
		    	makeNewURL();
		    }
		    
		    private function makeNewURL():void {
		    	var url: String = '/map/' + zoom + '_' + lat + '_' + lon + '/' + elevationValues[0] + '_' + elevationValues[1] + '/' + reliefValues[0] + '_' + reliefValues[1] + '/';
		    	for (var i:Number=0; i<vegetationValues.length;i++) {
		    		if (vegetationValues[i]) {
		    			if (i==0) {
		    				url+= i;
		    			} else {
		    				url+= '_' + i;
		    			}
		    		}
		    	}
		    	url+='/';
		    	SWFAddress.setValue(url);
		    }
	    ]]>
	</mx:Script>
	
	
	
	<mx:GlowFilter id="sh" alpha="0.3" color="#000000" blurX="20" blurY="20" />
	
	<mx:Canvas top="20" bottom="20" left="45" right="45"  horizontalScrollPolicy="off" filters="{[sh]}">
		<components:GradientCanvas colorsConfiguration="[2]" fillColors="[#333333, #242527]" fillAlphas="[1,1]" gradientRatio="[0,255]" gradientType="linear" angle="90" borderStyle="none" 
			borderThickness="0" top="10" left="10" right="10" bottom="10" topLeftRadius="5" topRightRadius="5" horizontalScrollPolicy="off">

			<mx:VBox verticalGap="0" height="100%" width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<view:Toolbar width="20%" rangeAltitude="{elevationValues}" rangeRelief="{reliefValues}" vegetationValues="{vegetationValues}"/>
				<mx:Canvas backgroundColor="#121213" width="100%" height="100%">
					<mx:HRule top="0" left="0" right="0" strokeColor="#000000" strokeWidth="1"/>
					<mx:HRule top="1" left="0" right="0" strokeColor="#424243" strokeWidth="1" />
					<mx:Image source="{Resource.DOWN_ARROW}" width="16" height="9" top="0" left="21"/>
					<mx:Button left="20" top="25" width="200"  height="30" label="Download data" color="#FFFFFF" fontSize="17" fontWeight="normal"
						useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download"/>
				</mx:Canvas>
			</mx:VBox>
			
			<mx:Canvas backgroundColor="#FFFFFF" top="20" bottom="20" right="20" width="80%" id="canvas1">
				<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mappreinitialize="onMapPreinitialize(event)" mapevent_mapready="onMapReady(event)" key="no-key" top="5" bottom="5" right="5" left="5"/>
				<components1:Help backgroundColor="#000000" top="5" bottom="5" right="5" left="5" visible="false" id="help1"/>	
				<mx:Image source="{Resource.ARROW}"  width="24" height="46" left="-5" top="24"/>
				<mx:Canvas width="95" height="31" borderColor="#FFFFFF" backgroundColor="#FFFFFF" right="10" top="10" id="loadingMessage" visible="true">
					<mx:Label x="20" y="6" text="Loading..."/>
				</mx:Canvas>
			</mx:Canvas>
		</components:GradientCanvas>
	</mx:Canvas>
</mx:Canvas>
