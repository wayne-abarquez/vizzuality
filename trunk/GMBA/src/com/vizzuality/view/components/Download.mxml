<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="477" width="634" backgroundColor="#1A1A1B" backgroundAlpha="1" 
	xmlns:utils="com.vizzuality.utils.*" xmlns:components="com.vizzuality.view.components.*" currentState="" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	
	<mx:states>
		
		<mx:State name="loading">
			<mx:RemoveChild target="{downloadsize1}"/>
			<mx:RemoveChild target="{downloadrepeat1}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:AddChild relativeTo="{canvasDataDownload}" position="lastChild">
				<mx:SWFLoader horizontalCenter="-7" width="30" height="30" source="@Embed('/assets/loaderGray.swf')" id="swfloader1" verticalCenter="0" scaleContent="true"/>
			</mx:AddChild>
	
		</mx:State>
		<mx:State name="processing">
			<mx:RemoveChild target="{label1}"/>
			<mx:RemoveChild target="{vbox1}"/>
			<mx:RemoveChild target="{hbox2}"/>
			<mx:RemoveChild target="{shadowbutton1}"/>
			<mx:AddChild position="lastChild">
				<mx:Label text="We are processing your request" horizontalCenter="0" verticalCenter="-32" color="#FFFFFF" fontSize="15" id="label2"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label text="It could take some minutes. Please be patient." horizontalCenter="0" verticalCenter="-6" color="#FFFFFF" fontSize="12" id="label3"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ProgressBar horizontalCenter="0" verticalCenter="31" label="" minimum="0" maximum="100" enabled="true" indeterminate="true" 
					id="progressbarDownloading"  borderColor="0x1A1A1B" trackColors="[ 0xF5C400, 0x1A1A1B ]" color="0x1A1A1B" themeColor="0xF5C400"/>
			</mx:AddChild>
			<mx:SetProperty name="height" value="407"/>
		</mx:State>
		<mx:State name="ready" basedOn="processing">
			<mx:SetProperty target="{label2}" name="text" value="Your request is ready"/>
			<mx:RemoveChild target="{progressbarDownloading}"/>
			<mx:SetProperty target="{hbox3}" name="y" value="168"/>
			<mx:SetProperty target="{button1}" name="styleName" value="linkButton"/>
			<mx:SetStyle target="{hbox3}" name="horizontalGap" value="0"/>
			<mx:SetStyle target="{hbox3}" name="horizontalCenter" value="0"/>
			<mx:SetStyle target="{label2}" name="verticalCenter" value="-53"/>
			<mx:AddChild position="lastChild">
				<mx:HBox id="hbox3" y="170" horizontalCenter="0" horizontalGap="0">
					<mx:Button label="Click here"  id="button1" paddingLeft="0" paddingRight="0" paddingBottom="2" paddingTop="0" styleName="linkButton" click="navigateToDownload()"/>
					<mx:Label text="if your download does not start automatically in 3 seconds."  id="label5" color="#FFFFFF" fontSize="12"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<utils:ShadowButton height="32" label="Close window" color="#FFFFFF" fontSize="17" fontWeight="normal"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download" y="243" horizontalCenter="0" click="MyEventDispatcher.onCloseDownloadWindow()" id="shadowbutton2"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label3}"/>
			<mx:SetProperty name="height" value="407"/>
		</mx:State>
		<mx:State name="error" basedOn="ready">
			<mx:SetProperty target="{label2}" name="text" value="Sorry, have been an error."/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{label5}"/>
			<mx:RemoveChild target="{hbox3}"/>
			<mx:RemoveChild target="{shadowbutton2}"/>
			<mx:SetStyle target="{label2}" name="verticalCenter" value="30"/>
			<mx:SetProperty target="{label2}" name="height" value="97.509094"/>
			<mx:AddChild position="lastChild">
				<mx:Label text="Please retry later." horizontalCenter="0" verticalCenter="49" color="#FFFFFF" fontSize="15" id="label0" height="97.509094"/>
			</mx:AddChild>
			<mx:SetProperty name="width" value="376"/>
			<mx:SetProperty name="height" value="236"/>
		</mx:State>
		<mx:State name="bigDataNotify">
			<mx:RemoveChild target="{downloadsize1}"/>
			<mx:RemoveChild target="{downloadrepeat1}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{hbox2}"/>
			
			<mx:AddChild relativeTo="{canvasDataDownload}" position="lastChild">
				<mx:Label x="91" y="33" text="Sorry, this is too much data to prepare download." fontSize="15" color="#FFFFFF" id="id_notify_0"  width="367" height="23"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvasDataDownload}" position="lastChild">
				<mx:Label x="90" y="53" text="You can" fontSize="15" color="#FFFFFF" id="id_notify_1"  width="122" height="23"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvasDataDownload}" position="lastChild">
				<mx:Image x="22" y="30" width="58" height="55" id="image1" source="assets/warning.png"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:HBox  bottom="30" left="30" width="412" borderStyle="none" horizontalGap="0" horizontalScrollPolicy="off" id="hbox0">
					<mx:CheckBox id="terms0" label="" cornerRadius="10"  click="activateDownload()" selected="false" useHandCursor="true" mouseChildren="false" buttonMode="true"  enabled="false"/>
					<mx:Label text="Before continue, you must accept the" fontSize="11" color="#FFFFFF" paddingLeft="3" id="label4" enabled="false"/>
					<mx:Button label="terms and conditions" styleName="linkButton" paddingLeft="0" paddingRight="0" useHandCursor="true" buttonMode="true" mouseChildren="false" paddingTop="0" paddingBottom="3" click="navigateToURL(new URLRequest('../html/termsAndConditions.html'))" id="button0" enabled="false"/>
					<mx:Label text="of the service" fontSize="11" color="#FFFFFF" id="label8" enabled="false"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvasDataDownload}" position="lastChild">
				<mx:Button label="download the whole" styleName="linkButton" paddingLeft="0" paddingRight="0" useHandCursor="true" buttonMode="true" mouseChildren="false" paddingTop="0" paddingBottom="3" click="navigateToURL(new URLRequest(''))" id="button4" x="148" y="55" fontSize="15"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{image1}" position="before">
				<mx:Label x="294" y="53" text="dataset or turther refine the search" fontSize="15" color="#FFFFFF" id="id_notify_2"  width="264" height="23"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="nodata_world" basedOn="bigDataNotify">
			<mx:SetProperty target="{id_notify_0}" name="text" value="Sorry, there is no data for yor filter criteria"/>
			<mx:SetProperty target="{id_notify_1}" name="text" value="Try"/>
			<mx:RemoveChild target="{id_notify_2}"/>
			<mx:SetProperty target="{button4}" name="label" value="expanding filter criterias."/>
			<mx:SetProperty target="{button4}" name="x" value="116"/>
			<mx:RemoveChild target="{hbox4}"/>
			<mx:AddChild relativeTo="{canvas2}" position="lastChild">
				<mx:HBox  left="20" right="20" top="21" id="hbox5" borderStyle="none">
					<components:DownloadType id="disabled_download_world" world_type="World" selected_item="false" disabled_item="true" />
					<components:DownloadType id="disabled_download_bound" world_type="Bound" selected_item="false" disabled_item="true"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="nodata_bbox" basedOn="bigDataNotify">
			<mx:SetProperty target="{id_notify_0}" name="text" value="Sorry, there is no data for your filters"/>
			<mx:SetProperty target="{id_notify_1}" name="text" value="If you want"/>
			<mx:SetProperty target="{id_notify_2}" name="text" value="or further refine the search"/>
			<mx:SetProperty target="{button4}" name="label" value="try with world scale"/>
			<mx:SetProperty target="{button4}" name="x" value="167"/>
			<mx:SetProperty target="{id_notify_2}" name="x" value="308"/>
			<mx:SetEventHandler target="{button4}" name="click"/>
		</mx:State>
		
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import mx.core.Application;
			import flash.sampler.NewObjectSample;
			import com.vizzuality.view.GMBAMap;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import com.adobe.serialization.json.JSON;
			import com.vizzuality.view.Toolbar;
			import com.google.maps.LatLngBounds;
			import mx.collections.ArrayCollection;
			import com.vizzuality.events.ChangeMapZoom;
			import gs.TweenLite;
			import com.vizzuality.utils.Resource;
			import com.vizzuality.events.MyEventDispatcher;
			
			public var elevationValues: ArrayCollection;
			public var reliefValues: ArrayCollection;
			public var vegetationValues: ArrayCollection;
			public var chooseTaxon: Object;
			private var urlToDownload:String;
			private var taxonRank:String;
			private var tvzCode:Array = [];
			private var searchingWorld:Boolean = true;
			private var downloadWorldScale:Boolean = false;
			
			public var bound: LatLngBounds;
			public var zoom: Number;
			
			private var serviceURL:String = "http://204.236.250.31";
			private var downloadInProcess:Boolean = false;
			private var downloadURL:String;
			private var timer:Timer;
			
			private var widthMap:Number = 0;
			private var heightMap:Number = 0;
			private var widthToolBar:Number = 0;
			
			private var xDownload:Number;
			
			// All World
			private var minLatitude:String = "-90";
			private var maxLatitude:String = "90";
			private var minLongitude:String = "-179.9999";
			private var maxLongitude:String = "179.9999";
			
			
			/* private var minCellId:Number = 0;	
			private var maxCellId:Number = 37324799; */
			
			[Bindable]private var ocurrences:Number;
			[Bindable]private var observations:Number;
			[Bindable]private var specimens:Number;
			[Bindable]private var providers:Number;
			[Bindable]private var downloadSize:String = "0MB";
			
			
			public function setPosition(widthMap:Number, heightMap:Number, widthToolBar:Number):void{
				this.x = (widthMap / 2) - (this.width / 2) + widthToolBar - 8;
				this.y = (heightMap / 2) - (this.height / 2);
				
				this.widthMap = widthMap;
				this.heightMap = heightMap;
				this.widthToolBar = widthToolBar;
				
			}			
			
			// TODO: Change the url
			public function downloadAllData():void{
				
				navigateToURL(new URLRequest(""),"_blank");
				
				Application.application.gmbaMap.tracker.trackPageview( "/download/alldata");
				
			}
						
			public function setCriteriaValues():void{
				
				
			 	id_elevation_filter0.text = elevationValues[0];
			 	var longTextFilter:Number = elevationValues[0].toString().length;
				arrowRangeElevation.x = id_elevation_filter0.x + (longTextFilter) * 8 + 10;
				
				
				
				id_elevation_filter1.text = elevationValues[1];
				id_elevation_filter1.x = arrowRangeElevation.x + arrowRangeElevation.height + 10;
				
				id_relief_filter0.text = reliefValues[0];
				
				longTextFilter = reliefValues[0].toString().length;
				arrowRangeRelief.x = id_relief_filter0.x + (longTextFilter) * 8 + 10;
				
				id_relief_filter1.text = reliefValues[1];
				id_relief_filter1.x = arrowRangeRelief.x + arrowRangeRelief.height + 10; 
				
				if (chooseTaxon.id != null)
					id_taxon_result.text = chooseTaxon.labelField;
				else{
					id_taxon_result.text = "ALL TAXA";
					//taxonRank = "species";	// ASK TO TIM, WHEN ALL TAXA IS SELECTED, WHAT IS THE TAXONRANK
				}
					
				var numberVegTypes:Number = 0;
								
				if (vegetationValues.length != 0) {
					
					if (vegetationValues[0]){ 
						numberVegTypes = vegetationValues.length - 1;
						tvzCode=[1,2,3,4,5,6,7];
					}
					else {
						for (var n:Number = 1; n < vegetationValues.length; n++){
							if (vegetationValues[n]){
								numberVegTypes++;
								tvzCode.push(n);	// Set the tvzCode
							} 
						}	
					}
				}
				
				setDownloadBox();
				id_number_veg_types.text = "" +numberVegTypes;
				
				initSearch();
				
			} 
			
			private function initSearch(searchWorldScale:Boolean = false):void{
				
				this.terms.selected = false;
				this.shadowbutton1.enabled = false;
				
				ppApiService.addEventListener(ResultEvent.RESULT,onServiceSearchResult);
				ppApiService.addEventListener(FaultEvent.FAULT,onErrorLoading);
				 
 				ppApiService.url= serviceURL + "/service/search";
				
				if (!searchWorldScale) {
					minLatitude = Application.application.gmbaMap.getMinLatitude();
					maxLatitude = Application.application.gmbaMap.getMaxLatitude();
					minLongitude = Application.application.gmbaMap.getMinLongitude();
					maxLongitude = Application.application.gmbaMap.getMaxLongitude();3
					downloadWorldScale = false;
				}
				else {
					// ALL WORLD
					minLatitude = "-90";
					maxLatitude = "90";
					minLongitude = "-179.9999";
					maxLongitude = "179.9999";
					downloadWorldScale = true;
					
				}	
				
				if (chooseTaxon.id != null) {
					
					var taxonValue:Number;
									
					taxonValue = (chooseTaxon.id) as Number;
					taxonRank = (chooseTaxon.type) as String;
					
					ppApiService.send({
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],
						taxonId:taxonValue,
						tvzCode:tvzCode,
						minLongitude:minLongitude,
						maxLongitude:maxLongitude,
						minLatitude:minLatitude,
						maxLatitude:maxLatitude
					});
					
					Application.application.gmbaMap.tracker.trackPageview( "/search/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/taxonId="+taxonValue+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );
				}
				else {	// ALL TAXA
					ppApiService.send({
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],
						tvzCode:tvzCode,
						minLongitude:minLongitude,
						maxLongitude:maxLongitude,
						minLatitude:minLatitude,
						maxLatitude:maxLatitude
					});
					Application.application.gmbaMap.tracker.trackPageview( "/search/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );
	
				}
 				if (this.currentState != "nodata_bbox")	currentState="loading";
			}
			
			private function onCreationComplete():void {
				 
				//MyEventDispatcher.addEventListener(ChangeMapZoom.CHANGED, onChangeMapZoom);
				
			}	
			
			private function onErrorLoading(event:FaultEvent):void{
				
				//download.setPosition(map.width, map.height, toolBar.width, toolBar.height); 
				//download.visible=true;
				
				this.x = (widthMap / 2) - (this.width / 2) + widthToolBar - 8;
				this.y = (heightMap / 2) - (this.height / 2);
				currentState="error";
					
				
				Application.application.gmbaMap.tracker.trackPageview( "/error/search/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );
				
				ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);
				ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
			}
			
			// Decoding the result
			 private function onServiceSearchResult(event:ResultEvent):void {
				
				var res:Object = JSON.decode(event.result as String);
				
				this.observations = (res.observation) as Number;
				this.specimens = (res.specimen) as Number;
				this.providers = (res.resources) as Number;
				this.ocurrences = (res.total) as Number;
				
				// Our estimation -> 1 ocurrence = 10KB
				var sizeDownloading:String = ((this.ocurrences * 63) / 1024).toPrecision(3);
				
				if (this.ocurrences > 0) {
					//var sizeDownloading:String = (this.ocurrences * 39).toPrecision(3);
					
					// ¿MB?, ¿KB?			
					if (sizeDownloading.length > 5){
						this.downloadSize = sizeDownloading.substring(0,sizeDownloading.length - 3);
						this.downloadSize += "MB"; 						  
					} 			
					else{
						this.downloadSize = sizeDownloading + "KB"; 						  
					} 			
									
					if (this.ocurrences > 250000) {
						
						this.currentState = "bigDataNotify";
						ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);						
					}
					else{
						canvasDataDownload.alpha = 0.0;				
						this.currentState = "";
						TweenLite.to(canvasDataDownload,0.5,{alpha:1.0});
						
						ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);
					}
				}
				else {
					
					if (searchingWorld) {
						this.currentState = "nodata_world";
						
						ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);
						ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
					}
					else {
						searchingWorld = true;
						
						this.currentState = "nodata_bbox";
						
						ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);
						ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
						
						// 5 seconds after, will start the search on the world
						TweenLite.delayedCall(3,initSearch,[true]);
					}
				}				
				
			} 
			
			private function setDownloadBox(): void {
				if (Number(Application.application.gmbaMap.getZoom())<=2) {
					download_world.selected_item = true;
					download_bound.selected_item = false;
					searchingWorld = true;
				} else {
					download_world.selected_item = false;
					download_bound.selected_item = true;
					searchingWorld = false;
				}
			}
			
			private function windowDownloadTransition():void{
				downloadInProcess = false;
				
				this.x = Application.application.width;
				
				currentState = 'processing';
				
				TweenLite.to(this, 0.3, {x:xDownload});
				
				// Begin to download the data
				ppApiService.addEventListener(ResultEvent.RESULT,onBeginToDownload);
				
				ppApiService.addEventListener(FaultEvent.FAULT,onErrorDownloading);
				 
 				ppApiService.url= serviceURL + "/service/download";
				
				if (!downloadWorldScale) {
					minLatitude = Application.application.gmbaMap.getMinLatitude();
					maxLatitude = Application.application.gmbaMap.getMaxLatitude();
					minLongitude = Application.application.gmbaMap.getMinLongitude();
					maxLongitude = Application.application.gmbaMap.getMaxLongitude();
				}
				else {
					// ALL WORLD
					minLatitude = "-90";
					maxLatitude = "90";
					minLongitude = "-179.9999";
					maxLongitude = "179.9999";
				}	
	
				
				if (chooseTaxon.id != null) {
					var taxonValue:Number;
					
					taxonValue = (chooseTaxon.id) as Number;
					taxonRank = (chooseTaxon.type) as String;
					
					ppApiService.send({
						rank:taxonRank,
						tvzCode:tvzCode,
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],	
						taxonId:taxonValue,
						minLongitude:minLongitude,
						maxLongitude:maxLongitude,
						minLatitude:minLatitude,
						maxLatitude:maxLatitude
					});
					Application.application.gmbaMap.tracker.trackPageview( "/download/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/taxonId="+taxonValue+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude+"/rank="+taxonRank );

				}
				else {	// ALL TAXA
						ppApiService.send({
						tvzCode:tvzCode,
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],	
						minLongitude:minLongitude,
						maxLongitude:maxLongitude,
						minLatitude:minLatitude,
						maxLatitude:maxLatitude
					});
					Application.application.gmbaMap.tracker.trackPageview( "/download/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );
				}
				
			}
			
			private function initDownload():void {
				xDownload = this.x;
				TweenLite.to(this, 0.3, {x:-(this.x+this.width), onComplete:windowDownloadTransition});				
   
 			}
 			
 			private function onErrorDownloading(event:FaultEvent):void{
				
				// Center the window
				this.x = (widthMap / 2) - (376 / 2) + widthToolBar - 8;
				this.y = (heightMap / 2) - (236 / 2);
				currentState="error";
	
				Application.application.gmbaMap.tracker.trackPageview( "/error/download/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );

				ppApiService.removeEventListener(ResultEvent.RESULT,onBeginToDownload);
				ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);

			}
			
			private function onBeginToDownload(event:ResultEvent):void {
				
				var res:Object = JSON.decode(event.result as String);
				
				downloadURL = serviceURL + (res.url) as String;
				
				ppApiService.removeEventListener(ResultEvent.RESULT,onBeginToDownload);
				ppApiService.addEventListener(ResultEvent.RESULT,checkStatus);
				
				downloadInProcess = true;
				ppApiService.url= downloadURL;
				
				// After 2 minutes, the timer will stop			
				timer = new Timer(2000,0);
				timer.addEventListener(TimerEvent.TIMER,ppApiService.send);
				//timer.addEventListener(TimerEvent.TIMER_COMPLETE,errorDownloading);
				timer.start();
				
			}
			
			/* private function errorDownloading(event:TimerEvent):void{
				currentState="error";	

				ppApiService.removeEventListener(ResultEvent.RESULT,checkStatus);
				timer.stop();
				timer.removeEventListener(TimerEvent.TIMER,ppApiService.send);
				timer.removeEventListener(TimerEvent.TIMER_COMPLETE,errorDownloading);
			}
			 */
			private function removeCurrentEvent():void{
				if (ppApiService != null){
					ppApiService.removeEventListener(ResultEvent.RESULT,checkStatus);
					ppApiService.removeEventListener(ResultEvent.RESULT,onBeginToDownload);
					ppApiService.removeEventListener(ResultEvent.RESULT,onServiceSearchResult);
					ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);					
				}
				
				if (timer !=null){
					timer.removeEventListener(TimerEvent.TIMER,ppApiService.send);
					//timer.removeEventListener(TimerEvent.TIMER_COMPLETE,errorDownloading);	
				}
			}
			
			private function checkStatus(event:ResultEvent):void{
				if (downloadInProcess) {
					
					var res:Object = JSON.decode(event.result as String);
					
					if (res.status == "complete"){
						downloadInProcess = false;
						
						timer.stop();
						timer.removeEventListener(TimerEvent.TIMER,ppApiService.send);
						//timer.removeEventListener(TimerEvent.TIMER_COMPLETE,errorDownloading);
						
						urlToDownload = serviceURL + (res.url) as String;
						
						//progressbarDownloading.source = 
						
						navigateToURL(new URLRequest(urlToDownload),"_blank");	
						
						currentState = "ready";
						
						Application.application.gmbaMap.tracker.trackPageview( "/download/ready/minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
							"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude );
							
						ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
					}
				}
			}

			private function clickToDownloadWorld():void{
				download_world.selected_item=true; 
				download_bound.selected_item=false;
				searchingWorld = true;
				initSearch(true);
			}
			
			private function clickToDownloadBBox():void{
				download_world.selected_item=false; 
				download_bound.selected_item=true;
				searchingWorld = false;
				initSearch();
			}
			
			private function navigateToDownload():void{
				navigateToURL(new URLRequest(urlToDownload),"_blank");
				
				var parameters:String ="";
				parameters = "minElevation="+elevationValues[0]+"/maxElevation="+elevationValues[1]+
					"/minRelief="+reliefValues[0]+"/maxRelief="+reliefValues[1]+"/tvzCode="+tvzCode+"/minLongitude="+minLongitude+"/maxLongitude)="+maxLongitude+"/minLatitude="+minLatitude+"/maxLatitude="+maxLatitude;
				
				Application.application.gmbaMap.tracker.trackPageview( "/download/"+parameters);
						
			}
			
			private function activateDownload():void{
				if (shadowbutton1.enabled == true)
					shadowbutton1.enabled = false;
				else
					shadowbutton1.enabled = true;
			}
			
		]]>
	</mx:Script>
	
	<mx:HTTPService id="ppApiService" method="GET" resultFormat="text" fault="trace('error')" />
	
	<mx:Button  label="X" color="#FFFFFF" styleName="nullButton" textDecoration="normal" width="30" right="3" top="6" toolTip="Close" useHandCursor="true" 
		buttonMode="true" mouseChildren="false" click="MyEventDispatcher.onCloseDownloadWindow(); removeCurrentEvent(); currentState = '';  "/>
	
	<mx:VBox left="30" right="30" top="35" verticalGap="0" id="vbox1">
		<mx:Label text="SCOPE AND SUMMARY OF YOUR DATA" color="#FFFFFF" fontWeight="normal" fontSize="13"  width="100%" height="23" id="label1"/>
		<mx:Spacer height="5" />
		<mx:Canvas height="74" width="574" styleName="bkgTopDownload" id="canvasTopDownload">
			<mx:Label x="10" y="8" text="70" fontSize="17" color="#FFFFFF" id="id_elevation_filter0"/>
			<mx:Image id="arrowRangeElevation" x="50" y="18" source="assets/arrowRange.png" />
			<mx:Label x="66" y="8" text="70" fontSize="17" color="#FFFFFF" id="id_elevation_filter1" />
			<mx:Label x="10" y="30" text="ELEVATION RANGE" fontSize="11" color="#4D4D4D" id="elevationLabel" />
			
			<mx:Label x="132" y="8" text="130" fontSize="17" color="#FFFFFF" id="id_relief_filter0" />
			<mx:Image id="arrowRangeRelief" x="183" y="18" source="assets/arrowRange.png" />
			<mx:Label x="200" y="8" text="451" fontSize="17" color="#FFFFFF" id="id_relief_filter1" />
			<mx:Label x="132" y="30" text="ROUGHNESS RANGE" fontSize="11" color="#4D4D4D" id="roughnessLabel" />
			
			<mx:Label x="259" y="8" text="Number" fontSize="17" color="#FFFFFF" id="id_number_veg_types"  width="100.33333" height="23"/>
			<mx:Label x="259" y="30" text="VEGETATION TYPES" fontSize="11" color="#4D4D4D" id="vegetationLabel" />
			
			<mx:Label x="384" y="8" text="ALL TAXA" fontSize="17" color="#FFFFFF" id="id_taxon_result"  width="180" height="23"/>
			<mx:Label x="384" y="30" text="TAXON SELECTED" fontSize="11" color="#4D4D4D" id="taxonSelectedLabel" />
		</mx:Canvas>
	
		<mx:Canvas height="135" width="574" backgroundColor="#0D0D0D" id="canvas2" horizontalScrollPolicy="off">
			
		
			<mx:HBox  left="20" right="20" top="21" id="hbox4" borderStyle="none">
				<components:DownloadType id="download_world" click="clickToDownloadWorld()" world_type="World" selected_item="false" />
				<components:DownloadType id="download_bound" click="clickToDownloadBBox()" world_type="Bound" selected_item="true" />
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas width="574" height="118" backgroundColor="#121213" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="canvasDataDownload" top="0" borderStyle="none">
			<mx:HBox horizontalGap="0" right="20" left="20" top="30" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="hbox1">
				<components:DownloadSize  label_number="{downloadSize}" id="downloadsize1" />
				<components:DownloadRepeat label_number="{ocurrences}" label_text="OCCURENCES" id="downloadrepeat1"/>
				<components:DownloadRepeat label_number="{observations}" label_text="OBSERVATIONS"  id="downloadrepeat2"/>
				<components:DownloadRepeat label_number="{specimens}" label_text="SPECIMENS"  id="downloadrepeat3"/>
				<components:DownloadRepeat label_number="{providers}" label_text="PROVIDERS" bar="false" id="downloadrepeat4"/>
			</mx:HBox>
			<mx:Image id="vertexDownload" width="574" source="assets/vertexDownload.jpg" height="29" y="-7"/>
			
		</mx:Canvas>
	</mx:VBox>
	
	<mx:HBox  bottom="30" left="30" width="412" borderStyle="none" horizontalGap="0" horizontalScrollPolicy="off" id="hbox2">
		<mx:CheckBox id="terms" label="" cornerRadius="10"  click="activateDownload()" selected="false" useHandCursor="true" mouseChildren="false" buttonMode="true" />
		<mx:Label text="Before continue, you must accept the" fontSize="11" color="#FFFFFF" paddingLeft="3" id="label6"/>
		<mx:Button label="terms and conditions" styleName="linkButton" paddingLeft="0" paddingRight="0" useHandCursor="true" buttonMode="true" mouseChildren="false" paddingTop="0" paddingBottom="3" click="navigateToURL(new URLRequest('../html/termsAndConditions.html'))" id="button2"/>
		<mx:Label text="of the service" fontSize="11" color="#FFFFFF" id="label7"/>
	</mx:HBox>	
	<utils:ShadowButton height="32" label="Download" color="#FFFFFF" fontSize="17" fontWeight="normal" click="initDownload()"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download"  right="30" bottom="30" width="150" id="shadowbutton1" enabled="false"/>
</mx:Canvas>
