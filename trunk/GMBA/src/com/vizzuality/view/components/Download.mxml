<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="477" width="634" backgroundColor="#1A1A1B" backgroundAlpha="1" 
	xmlns:utils="com.vizzuality.utils.*" xmlns:components="com.vizzuality.view.components.*" currentState="">
	
	<mx:states>
		
		<mx:State name="loading">
			<mx:RemoveChild target="{downloadsize1}"/>
			<mx:RemoveChild target="{downloadrepeat1}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:SWFLoader horizontalCenter="0" verticalCenter="6" width="30" height="30" source="@Embed('/assets/loaderGray.swf')"/>
			</mx:AddChild>
	
		</mx:State>
		<mx:State name="processing">
			<mx:RemoveChild target="{label1}"/>
			<mx:RemoveChild target="{vbox1}"/>
			<mx:RemoveChild target="{hbox2}"/>
			<mx:RemoveChild target="{shadowbutton1}"/>
			<mx:AddChild position="lastChild">
				<mx:Label text="We are processing your request" horizontalCenter="0" verticalCenter="-32" color="#FFFFFF" fontSize="25" id="label2"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label text="It could take some minutes. Please be patient." horizontalCenter="0" verticalCenter="-6" color="#FFFFFF" fontSize="12" id="label3"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ProgressBar horizontalCenter="0" verticalCenter="31" color="#FFFFFF" label="" minimum="0" maximum="100" enabled="true" id="progressbarDownloading" />
			</mx:AddChild>
			<mx:SetProperty name="height" value="407"/>
		</mx:State>
		<mx:State name="ready" basedOn="processing">
			<mx:SetProperty target="{label2}" name="text" value="Your request is ready"/>
			<mx:RemoveChild target="{progressbarDownloading}"/>
			<mx:SetProperty target="{hbox3}" name="y" value="168"/>
			<mx:SetProperty target="{button1}" name="styleName" value="linkButton"/>
			<mx:SetStyle target="{hbox3}" name="horizontalGap" value="0"/>
			<mx:SetStyle target="{hbox3}" name="horizontalCenter" value="0"/>
			<mx:SetStyle target="{label2}" name="verticalCenter" value="-53"/>
			<mx:AddChild position="lastChild">
				<mx:HBox id="hbox3" y="170" horizontalCenter="0" horizontalGap="0">
					<mx:Button label="Click here"  id="button1" paddingLeft="0" paddingRight="0" paddingBottom="2" paddingTop="0" styleName="linkButton" click="navigateToDownload()"/>
					<mx:Label text="if your download does not start automatically in 3 seconds."  id="label5" color="#FFFFFF" fontSize="12"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<utils:ShadowButton height="32" label="Create another request" color="#FFFFFF" fontSize="17" fontWeight="normal"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download" y="243" horizontalCenter="0" click="MyEventDispatcher.onCloseDownloadWindow()"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label3}"/>
			<mx:SetProperty name="height" value="407"/>
		</mx:State>
		<mx:State name="error" basedOn="ready">
			<mx:SetProperty target="{label2}" name="text" value="Have been a error"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{label5}"/>
			<mx:RemoveChild target="{hbox3}"/>
		</mx:State>
	</mx:states>
	
	
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import mx.core.Application;
			import flash.sampler.NewObjectSample;
			import com.vizzuality.view.GMBAMap;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import com.adobe.serialization.json.JSON;
			import com.vizzuality.view.Toolbar;
			import com.google.maps.LatLngBounds;
			import mx.collections.ArrayCollection;
			import com.vizzuality.events.ChangeMapZoom;
			import gs.TweenLite;
			import com.vizzuality.utils.Resource;
			import com.vizzuality.events.MyEventDispatcher;
			
			public var elevationValues: ArrayCollection;
			public var reliefValues: ArrayCollection;
			public var vegetationValues: ArrayCollection;
			public var chooseTaxon: Object;
			private var urlToDownload:String;
			private var taxonRank:String;
			private var tvzCode:Array = [];
			
			public var bound: LatLngBounds;
			public var zoom: Number;
			
			private var serviceURL:String = "http://204.236.250.31";
			private var downloadInProcess:Boolean = false;
			private var downloadURL:String;
			private var timer:Timer;
			
			// All TAXA
			private var taxonId_allTaxa:Number = 14706247;
			
			[Bindable]private var ocurrences:Number;
			[Bindable]private var observations:Number;
			[Bindable]private var specimens:Number;
			[Bindable]private var providers:Number;
			[Bindable]private var downloadSize:String = "0MB";
			
			
			public function setPosition(widthMap:Number, heightMap:Number, widthToolBar:Number, heightToolBar:Number):void{
				this.x = (widthMap / 2) - (this.width / 2) + widthToolBar - 8;
				this.y = (heightMap / 2) - (this.height / 2);
				
			}			
			
			public function setCriteriaValues():void{
				
			 	id_elevation_filter0.text = elevationValues[0];
				id_elevation_filter1.text = elevationValues[1];
				
				id_relief_filter0.text = reliefValues[0];
				id_relief_filter1.text = reliefValues[1];
				
				if (chooseTaxon.id != null)
					id_taxon_result.text = chooseTaxon.labelField;
				else{
					id_taxon_result.text = "ALL TAXA";
					taxonRank = "species";	// ASK TO TIM, WHEN ALL TAXA IS SELECTED, WHAT IS THE TAXONRANK
				}
					
				var numberVegTypes:Number = 0;
								
				if (vegetationValues.length != 0) {
					
					if (vegetationValues[0]){ 
						numberVegTypes = vegetationValues.length - 1;
						tvzCode=[1,2,3,4,5,6,7];
					}
					else {
						for (var n:Number = 1; n < vegetationValues.length; n++){
							if (vegetationValues[n]){
								numberVegTypes++;
								tvzCode.push(n);	// Set the tvzCode
							} 
						}	
					}
				}
				
				id_number_veg_types.text = "" +numberVegTypes;
				
				initLoading();
				
			} 
			
			private function initLoading():void{
				
				this.terms.selected = false;
				this.shadowbutton1.enabled = false;
				
				ppApiService.addEventListener(ResultEvent.RESULT,onServiceResult);
				
				ppApiService.addEventListener(FaultEvent.FAULT,onErrorLoading);
				 
 				ppApiService.url= serviceURL + "/service/search";
				
				var minCellId:Number = Application.application.gmbaMap.getMinCellId();
				var maxCellId:Number = Application.application.gmbaMap.getMaxCellId();
				
				if (chooseTaxon.id != null) {
					
					var taxonValue:Number;
									
					taxonValue = (chooseTaxon.id) as Number;
					taxonRank = (chooseTaxon.type) as String;
					
					ppApiService.send({
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],
						taxonId:taxonValue,
						tvzCode:tvzCode,
						minCellId:minCellId,			
						maxCellId:maxCellId	
					});
				}
				else {	// ALL TAXA
					ppApiService.send({
						taxonId:taxonId_allTaxa,	// REMOVE THIS WHEN TIM CHANGE THE SERVICE
					    minElevation:elevationValues[0],
						maxElevation:elevationValues[1],
						minRelief:reliefValues[0],
						maxRelief:reliefValues[1],
						tvzCode:tvzCode,
						minCellId:minCellId,			
						maxCellId:maxCellId	
					});	
				}
				
				
				
			
 				//taxonId=14706247&minElevation=-4&maxElevation=200000&minRelief=0&maxRelief=2000&taxonId=14706247&minCellId=0&maxCellId=37324799
 				
				currentState="loading";	
				
			}
			
			private function onCreationComplete():void {
				 
				MyEventDispatcher.addEventListener(ChangeMapZoom.CHANGED, onChangeMapZoom);
				
			}	
			
			private function onErrorLoading(event:FaultEvent):void{
				currentState="error";	

				ppApiService.removeEventListener(ResultEvent.RESULT,onServiceResult);
				ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);

			}
			
			
			// Decoding the result
			 private function onServiceResult(event:ResultEvent):void {
				
				var res:Object = JSON.decode(event.result as String);
				
				this.observations = (res.observation) as Number;
				this.specimens = (res.specimen) as Number;
				this.providers = (res.resources) as Number;
				this.ocurrences = (res.total) as Number;
				
				// Our estimation -> 1 ocurrence = 10KB
				var sizeDownloading:String = ((this.ocurrences * 39) / 1000).toPrecision(3);
				
				//var sizeDownloading:String = (this.ocurrences * 39).toPrecision(3);
				
				// ¿MB?, ¿KB?, ¿Bytes?			
				if (sizeDownloading.length > 6){
					this.downloadSize = sizeDownloading.substring(0,sizeDownloading.length - 3);
					this.downloadSize += "MB"; 						  
				} 			
				else{
					this.downloadSize = sizeDownloading + "KB"; 						  
				} 			
								
				this.currentState = "";
				
				ppApiService.removeEventListener(ResultEvent.RESULT,onServiceResult);
				ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
				
			} 
			
			private function onChangeMapZoom(ev:ChangeMapZoom): void {
				if (Number(ev.zoom)<=2) {
					download_world.selected_item = true;
					download_bound.selected_item = false;
				} else {
					download_world.selected_item = false;
					download_bound.selected_item = true;
				}
			}		
			
			private function onClickToDownload():void {

				downloadInProcess = false;
				
				currentState = 'processing';
				
				// Begin to download the data
				ppApiService.addEventListener(ResultEvent.RESULT,onBeginToDownload);
				ppApiService.addEventListener(FaultEvent.FAULT,onErrorDownloading);
				 
 				ppApiService.url= serviceURL + "/service/download";
				
				var minCellId:Number = Application.application.gmbaMap.getMinCellId();
				var maxCellId:Number = Application.application.gmbaMap.getMaxCellId();
				
				if (chooseTaxon.id != null) {
					var taxonValue:Number;
					
					taxonValue = (chooseTaxon.id) as Number;
					taxonRank = (chooseTaxon.type) as String;
					
					ppApiService.send({
						rank:taxonRank,
						tvzCode:tvzCode,
					    //minElevation:elevationValues[0],
						//maxElevation:elevationValues[1],
						//minRelief:reliefValues[0],
						//maxRelief:reliefValues[1],	
						taxonId:taxonValue,
						minCellId:minCellId,	// Datos de prueba
						maxCellId:maxCellId		// Datos de prueba
					});
				}
				else {	// ALL TAXA
						ppApiService.send({
						tvzCode:tvzCode,
						rank:taxonRank, // REMOVE THIS WHEN TIM CHANGE THE SERVICE
						taxonId:taxonId_allTaxa,	// REMOVE THIS WHEN TIM CHANGE THE SERVICE		
					    //minElevation:elevationValues[0],
						//maxElevation:elevationValues[1],
						//minRelief:reliefValues[0],
						//maxRelief:reliefValues[1],	
						minCellId:minCellId,	// Datos de prueba
						maxCellId:maxCellId		// Datos de prueba
					});
				}
				
				
				
				
				
/* 				taxonId: the id of the taxon in the GBIF backbone (nub) taxonomy. This is mandatory
    			rank: one of kingdom,phylum,class,order,family,genus,species(will include subspecies) or nub(will not include subspecies). This is mandatory
			    tvzCode: the tvzCodes (see WIKI). This can be repeated to logically OR tvzCodes
 */    
    
 			}
 			
 			private function onErrorDownloading(event:FaultEvent):void{
				currentState="error";	

				ppApiService.removeEventListener(ResultEvent.RESULT,onBeginToDownload);
				ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);

			}
			
			private function onBeginToDownload(event:ResultEvent):void {
				
				var res:Object = JSON.decode(event.result as String);
				
				downloadURL = serviceURL + (res.url) as String;
				
				ppApiService.removeEventListener(ResultEvent.RESULT,onBeginToDownload);
				ppApiService.addEventListener(ResultEvent.RESULT,checkStatus);
				
				downloadInProcess = true;
				ppApiService.url= downloadURL;
				
				
				// After 2 minutes, the timer will stop			
				timer = new Timer(2000,180000);
				timer.addEventListener(TimerEvent.TIMER,ppApiService.send);
				timer.start();
				
			}
			
			private function checkStatus(event:ResultEvent):void{
				// TODO: Stop the time after the time	
				if (downloadInProcess) {
					
					var res:Object = JSON.decode(event.result as String);
					
					if (res.status == "complete"){
						downloadInProcess = false;
						
						timer.stop();
						timer.removeEventListener(TimerEvent.TIMER,ppApiService.send);
						
						urlToDownload = serviceURL + (res.url) as String;
						
						navigateToURL(new URLRequest(urlToDownload),"_blank");	
						
						currentState = "ready";
						
						ppApiService.removeEventListener(FaultEvent.FAULT,onErrorLoading);
					}
					
				}
				
			}


			private function navigateToDownload():void{
				
				navigateToURL(new URLRequest(urlToDownload),"_blank");	
				
			}
			private function activateDownload():void{
				if (shadowbutton1.enabled == true)
					shadowbutton1.enabled = false;
				else
					shadowbutton1.enabled = true;
			}
			
		]]>
	</mx:Script>
	
	<mx:HTTPService id="ppApiService" method="GET" resultFormat="text" fault="trace('error')" />
	
	<mx:Button  label="X" color="#FFFFFF" styleName="nullButton" textDecoration="normal" width="30" right="3" top="6" toolTip="Close" useHandCursor="true" 
		buttonMode="true" mouseChildren="false" click="MyEventDispatcher.onCloseDownloadWindow(); currentState = '';"/>
	
	<mx:VBox left="30" right="30" top="35" verticalGap="0" id="vbox1">
		<mx:Label text="SCOPE AND SUMMARY OF YOUR DATA" color="#FFFFFF" fontWeight="normal" fontSize="13"  width="100%" height="23" id="label1"/>
		<mx:Spacer height="5" />
		<mx:Canvas height="74" width="574" styleName="bkgTopDownload" id="canvasTopDownload">
			<mx:Label x="10" y="10" text="70" fontSize="17" color="#FFFFFF" id="id_elevation_filter0" />
			<mx:Image id="arrowRangeElevation" x="50" y="20" source="assets/arrowRange.png" />
			<mx:Label x="66" y="10" text="70" fontSize="17" color="#FFFFFF" id="id_elevation_filter1" />
			<mx:Label x="10" y="34" text="ELEVATION RANGE" fontSize="11" color="#4D4D4D" id="elevationLabel" />
			
			<mx:Label x="132" y="10" text="130" fontSize="17" color="#FFFFFF" id="id_relief_filter0" />
			<mx:Image id="arrowRangeRelief" x="183" y="20" source="assets/arrowRange.png" />
			<mx:Label x="200" y="10" text="451" fontSize="17" color="#FFFFFF" id="id_relief_filter1" />
			<mx:Label x="132" y="34" text="ROUGHNESS RANGE" fontSize="11" color="#4D4D4D" id="roughnessLabel" />
			
			<mx:Label x="259" y="10" text="Number" fontSize="17" color="#FFFFFF" id="id_number_veg_types"  width="100.33333" height="23"/>
			<mx:Label x="259" y="34" text="VEGETATION TYPES" fontSize="11" color="#4D4D4D" id="vegetationLabel" />
			
			<mx:Label x="384" y="10" text="ALL TAXA" fontSize="17" color="#FFFFFF" id="id_taxon_result"  width="180" height="23"/>
			<mx:Label x="384" y="34" text="TAXON SELECTED" fontSize="11" color="#4D4D4D" id="taxonSelectedLabel" />
		</mx:Canvas>
	
		<mx:Canvas height="135" width="574" backgroundColor="#121213" id="canvas2" horizontalScrollPolicy="off">
			<mx:HBox  horizontalGap="15" left="20" right="20" top="21" bottom="23" id="hbox4">
				<components:DownloadType id="download_world" click="download_world.selected_item=true; download_bound.selected_item=false;" world_type="World" selected_item="false" />
				<components:DownloadType id="download_bound" click="download_world.selected_item=false; download_bound.selected_item=true;" world_type="Bound" selected_item="true" />
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas width="574" height="118" backgroundColor="#121213" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="canvas1">
			<mx:HRule width="100%" height="1"  strokeWidth="1" strokeColor="#19191A"/>
			
			<mx:HBox horizontalGap="0" right="20" left="20" top="30" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="hbox1">
				<components:DownloadSize  label_number="{downloadSize}" id="downloadsize1" />
				<components:DownloadRepeat label_number="{ocurrences}" label_text="OCCURENCES" id="downloadrepeat1"/>
				<components:DownloadRepeat label_number="{observations}" label_text="OBSERVATIONS" />
				<components:DownloadRepeat label_number="{specimens}" label_text="SPECIMENS" />
				<components:DownloadRepeat label_number="{providers}" label_text="PROVIDERS" bar="false"/>
			</mx:HBox>
		</mx:Canvas>
	</mx:VBox>
	
	
	<mx:HBox  bottom="30" left="30" width="412" borderStyle="none" horizontalGap="0" horizontalScrollPolicy="off" id="hbox2">
		<mx:CheckBox id="terms" label="" cornerRadius="10" click="activateDownload()" selected="false"/>
		<mx:Label text="Before continue, you must accept the" fontSize="11" color="#FFFFFF" paddingLeft="3" id="label6"/>
		<mx:Button label="terms and conditions" styleName="linkButton" paddingLeft="0" paddingRight="0" useHandCursor="true" buttonMode="true" mouseChildren="false" paddingTop="0" paddingBottom="3" click="navigateToURL(new URLRequest('../html/termsAndConditions.html'))" id="button2"/>
		<mx:Label text="of the service" fontSize="11" color="#FFFFFF" id="label7"/>
	</mx:HBox>	
	<utils:ShadowButton height="32" label="Download" color="#FFFFFF" fontSize="17" fontWeight="normal" click="onClickToDownload()"
					useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="download"  right="30" bottom="30" width="150" id="shadowbutton1" enabled="false"/>
</mx:Canvas>
