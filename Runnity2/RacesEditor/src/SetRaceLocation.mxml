<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="init()" xmlns:local="*">
	
	<mx:Canvas left="0" right="0" top="0" height="75%">
		<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mapready="onMapReady(event)" width="100%" height="100%"
    	key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRTy9E-TgLeuCHEEJunrcdV8Bjp5lBTu2Rw7F-koeV8TrxpLHZPXoYd2BA"/>
		<mx:TextInput id="searchInput" left="96" top="10" enter="searchLocation(searchInput.text)"/>
		<mx:Button label="Buscar" left="255" top="10" click="searchLocation(searchInput.text)" useHandCursor="true" buttonMode="true" mouseChildren="false" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]" 
				color="#19355B" themeColor="#09283B" borderColor="#333333" />
		<mx:Canvas width="226" height="22" backgroundColor="#FFFFFF" left="328" top="10">
			<mx:Label x="10" y="4" text="Distancia de carrera:" id="expText"/>
			<mx:Label x="129" y="4" width="97" id="distance" textAlign="right"/>
		</mx:Canvas>
		<mx:Button id="saveButton" label="Guardar recorrido y altemetría" right="10" top="40" click="saveTrack()" fillAlphas="[1.0, 1.0, 1.0, 1.0]"/>
	<mx:Button id="clean" label="Limpiar" click="clearMarkers()" left="10" bottom="30" useHandCursor="true" buttonMode="true" mouseChildren="false" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]" 
				color="#19355B" themeColor="#09283B" borderColor="#333333" />
	<mx:Button id="undoPoint" label="Deshacer último" left="83" bottom="30" click="undoRoute()" useHandCursor="true" buttonMode="true" mouseChildren="false" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]" 
				color="#19355B" themeColor="#09283B" borderColor="#333333" />
	<mx:Button id="createAltimetry" label="Crear altimetría" right="10" bottom="30" click="getAltimetriaFresh()" useHandCursor="true" buttonMode="true" mouseChildren="false" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]" 
				color="#19355B" themeColor="#09283B" borderColor="#333333" />
	</mx:Canvas>
	
	<mx:Script>
	    <![CDATA[
	    	import mx.collections.ArrayCollection;
	    	import mx.events.FlexEvent;
	    	import mx.messaging.SubscriptionInfo;
	    	import mx.core.Application;
	    	import mx.formatters.NumberFormatter;
	    	import mx.formatters.Formatter;
	    	import com.google.maps.services.GeocodingResponse;
	    	import com.google.maps.services.Placemark;
	    	import com.google.maps.services.GeocodingEvent;
	    	import mx.rpc.events.FaultEvent;
	    	import mx.rpc.events.ResultEvent;
	    	import com.google.maps.services.ClientGeocoder;
	    	import com.google.maps.overlays.Polyline;
	    	import com.google.maps.services.DirectionsOptions;
	    	import com.google.maps.interfaces.IPolyline;
	    	import com.google.maps.LatLngBounds;
	    	import com.google.maps.Color;
	    	import mx.controls.Alert;
	    	import com.google.maps.services.DirectionsEvent;
	    	import com.google.maps.services.Directions;
	    	import mx.controls.Label;
	    	import com.google.maps.styles.StrokeStyle;
	    	import com.google.maps.styles.FillStyle;
	    	import com.google.maps.overlays.MarkerOptions;
	    	import com.google.maps.overlays.Marker;
	    	import com.google.maps.MapMouseEvent;
	    	import com.google.maps.controls.MapTypeControl;
	    	import com.google.maps.controls.PositionControl;
	    	import com.google.maps.controls.ZoomControl;
		    import com.google.maps.LatLng;
		    import com.google.maps.Map;
		    import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
		    import com.google.maps.MapAction;
		    
		    private var count: int = 0;
		    private var aux: int = 0;
		    [Bindable]public var raceRun: Array = new Array();
		    [Bindable]private var altimetry: Array = new Array();
		    private var pol: Polyline;
		    private var endMarker: Marker;
		    private var formatter:NumberFormatter = new NumberFormatter();
		    private var auxPolyLinesPoints:Array =[]
		    public var idRace: Object = new Object();

			
			private function init():void {
				this.addEventListener(FlexEvent.DATA_CHANGE, geometryData);
			}
		
			private function geometryData(ev:FlexEvent):void {
				
				idRace = this.data;
				
				if (idRace.track) {
					
					//PARA VER EL RECORRIDO
					map.clearOverlays();
					raceRun = new Array();
					var bounds:LatLngBounds = new LatLngBounds();
					
					for (var i:int=0 ; i<idRace.track.length; i++)  { 
						bounds.extend(new LatLng((idRace.track as Array)[i].lat, (idRace.track as Array)[i].lon));
				    	raceRun.push(new LatLng((idRace.track as Array)[i].lat, (idRace.track as Array)[i].lon)); 
				    }	
				    
				    var markerA:Marker = new Marker(raceRun[0],new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					map.addOverlay(markerA);				
					
					endMarker = new Marker(raceRun[i-1],new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "Ll",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					map.addOverlay(endMarker);
					
					pol = new Polyline(raceRun);
		 			var directionsBounds:LatLngBounds = pol.getLatLngBounds();
					map.addOverlay(pol);
					trace(map.getBoundsZoomLevel(bounds));
					map.setCenter(bounds.getCenter(),12);
					calculateDistance();
					
					//PARA MOSTRAR LA ALTIMETRÍA
					if (idRace.altimetria != "") {
						altimetry = (idRace.altimetria as String).split(",");
						AltimetryChart.dataProvider = altimetry;
						updateChartValues();
					}
					
				} else {
					map.clearOverlays();
					altimetry = new Array();
					AltimetryChart.dataProvider = altimetry;
					map.setCenter(new LatLng(40.44694705960048, -3.33984375), 5, MapType.NORMAL_MAP_TYPE);
				}
				
			}

		
		    private function onMapReady(event:Event):void {
		    	map.setDoubleClickMode(MapAction.ACTION_NOTHING); 
	  			map.addControl(new ZoomControl());
	  			map.addControl(new PositionControl());
	  			map.addControl(new MapTypeControl());
		        map.addEventListener(MapMouseEvent.CLICK, onMapClick);			
			}
			
			
			private function onDirFail(event:DirectionsEvent):void {
			  trace("error")
			}
			
			private function onDirLoad(event:DirectionsEvent):void {
			    var dir:Directions = event.directions;
			                
			    map.clearOverlays();
			    var directions:Directions =
				event.directions;
				var directionsPolyline:IPolyline = directions.createPolyline();
				map.addOverlay(directionsPolyline);
			  
			    var directionsBounds:LatLngBounds = directionsPolyline.getLatLngBounds();
				map.setCenter(directionsBounds.getCenter());
			}
		    
		  
		
		    protected function onMapClick(event:MapMouseEvent):void {  

		       
				raceRun.push(event.latLng);
				
		    	if (raceRun.length==1) {
		    		var markerA:Marker = new Marker(event.latLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					map.addOverlay(markerA);
					
		    	} else {
		    		if (pol!=null)
		    			map.removeOverlay(pol);
		    		pol = new Polyline(raceRun);
					map.setCenter(event.latLng);
		      		map.addOverlay(pol); 	         					
	 				var marker: Marker = new Marker(event.latLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "Ll",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					if (raceRun.length>2) map.removeOverlay(endMarker);
					endMarker = marker;
					map.addOverlay(marker);
		    		
		    	}
		    	calculateDistance();
		    	var tempCoords:Array=[];
				for each (var po:LatLng in raceRun) {
					tempCoords.push({lat:po.lat(),lon:po.lng()});
				}
				
				var tempAl:Array=[];
				for each(var al:Number in altimetry) {
					tempAl.push(Math.round(al));
				}
				Application.application.server2.updateRunGeometry(tempCoords,tempAl,Application.application.raceList.selectedItem.id);
		    }
		    
		    private function undoRoute():void {
			    raceRun.pop();
			    pol = new Polyline(raceRun);
			    aux--;
			    altimetry.pop();

			    map.clearOverlays();

			    
			    if (raceRun.length==1) {
			    	var marker: Marker = new Marker(raceRun[0] as LatLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
					endMarker = marker;
					map.addOverlay(marker);
					map.addOverlay(pol);
			    } else {
			    	if (raceRun.length>1) {
			    		var markerA: Marker = new Marker(raceRun[0] as LatLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "S",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
						map.addOverlay(markerA);
						map.addOverlay(pol);
						var markerB: Marker = new Marker(raceRun[raceRun.length - 1] as LatLng,new MarkerOptions({ fillStyle: new FillStyle({ alpha: 0.75, color: 0x00CCFF}), 
								         labelFormat: {color: 0xFFFFFF, bold: true},
								         draggeable: false,
								         hasShadow: false, 
								         radius: 12, 
								         label: "Ll",
								         strokeStyle: new StrokeStyle({ alpha: 0.8, color: 0x000000, thickness: 1 })
								         }));
						endMarker = markerB;
						map.addOverlay(markerB);
			    		
			    	}
			    	
			    }
			    calculateDistance();	
		    }
		

		    private function clearMarkers():void {
		    	raceRun = new Array();
		    	map.clearOverlays();
		    	aux = 0;
		    	altimetry = new Array();
		    	AltimetryChart.dataProvider = altimetry;
		    	distance.text = "";
		    }
		    
		    private function onResult(ev: ResultEvent):void {
		    	if (ev.result.height.meters<0) {
		    		altimetry.push(0);
		    	} else {
		    		altimetry.push(ev.result.height.meters);
		    	}	

		    	aux++;
		    	
		    	getAltitudes();
		    }
		    
		    private function onFault(ev: FaultEvent):void {
		    	trace("fault");
		    }
		    
		    private function getAltimetriaFresh():void {
		    	

		    	altimetry = new Array();
		    	
		    	var maxNodes:Number = Math.round (Number ((distance.text as String).substr(0,7)) / 0.1);
		    	for(var i:Number=0;i<maxNodes;i++) {
		    		var po:LatLng = getPointAtDistance(pol,i*(calculateDistanceResult()/maxNodes));
		    		auxPolyLinesPoints.push(po);
		    	}
		    	getAltitudes();
		    }
		    
		    private function getAltitudes():void {
		    	
		    	if (aux!=auxPolyLinesPoints.length) {
		    		loader.visible = true;
		    		altitudeService.url = "http://www.earthtools.org/height/" + (auxPolyLinesPoints[aux] as LatLng).lat() + "/" +  (auxPolyLinesPoints[aux] as LatLng).lng();
		        	altitudeService.send();
		    	} else {
		    		loader.visible = false;
		    		AltimetryChart.dataProvider = altimetry;
		    		updateChartValues();
		    	}
		    }
		    
		    private function updateChartValues():void {
		    	//coger el mayor y el menor
		    	var min: Number = 20000;
		    	var max: Number = 0;
		    	var findRange: Boolean = false;
		    	
		    	for (var i: int=0;i<altimetry.length;i++) {
		    		if ((Number(altimetry[i]))<min) {
		    			min = Number(altimetry[i]);
		    		}
		    		if ((Number(altimetry[i]))>max) {
		    			max = Number(altimetry[i]);
		    		}
		    	}
		    	
		    	if (min<200) {
		    		linearAxis.minimum = 0;
		    	} else {
		    		linearAxis.minimum = min-200;
		    	}
		    	linearAxis.maximum = max+200;
		    	
				if (max-min<100) linearAxis.interval = 50;
		    	if (max-min<200 && max-min>100) linearAxis.interval = 75;
		    	if (max-min<400 && max-min>200) linearAxis.interval = 100;
		    	if (max-min<800 && max-min>400) {
		    		linearAxis.interval = 200;
		    	} 
		    	if (max-min<1000 && max-min>800) {
		    		linearAxis.interval = 250;
		    		linearAxis.minimum = min-450;
		    	} 
		    	if (max-min<1500 && max-min>1000) {
		    		linearAxis.interval = 300;
		    		linearAxis.minimum = min-500;
		    	} 
		    	if (max-min>1500) {
		    		linearAxis.interval = 500;
		    		linearAxis.minimum = min-700;
		    	} 
		    	
		    	
		    }
		    
		    private function searchLocation(str: String):void {
		    	var geocoder:ClientGeocoder = new ClientGeocoder();
                geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, geocoder_geocodingSuccess);
                geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, geocoder_geocodingFailure);
                geocoder.geocode(str);

		    }
		    
		    private function geocoder_geocodingSuccess(evt:GeocodingEvent):void {
                var result:Placemark = GeocodingResponse(evt.response).placemarks[0];

                var box:Object = result.ExtendedData.LatLonBox;
                var pBbox:LatLngBounds = new LatLngBounds(new LatLng(box.north,box.west),new LatLng(box.south,box.east));
                							                
                map.setCenter(result.point,map.getBoundsZoomLevel(pBbox));
            }
            
            private function geocoder_geocodingFailure(evt:GeocodingEvent):void {
                Alert.show("No hemos encontrado esa dirección: " + evt.name);
            }
		    
			
			private function calculateDistance():void{
			    var dist: Number=0;
			    for (var x:int =0;x<raceRun.length-1;x++){
			        dist += (raceRun[x]).distanceFrom(raceRun[x+1])/1000;
			    }
			    distance.text = (formatter.format(dist)).substr(0,7) + "km";
			}
			
			private function calculateDistanceResult():Number{
			    var dist: Number=0;
			    for (var x:int =0;x<raceRun.length-1;x++){
			        dist += (raceRun[x]).distanceFrom(raceRun[x+1]);
			    }
			    return dist;
			}			
			
			
			private function saveTrack():void {
				var tempCoords:Array=[];
				for each (var po:LatLng in raceRun) {
					tempCoords.push({lat:po.lat(),lon:po.lng()});
				}
				
				var tempAl:Array=[];
				for each(var al:Number in altimetry) {
					tempAl.push(Math.round(al));
				}
				
				Application.application.server.addEventListener(ResultEvent.RESULT,onUpdateGeometryOK);
				Application.application.server.addEventListener(FaultEvent.FAULT,onUpdateGeometryKO);
				Application.application.server.updateRunGeometry(tempCoords,tempAl,Application.application.raceList.selectedItem.id);
			}
			
			private function onUpdateGeometryOK(ev:ResultEvent):void {
				Application.application.server.removeEventListener(ResultEvent.RESULT,onUpdateGeometryOK);
				Application.application.server.removeEventListener(FaultEvent.FAULT,onUpdateGeometryKO);
				Alert.show("Geometría editada o añadida satisfactoriamente");
			}
			
			private function onUpdateGeometryKO(ev:FaultEvent):void {
				Application.application.server.removeEventListener(ResultEvent.RESULT,onUpdateGeometryOK);
				Application.application.server.removeEventListener(FaultEvent.FAULT,onUpdateGeometryKO);
				Alert.show(ev.fault.faultString);
			}
			
	        private function getPointAtDistance(track:Polyline,metres:Number):LatLng {
	
	            if (metres == 0) return track.getVertex(0);
	            if (metres < 0) return null;
	            var dist:Number=0;
	               var olddist:Number=0;
	               for (var i:uint=1; (i < track.getVertexCount() && dist < metres); i++) {
	                       olddist = dist;
	                       dist += track.getVertex(i).distanceFrom(track.getVertex(i-1));
	               }
	               if (dist < metres) {return null;}
	                       var p1:LatLng= track.getVertex(i-2);
	                       var p2:LatLng= track.getVertex(i-1);
	                       var m:Number = (metres-olddist)/(dist-olddist);
	
	                // Use linear interpolation on the last bit
	               return new LatLng(p1.lat() + (p2.lat()-p1.lat())*m,
	                   p1.lng() + (p2.lng()-p1.lng())*m);
	         }				
			
	    ]]>
	</mx:Script>	

	<mx:AreaChart id="AltimetryChart" left="0" bottom="0" height="25%" right="0">
		<mx:verticalAxis>
            <mx:LinearAxis id="linearAxis" baseAtZero="false" interval="50" maximum="900" minimum="500"  title="Altitud"/>
        </mx:verticalAxis>
		<mx:series>
			<mx:AreaSeries displayName="Series 1" yField="" form="curve" />
		</mx:series>
	</mx:AreaChart>
	
	<local:LoadingWindow id="loader" width="100%" height="100%" visible="false" message="Generando la altimetría, no desesperes... deja que acabe antes de nada!"/>
	
	<mx:HTTPService id="altitudeService" result="onResult(event)" fault="onFault(event)" resultFormat="object"/>
	
</mx:Canvas>
