<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="#c7e2ff"
	layout="absolute" xmlns:maps="com.google.maps.*"
	creationComplete="checkParams()" xmlns:local="*" resize="onResized(event)"
	borderStyle="solid" borderColor="#c1cdda" borderThickness="1" xmlns:components="com.google.analytics.components.*">
	
<mx:Style source="style/fonts.css"/>
<mx:Style source="style/ui.css"/>

<mx:Script>
	<![CDATA[
		import com.google.maps.Color;
		import com.google.maps.MapOptions;
		import com.google.maps.MapEvent;
		import mx.collections.GroupingCollection;
		import mx.collections.GroupingCollection2;
		import com.google.maps.interfaces.IMapType;
		import mx.events.ResizeEvent;
		import mx.collections.Grouping;
		import mx.collections.GroupingField;
		import mx.collections.SummaryField;
		import mx.collections.SummaryRow;
		import mx.collections.ArrayCollection;
		import mx.rpc.events.ResultEvent;
		import com.google.maps.LatLng;
		import com.google.maps.LatLngBounds;
		import mx.controls.Alert;
		import mx.effects.easing.Exponential;
		import mx.core.UIComponent;
		import gs.TweenLite;
		import com.google.maps.MapZoomEvent;
		import com.google.maps.overlays.TileLayerOverlay;
		import com.google.maps.MapType;
		import com.google.maps.controls.MapTypeControl;
		import com.google.maps.controls.ZoomControl;
		import com.google.maps.controls.ControlPosition;
		
		private var cellTileLayer:CellsTileLayer;
		
		private var mapMapType:IMapType;
		private var satMapType:IMapType;
		private var hibridMapType:IMapType;
		private var terrainMapType:IMapType;
		
		[Bindable]
		public var appWidth:Number=width;		
		public var mainCanvasState:String="map";
		
		[Bindable]
		private var providersAc:ArrayCollection = new ArrayCollection();		
		private var dcGc:GroupingCollectionWithTimer;		
		
		
		private function checkParams():void {
			if (parameters.taxon_id==0) {
				Alert.show("The Widget has been loaded without specifying a taxon_id parameter");
				hugeCanvas.enabled=false;
			}
			server.getProviders(parameters.taxon_id);
			tracker.trackPageview( "/"+parameters.taxon_id );
		}

		private function onMapPreInitialize(event:MapEvent):void {
			var options:MapOptions = new MapOptions({
			  backgroundFillStyle: {
			    alpha: 1,
			    color: Color.WHITE
			  },
			  controlByKeyboard: true,
			  overlayRaising: true,
			  dragging: true,
			  continuousZoom: false
			});	
			map.setInitOptions(options);
					
		}
		
		private function onMapReady(event:Event):void {
			var topLeft:ControlPosition = new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,10,10);
		    var zoomControl:ZoomControl = new ZoomControl();
		    zoomControl.setControlPosition(topLeft);
		    map.addControl(zoomControl);
		    
		    for each(var mt:IMapType in map.getMapTypes()) {
			    map.removeMapType(mt);
		    }
		    //map.setMapType(MapType.PHYSICAL_MAP_TYPE);
		    
		    var worldBBox:LatLngBounds = new LatLngBounds(new LatLng(-70,-170),new LatLng(70,170));
		    var wordZoom:Number = map.getBoundsZoomLevel(worldBBox);
		    map.setZoom(wordZoom);
		    
		    if (parameters.taxon_id!=0) {
			    cellTileLayer = new CellsTileLayer(parameters.taxon_id);
                changeMapType("terrainMapType");
		    }
        	
		} 
		
		private function changeMapType(mapType:String):void {
			
			if(mapType=="mapMapType") {
				if (mapMapType == null) {
			    	var mapTileLayers:Array = MapType.NORMAL_MAP_TYPE.getTileLayers().concat([]);
			    	mapTileLayers.push(cellTileLayer);	
	        		mapMapType = new MapType(mapTileLayers,MapType.NORMAL_MAP_TYPE.getProjection(),"MAP");
	                map.addMapType(mapMapType);					
				}
				mapButton.selected=true;
				satButton.selected=false;
				hibridButton.selected=false;
				terrainButton.selected=false;
				map.setMapType(mapMapType); 
			} else if(mapType=="satMapType") {
				if (satMapType == null) {
			    	var satTileLayers:Array = MapType.SATELLITE_MAP_TYPE.getTileLayers().concat([]);
			    	satTileLayers.push(cellTileLayer);	
	        		satMapType = new MapType(satTileLayers,MapType.SATELLITE_MAP_TYPE.getProjection(),"SAT");
	                map.addMapType(satMapType);				
				}
				mapButton.selected=false;
				satButton.selected=true;
				hibridButton.selected=false;
				terrainButton.selected=false;				
				map.setMapType(satMapType); 
			} else if(mapType=="hibridMapType") {
				if (hibridMapType == null) {
			    	var hibridTileLayers:Array = MapType.HYBRID_MAP_TYPE.getTileLayers().concat([]);
			    	hibridTileLayers.push(cellTileLayer);	
	        		hibridMapType = new MapType(hibridTileLayers,MapType.HYBRID_MAP_TYPE.getProjection(),"HIB");
	                map.addMapType(hibridMapType);				
				}
				mapButton.selected=false;
				satButton.selected=false;
				hibridButton.selected=true;
				terrainButton.selected=false;				
				map.setMapType(hibridMapType); 
			} else if(mapType=="terrainMapType") {
				if (terrainMapType == null) {
			    	var terrainTileLayers:Array = MapType.PHYSICAL_MAP_TYPE.getTileLayers().concat([]);
			    	terrainTileLayers.push(cellTileLayer);	
	        		terrainMapType = new MapType(terrainTileLayers,MapType.PHYSICAL_MAP_TYPE.getProjection(),"TER");
	                map.addMapType(terrainMapType);				
				}
				mapButton.selected=false;
				satButton.selected=false;
				hibridButton.selected=false;
				terrainButton.selected=true;				
				map.setMapType(terrainMapType); 
			}
			
		}

		private function onGetDataProviders(ev:ResultEvent):void {
 			providersAc = new ArrayCollection(ev.result as Array);
	        //providersCanvas.providersAdg.dataProvider=providersAc;			
	        
			
			dcGc = new GroupingCollectionWithTimer();		
			dcGc.source = providersAc;
			var summRow:SummaryRow = new SummaryRow();
			summRow.summaryPlacement = "group";
			summRow.fields = [new SummaryField("num_occ")];
			var provGf:GroupingField = new GroupingField("data_provider_name");
			provGf.summaries = [summRow];
			dcGc.grouping = new Grouping();
			dcGc.grouping.fields = [provGf];
			dcGc.refresh(true);     
	        providersCanvas.providersAdg.dataProvider=dcGc;		

			var timer:Timer = new Timer(500,0);
			timer.addEventListener(TimerEvent.TIMER,function():void{
							if(dcGc.protectedTimer == null) {
								timer.stop();
								providersCanvas.currentState='';
							}});
			timer.start();	        
	        
		}


		private var isResizing:Boolean=false;
        private var tim:Timer = new Timer(300,1);
		private function onResized(ev:ResizeEvent):void {
	        if(!isResizing) {
				appWidth=width;
	            tim.addEventListener(TimerEvent.TIMER, checkResize,false,0,true);
	            tim.start();
	            isResizing=true;
			}
		}
		
		private function checkResize(event:TimerEvent):void {
				appWidth=width;				
				hugeCanvas.width=appWidth*2;
				if (mainCanvasState=="map") {
					hugeCanvas.x=0;
				} else {
					hugeCanvas.x=appWidth*-1;
				}
	            Application.application.validateNow();
	            isResizing=false;
	            tim.stop();			
	            tim.removeEventListener(TimerEvent.TIMER, checkResize,false);
		}

		public function toggleMainCanvasState():void {
			if (mainCanvasState=="map") {				
				mainCanvasState="coverFlow";
				hugeCanvas.move(appWidth*-1,0);
				tracker.trackPageview( "/"+parameters.taxon_id+"/providers" );
				
			} else {
				mainCanvasState="map";
				hugeCanvas.move(0,0);
				tracker.trackPageview( "/"+parameters.taxon_id );
			}
		}	
		
		public function toggleFullScreen():void{
            try {
                switch (Application.application.stage.displayState) {
                    case StageDisplayState.FULL_SCREEN:
                        Application.application.stage.displayState = StageDisplayState.NORMAL;
                        fullScreenButton.selected=false;
                        break;
                    default:
                        Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
                        fullScreenButton.selected=true;
						tracker.trackEvent("event","fullscreen","true");
                        break;
                }
            } catch (err:SecurityError) {
                // ignore
                trace(err.message);
            }
		}				

	]]>
</mx:Script>
	<mx:Canvas id="hugeCanvas" width="{appWidth*2}" horizontalScrollPolicy="off" verticalScrollPolicy="off" moveEffect="{moveEffect}" bottom="20" top="0">
		<mx:HBox horizontalGap="0" width="100%" height="100%">
			<mx:Canvas id="mapCanvas" width="50%" height="100%" x="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<maps:Map id="map" width="100%" height="100%" mapevent_mappreinitialize="onMapPreInitialize(event)"
					key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRQIcf2DVyaa1_M_ai60HThku0goiRS10yzn3XPkTnaqnGjjLpkuwyyW9g" 
					mapevent_mapready="onMapReady(event)"  />
						<mx:HBox horizontalGap="3" right="9" top="9"> 
						<mx:Button id="mapButton" label="MAP" styleName="smallButton" click="changeMapType('mapMapType')"
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
						<mx:Button id="satButton" label="SATELLITE" styleName="smallButton" click="changeMapType('satMapType')"
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
						<mx:Button id="hibridButton" label="HIBRID" styleName="smallButton" click="changeMapType('hibridMapType')"
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
						<mx:Button id="terrainButton" label="TERRAIN" styleName="smallButton"  click="changeMapType('terrainMapType')"
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
						<mx:Button id="fullScreenButton" label="FULLSCREEN" styleName="smallButton" click="toggleFullScreen()" 
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
					</mx:HBox>
					<mx:Button label="VIEW RESOURCES" bottom="20" right="-3" 
						styleName="providersButton" width="100"
						useHandCursor="true" mouseChildren="false" buttonMode="true"
						click="toggleMainCanvasState()"/>
			</mx:Canvas>
			<mx:Canvas id="providerCanvas" width="50%" height="100%" x="{appWidth}">
				<local:ProvidersCanvas id="providersCanvas" width="100%" height="100%" /> 
			</mx:Canvas>
		</mx:HBox>
	</mx:Canvas>
	<mx:Canvas x="0" width="100%" height="20" styleName="headerCanvas" bottom="0" backgroundColor="#FFFFFF">
		<mx:Image source="@Embed('/assets/gbifLogo.png')" y="0" left="3"
			click="navigateToURL(new URLRequest('http://www.gbif.org'))"
			useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		<mx:Label y="0" text="Powered by gbif" fontFamily="DINOT-Medium" fontSize="11" color="#666666" left="21"
			click="navigateToURL(new URLRequest('http://www.gbif.org'))"
			useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		<mx:Image source="@Embed('/assets/vizzLogo.png')" y="0" right="3"
			click="navigateToURL(new URLRequest('http://www.vizzuality.com'))"
			useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		<mx:Label y="0" text="Developed by vizzuality" fontFamily="DINOT-Medium" fontSize="11" color="#CCCCCC" right="26"
			click="navigateToURL(new URLRequest('http://www.vizzuality.com'))"
			useHandCursor="true" buttonMode="true" mouseChildren="false"/>			
	</mx:Canvas>	
    <mx:Move id="moveEffect" 
        duration="500" 
        easingFunction="{Exponential.easeInOut}" 
        perElementOffset="20"/>
        
	<mx:RemoteObject id="server" 
	endpoint="http://localhost/php/amfphp/gateway.php"
	result="onGetDataProviders(event)"
	fault="trace(event)"
	destination="EolServices" source="EolServices"
	showBusyCursor="false" />	
	
	<components:FlexTracker id="tracker" mode="AS3" account="UA-7333475-2" visualDebug="false" />
	        	
</mx:Application>
